<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Make More Machines - programming</title><link href="http://www.agapow.net/" rel="alternate"></link><link href="http://www.agapow.net/feeds/programming.atom.xml" rel="self"></link><id>http://www.agapow.net/</id><updated>2016-09-12T00:00:00+01:00</updated><entry><title>What's in a (file)name?</title><link href="http://www.agapow.net/programming/misc/whats-in-a-filename/" rel="alternate"></link><published>2016-09-12T00:00:00+01:00</published><updated>2016-09-12T00:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2016-09-12:/programming/misc/whats-in-a-filename/</id><summary type="html">&lt;p&gt;Here's a simple conundrum: Given a file, say:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/foo/bar/baz.exe
&lt;/pre&gt;
&lt;p&gt;what are the names for the different parts of it?&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;directory (part)&lt;/em&gt; is &lt;tt class="docutils literal"&gt;/foo/bar&lt;/tt&gt;. The &lt;em&gt;non-directory or file part&lt;/em&gt; is &lt;tt class="docutils literal"&gt;baz.exe&lt;/tt&gt;. The &lt;em&gt;extension&lt;/em&gt; is &lt;tt class="docutils literal"&gt;.exe&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So what is &lt;tt class="docutils literal"&gt;baz&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;Frequently, I've written code that produces …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a simple conundrum: Given a file, say:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/foo/bar/baz.exe
&lt;/pre&gt;
&lt;p&gt;what are the names for the different parts of it?&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;directory (part)&lt;/em&gt; is &lt;tt class="docutils literal"&gt;/foo/bar&lt;/tt&gt;. The &lt;em&gt;non-directory or file part&lt;/em&gt; is &lt;tt class="docutils literal"&gt;baz.exe&lt;/tt&gt;. The &lt;em&gt;extension&lt;/em&gt; is &lt;tt class="docutils literal"&gt;.exe&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So what is &lt;tt class="docutils literal"&gt;baz&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;Frequently, I've written code that produces an output file based on this &amp;quot;stem&amp;quot; of the input file name, e.g. &lt;tt class="docutils literal"&gt;quux.xlsx&lt;/tt&gt; might give rise to &lt;tt class="docutils literal"&gt;quux.csv&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;quux.expanded.csv&lt;/tt&gt;. And every time, I wonder what to call it.&lt;/p&gt;
&lt;p&gt;In linguistics, you might talk about the &amp;quot;stem&amp;quot; of a word, reducing complex word to their most basic form. For example, &amp;quot;fishing&amp;quot;, &amp;quot;fished&amp;quot;, and &amp;quot;fisher&amp;quot; would reduce to  &amp;quot;fish&amp;quot;. You might also talk about the &amp;quot;base&amp;quot; or &amp;quot;root&amp;quot; of a word.&lt;/p&gt;
&lt;p&gt;Matlab documentation uses &amp;quot;filename&amp;quot;. It's not clear what a filename plus extension makes. In their defence, under some early operating systems (CP/M,  MS-DOS), the stem &lt;em&gt;is&lt;/em&gt; the filename, with the extension being a sort of metadata.&lt;/p&gt;
&lt;p&gt;Emacs talks about the &amp;quot;filename-sans-extension&amp;quot;. Bit of a mouthful. And French.&lt;/p&gt;
&lt;p&gt;Microsoft's developer documentation talk about the &amp;quot;base&amp;quot;.&lt;/p&gt;
&lt;p&gt;PHP helpfully uses some of the same words but in the opposite direction. &lt;tt class="docutils literal"&gt;baz.exe&lt;/tt&gt; is the &amp;quot;basename&amp;quot;, while &lt;tt class="docutils literal"&gt;baz&lt;/tt&gt; is the &amp;quot;filename&amp;quot;. (Not just PHP either. Some of Python's documentation refers to the filename with extension as the &amp;quot;basename&amp;quot; too. Sheesh.)&lt;/p&gt;
&lt;p&gt;Wikipedia confirms this confusion:&lt;/p&gt;
&lt;blockquote&gt;
Sometimes &amp;quot;filename&amp;quot; is used to mean the entire name, such as the Windows name &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;c:\directory\myfile.txt&lt;/span&gt;&lt;/tt&gt;. Sometimes, it will be used to refer to the components, so the filename in this case would be &lt;tt class="docutils literal"&gt;myfile.txt&lt;/tt&gt;. Sometimes, it is a reference that excludes an extension, so the filename would be just &lt;tt class="docutils literal"&gt;myfile&lt;/tt&gt;. Such ambiguity is widespread&lt;/blockquote&gt;
&lt;p&gt;It later notes that many operating systems talk about the &amp;quot;base&amp;quot; or &amp;quot;stem&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;It's all horribly screwed up. While &amp;quot;base&amp;quot; appears to be the most popular, there are enough situations where it means the exact opposite, that it's a risky term to use anywhere. For my own part, I'll be using &amp;quot;stem&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Stemming"&gt;Stemming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.delorie.com/gnu/docs/elisp-manual-21/elisp_394.html"&gt;Emacs: File Name Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://uk.mathworks.com/help/matlab/ref/fileparts.html"&gt;Matlab: fileparts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/5yb89bw3.aspx"&gt;MSDN: Filename-Parts Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Filename"&gt;Filename&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://secure.php.net/manual/en/function.pathinfo.php"&gt;PHP: pathinfo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="files"></category><category term="nomenclature"></category><category term="programming"></category><category term="names"></category></entry><entry><title>Can't find a variable that doesn't exist</title><link href="http://www.agapow.net/programming/python/cant-find-variable/" rel="alternate"></link><published>2016-09-08T00:00:00+01:00</published><updated>2016-09-08T00:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2016-09-08:/programming/python/cant-find-variable/</id><summary type="html">&lt;div class="section" id="the-symptoms"&gt;
&lt;h2&gt;The symptoms&lt;/h2&gt;
&lt;p&gt;You have a Python script or package that is running perfectly. After you make some alterations, &amp;quot;all of a sudden&amp;quot; you can't run it because it can't find a variable or name:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
AttributeError: 'module' object has no attribute 'foobar'
&lt;/pre&gt;
&lt;p&gt;But if you search for that name, it doesn't …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-symptoms"&gt;
&lt;h2&gt;The symptoms&lt;/h2&gt;
&lt;p&gt;You have a Python script or package that is running perfectly. After you make some alterations, &amp;quot;all of a sudden&amp;quot; you can't run it because it can't find a variable or name:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
AttributeError: 'module' object has no attribute 'foobar'
&lt;/pre&gt;
&lt;p&gt;But if you search for that name, it doesn't exist anywhere in your code. WTF.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution-s"&gt;
&lt;h2&gt;The solution(s)&lt;/h2&gt;
&lt;p&gt;There's two possible causes to this. Let's look at the kinder one first ...&lt;/p&gt;
&lt;p&gt;Python source files are, of course, compiled into &lt;tt class="docutils literal"&gt;.pyc&lt;/tt&gt; files for execution, which are created either on the same level as the source file (Python 2) or in special &lt;tt class="docutils literal"&gt;__pycache__&lt;/tt&gt; directories (Python 3). If a source file has been modified after the compiled file, then the compiled file is refreshed.&lt;/p&gt;
&lt;p&gt;But sometimes odd things happen and the modification dates on files get out of sync, so that it looks like a source file is older than the compiled file. (I've seen this where I've copied files across systems with mismatching internal clocks for example. ) In this case, Python will not see any need to refresh the compiled file and so it will reflect an older version of your source. You'll start tearing your hair out and wondering where this imaginary code is coming.&lt;/p&gt;
&lt;p&gt;The solution is to zap all your cache files. There's a useful Unix one-liner for doing this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% find . -name &amp;quot;*.pyc&amp;quot; -type f -delete
&lt;/pre&gt;
&lt;p&gt;Second possible solution is where you may be editing one version of the code, but Python is seeing the library of another Python version or installation. Pay attention to any paths shown in error messages and look elsewhere on this site for the &lt;cite&gt;PYTHONVERBOSE&lt;/cite&gt; error article.&lt;/p&gt;
&lt;p&gt;Finally, and embarrassingly, you may have done something like this: You wrote a statement to control symbol imports like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
__all__ = (
   'quux',
   'foo'
   'bar',
   'baz',
)
&lt;/pre&gt;
&lt;p&gt;See the error? There's no comma after &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt;, so Python implicitly combines it with the strong on the following line to make &lt;tt class="docutils literal"&gt;foobar&lt;/tt&gt;. Super-easy error to make and super-hard to see. Add the comma and you're fixed.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="programming"></category><category term="error"></category></entry><entry><title>The "verbose" Python</title><link href="http://www.agapow.net/programming/python/verbose/" rel="alternate"></link><published>2016-09-07T00:00:00+01:00</published><updated>2016-09-07T00:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2016-09-07:/programming/python/verbose/</id><summary type="html">&lt;div class="section" id="the-symptoms"&gt;
&lt;h2&gt;The symptoms&lt;/h2&gt;
&lt;p&gt;“Suddenly” (as is traditional to commence these sort of stories), I started having problems with some of the Python installations on my local machine. As is the way of things, I had three distinct sources of Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The native / builtin Python that came with my Mac&lt;/li&gt;
&lt;li&gt;The Python …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-symptoms"&gt;
&lt;h2&gt;The symptoms&lt;/h2&gt;
&lt;p&gt;“Suddenly” (as is traditional to commence these sort of stories), I started having problems with some of the Python installations on my local machine. As is the way of things, I had three distinct sources of Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The native / builtin Python that came with my Mac&lt;/li&gt;
&lt;li&gt;The Python that was installed by brew to support other brew applications&lt;/li&gt;
&lt;li&gt;The Pythons installed by anaconda&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The symptoms were that some of these (notably anaconda) would complain about how they didn’t recognise PYTHONPATH or that they were seeing a package tree of a different version type (2.X) to their own version (3.x):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% python2.7
Python 2.7.6 (default, Sep  9 2014, 15:04:36)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; ^D
% ~/anaconda/bin/python
Error in sitecustomize; set PYTHONVERBOSE for traceback:
KeyError: 'PYTHONPATH'
Python 3.4.3 |Anaconda 2.1.0 (x86_64)| (default, Mar  6 2015, 12:07:41)
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Similar symptoms would occur if you called various python-related utilities: pip, condo, etc.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% conda list
Error in sitecustomize; set PYTHONVERBOSE for traceback:
KeyError: 'PYTHONPATH'
&lt;/pre&gt;
&lt;p&gt;Setting the verbose flag on Python invocation showed that, indeed, the error was originating from within a Python 2.7 library that was being seen by a 3.x version Python:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
...
# code object from /usr/local/lib/python2.7/site-packages/sitecustomize.py
# created '/usr/local/lib/python2.7/site-packages/__pycache__/sitecustomize.cpython-34.pyc'
# wrote '/usr/local/lib/python2.7/site-packages/__pycache__/sitecustomize.cpython-34.pyc'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="attempted-solutions"&gt;
&lt;h2&gt;Attempted solutions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PYTHONPATH was being set in my &lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt; so I deleted it. Nope.&lt;/li&gt;
&lt;li&gt;Maybe the compiled &lt;tt class="docutils literal"&gt;sitecustomize.py&lt;/tt&gt; files had been corrupted? Delete them. Nope.&lt;/li&gt;
&lt;li&gt;Uninstall the brew python? Nope.&lt;/li&gt;
&lt;li&gt;Some of the error messages suggested unsetting &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;. Nope.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Eventually this thread &lt;a class="reference external" href="https://github.com/conda/conda/issues/448"&gt;https://github.com/conda/conda/issues/448&lt;/a&gt; gave me the clue. So I added this to my .bash_profile:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
export PYTHONNOUSERSITE=&amp;quot;$HOME/.local&amp;quot;
&lt;/pre&gt;
&lt;p&gt;And then everything was fine.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="unicode"></category><category term="text-handling"></category><category term="python"></category></entry><entry><title>IPython notebooks in Pelican</title><link href="http://www.agapow.net/programming/web-development/pelican/ipython-notebooks-in-pelican/" rel="alternate"></link><published>2016-09-05T12:00:00+01:00</published><updated>2016-09-05T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2016-09-05:/programming/web-development/pelican/ipython-notebooks-in-pelican/</id><summary type="html">&lt;p&gt;IPython notebooks are an incredibly useful way to do reproducible research and illustrate chunks of code. Obviously you'd like to put some of them on the web. Surely there must be an easy way to include them in a Pelican-based website. So why hasn't anyone done it yet?&lt;/p&gt;
&lt;p&gt;They have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;IPython notebooks are an incredibly useful way to do reproducible research and illustrate chunks of code. Obviously you'd like to put some of them on the web. Surely there must be an easy way to include them in a Pelican-based website. So why hasn't anyone done it yet?&lt;/p&gt;
&lt;p&gt;They have. In several different ways. Just none that I'm happy with.&lt;/p&gt;
&lt;p&gt;This is how I made a reader for &lt;tt class="docutils literal"&gt;.ipynb&lt;/tt&gt; files to include them in my website.&lt;/p&gt;
&lt;div class="section" id="other-solutions"&gt;
&lt;h2&gt;Other solutions&lt;/h2&gt;
&lt;p&gt;Google for possible solutions and you'll often get directed to &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;liquid tags&lt;/a&gt;, a Pelican plugin for extended markup. Basically, it provides a tag for linking to and including IPython notebooks in articles. Liquid tags also need a bit of template hacking to get this inclusion to work. Which seems more difficult than it should be. I just want to drop the notebook in a directory and have Pelican render it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.southampton.ac.uk/~fangohr/blog/blogging-with-the-ipython-notebook.html"&gt;Elsewhere&lt;/a&gt;, it's been suggested that notebooks be converted into another form (ReST) and are then dropped into Pelican. Also too hard and how do we handle images? Others have suggested converting the pages to HTML and then including them in Pelican.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mail.scipy.org/pipermail/ipython-dev/2014-April/013843.html"&gt;Put then up on another site&lt;/a&gt; like Github or Wakari? Then I still have to write a page that points to them.&lt;/p&gt;
&lt;p&gt;Daniel Rodriguez &lt;a class="reference external" href="http://danielfrg.com/blog/2013/03/08/pelican-ipython-notebook-plugin/"&gt;wrote a plugin&lt;/a&gt; that more or less does what I want. (&lt;a class="reference external" href="https://github.com/danielfrg/pelican-ipynb"&gt;Github repo here&lt;/a&gt;. The explanatory text doesn't quite match the repo, so obviously it's evolved some.) This is where I'll start hacking.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This shouldn't be construed as criticism of any of the above solutions, which arguably are more flexible and may fit their creators needs better. But, being a lazy type, I'm willing to sacrifice power for simplicity. And thanks to Daniel for doing the heavy lifting of actually writing a ipynb reader.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hacking-the-reader"&gt;
&lt;h2&gt;Hacking the reader&lt;/h2&gt;
&lt;p&gt;The repo for my hacked and modified reader can be found at: &lt;a class="reference external" href="https://github.com/agapow/pelican-ipynb"&gt;https://github.com/agapow/pelican-ipynb&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="appearance"&gt;
&lt;h3&gt;Appearance&lt;/h3&gt;
&lt;p&gt;Getting an included IPython notebook to look right is tricky. While you can just call on IPython to spit out the HTML for a page, that includes a whole mess of embbedded CSS styles. The Rodriguez reader injects it's own CSS to this end, but then this will interact with the CSS in your chosen Pelican theme and It. All. Gets. A. Bit. Complicated. In addition, the generated webpages looked different under Safari and Chrome for me.&lt;/p&gt;
&lt;p&gt;There's no universal solution to this, it really depends on the Pelican theme you're using. But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I rejigged the reader so the the custom CSS is added after the document CSS, not before&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;!important&lt;/tt&gt; directive may be useful in getting the right look.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="better-figures"&gt;
&lt;h3&gt;Better figures&lt;/h3&gt;
&lt;p&gt;Notebooks include images as embedded data, encoded as Base64. Unfortunately the &lt;a class="reference external" href="http://github.com/getpelican/pelican-plugins/tree/master/better_figures_and_images"&gt;better_figures_and_images&lt;/a&gt; Pelican plugin can't handle these, at least not under Python 3. Nothing to do but disable the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="metadata"&gt;
&lt;h3&gt;Metadata&lt;/h3&gt;
&lt;p&gt;The Rodriguez plugin reads the notebook header for metadata, which you can edit in IPython. I made a few small changes, like mapping the &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; field to &lt;tt class="docutils literal"&gt;title&lt;/tt&gt;, and looking at the first cell for a title. There's also an oddity where - depending on the source - metadata is not always processed. Fixed. (That code was a little suspicious anyway, as it deleted dictionary keys it was iterating over.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="header-levels"&gt;
&lt;h3&gt;Header levels&lt;/h3&gt;
&lt;p&gt;The headers in a normal Pelican document are sensibly set to the right level: &lt;tt class="docutils literal"&gt;H1&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;H2&lt;/tt&gt; etc. But the headers in an notebook are hardcoded in. Longer term, it would be sensible to rewrite them or trim off an initial header, but just be aware that if the notebook starts with a &lt;tt class="docutils literal"&gt;H1&lt;/tt&gt;, you'll end with an article with two headers of the same level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="caching"&gt;
&lt;h3&gt;Caching&lt;/h3&gt;
&lt;p&gt;This is more of a general development tip, but when I was hacking on the reader, changes didn't seem to appear. I narrowed it down to using &lt;tt class="docutils literal"&gt;make devserver&lt;/tt&gt;, which was puzzling until I realised that Pelican only recompiles content if it sees changes in the site content, theme or settings. Plugins are outside that loop. Flushing the cache directory fixed everything.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="pelican"></category><category term="web-development"></category><category term="programming"></category></entry><entry><title>Converting a timedelta to a float</title><link href="http://www.agapow.net/programming/python/convert-timedelta-to-float/" rel="alternate"></link><published>2015-06-26T00:00:00+01:00</published><updated>2015-06-26T00:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2015-06-26:/programming/python/convert-timedelta-to-float/</id><summary type="html">&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;You need to convert a time difference into a floating point quantity, like 2.5 days. Or you may want to do something related like round a fdatetime difference up or down, e.g. 3 or 2 days for our previous example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-complications"&gt;
&lt;h2&gt;The complications&lt;/h2&gt;
&lt;p&gt;When you subtract a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;You need to convert a time difference into a floating point quantity, like 2.5 days. Or you may want to do something related like round a fdatetime difference up or down, e.g. 3 or 2 days for our previous example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-complications"&gt;
&lt;h2&gt;The complications&lt;/h2&gt;
&lt;p&gt;When you subtract a datetime from another in Python, you get a &lt;cite&gt;timedelta&lt;/cite&gt; object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; from datetime import datetime, timedelta
&amp;gt; d1 = datetime (year=2015, month=6, day=1, hour=12, minute=30)
&amp;gt; d2 = datetime (year=2015, month=6, day=7, hour=18, minute=15)
&amp;gt; td = d2 - d1
&amp;gt; td
datetime.timedelta(6, 20700)
&amp;gt; type (td)
datetime.timedelta
&lt;/pre&gt;
&lt;p&gt;Unfortunately, &lt;cite&gt;timedelta&lt;/cite&gt; only returns the &amp;quot;parts&amp;quot; that make it up - days, seconds and microseconds:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; td.days, td.seconds, td.microseconds
(6, 20700, 0)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;In Python 3, you can divide one timedelta by another, which lets you do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; td / timedelta (days=1)
&lt;/pre&gt;
&lt;p&gt;but not in Python 2.&lt;/p&gt;
&lt;p&gt;However, &lt;cite&gt;timedelta&lt;/cite&gt; has a method &lt;cite&gt;totalseconds&lt;/cite&gt;, which returns the whole delta expressed as decimal seconds:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; td.total_seconds()
539100.0
&amp;gt; timedelta (days=1, microseconds=20).total_seconds()
86400.00002
&lt;/pre&gt;
&lt;p&gt;Which lets us take the above solution and do this to work out the fractional days:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; td.total_seconds() / timedelta (days=1).total_seconds()
6.239583333333333
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="unresolved-issues"&gt;
&lt;h2&gt;Unresolved issues&lt;/h2&gt;
&lt;p&gt;If you to express a time difference as microseconds, minutes, hours etc. you're going to have to do some more math.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="datetime"></category><category term="conversion"></category></entry><entry><title>Using RMarkdown documents in Pelican</title><link href="http://www.agapow.net/programming/web-development/pelican/using-rmd/" rel="alternate"></link><published>2015-05-12T00:00:00+01:00</published><updated>2015-05-12T00:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2015-05-12:/programming/web-development/pelican/using-rmd/</id><summary type="html">&lt;p&gt;One of the big sells of Pelican is being able to use multiple markdup formats, being able to drop in notebooks and documents written in other contexts. One such format is RMarkdown (&lt;tt class="docutils literal"&gt;.rmd&lt;/tt&gt;) documents, such as are used in knitr for reproducible analyses, allowing you to do an analysis and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the big sells of Pelican is being able to use multiple markdup formats, being able to drop in notebooks and documents written in other contexts. One such format is RMarkdown (&lt;tt class="docutils literal"&gt;.rmd&lt;/tt&gt;) documents, such as are used in knitr for reproducible analyses, allowing you to do an analysis and then just render it directly on your website.&lt;/p&gt;
&lt;p&gt;However, a number of things can go wrong along the way and Pelican's error messages aren't very helpful. Here's what I had to do to get it working.&lt;/p&gt;
&lt;div class="section" id="install-the-reader"&gt;
&lt;h2&gt;Install the reader&lt;/h2&gt;
&lt;p&gt;An obvious error, but you have to install the &lt;tt class="docutils literal"&gt;rmd_reader&lt;/tt&gt; to allow RMarkdown documents to be converted. If it isn't installed or Pelican can't find it, you'll get an odd error like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ERROR: Could not process programming/foo.Rmd
&lt;/pre&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'Pelican does not know how to parse %s', '/content/programming/foo.Rmd'
&lt;/pre&gt;
&lt;p&gt;Edit your &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PLUGINS = [
   'foo',
   'rmd_reader',
   'bar',
]
&lt;/pre&gt;
&lt;p&gt;Adding the fortmat to the markup directive may also be necessary:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
MARKUP = ('md', 'ipynb', 'rmd')
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="problems-with-r"&gt;
&lt;h2&gt;Problems with R&lt;/h2&gt;
&lt;p&gt;The reader calls R to convert Rmarkdown to plain markdown. But just because RStudio understands RMarkdown doesn't mean that your native R can. Find out which R you are calling and install the knitr and Rmarkdown packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
r&amp;gt; install.packages ('knitr')
r&amp;gt; install.packages ('rmarkdown')
&lt;/pre&gt;
&lt;p&gt;Let me guess - R is bugging you about choosing a repository? Just because you've selected one in RStudio doesn't mean that R (under the hood) knows about it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--- Please select a CRAN mirror for use in this session ---
&lt;/pre&gt;
&lt;p&gt;And there seems be an odd error that sometimes causes this choice to hang. So you can define it in the install call:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
install.packages ('knitr', repos='http://cran.us.r-project.org')
&lt;/pre&gt;
&lt;p&gt;Longer term, put this in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.Rprofile&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
## Default repo
local({r &amp;lt;- getOption(&amp;quot;repos&amp;quot;)
   r[&amp;quot;CRAN&amp;quot;] &amp;lt;- &amp;quot;http://cran.r-project.org&amp;quot;
   options(repos=r)
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="problems-with-python"&gt;
&lt;h2&gt;Problems with Python&lt;/h2&gt;
&lt;p&gt;At this point, you might have Pelican complaining that it can't find metadata (specifically, the title) in the document. How &lt;tt class="docutils literal"&gt;rmd_reader&lt;/tt&gt; works is that it uses R to convert RMarkdown to Markdown and then uses Python to convert that to HTML. However, more recent version of RMarkdown use a YAML block to detail metadata:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
---
title: &amp;quot;Hadley’s vocabulary: part 1 - the basics&amp;quot;
output: html_document
---
&lt;/pre&gt;
&lt;p&gt;and older versions of the Python Markdown library don't understand this, giving complaints like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ERROR: Skipping programming/r/vocabulary.Rmd: could not find information about 'title'
&lt;/pre&gt;
&lt;p&gt;You can test the version of your Python library in Python:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python&amp;gt; import markdown
python&amp;gt; markdown.version
&lt;/pre&gt;
&lt;p&gt;Versions 2.5+ seem to work fine. If you have something older, update it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% pip install --upgrade markdown
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="various-other-issues"&gt;
&lt;h2&gt;Various other issues&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;While messing around with various inputs and configurations, Pelican's caching (and the dates of modification) can get in the way, preventing you from seeing changes. It might help to &lt;tt class="docutils literal"&gt;touch&lt;/tt&gt; the appropriate files and clear the cache (&lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; cache&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;The formatting of the metadata block in RMarkdown may be a little strict. It seems that it must bve the very first thing in the file and no blank lines are permitted.&lt;/li&gt;
&lt;li&gt;Charmingly, the markdown parser in the Atom editor, insists on &amp;quot;correcting&amp;quot; the metadata blocks into a title.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="web-development"></category><category term="r"></category><category term="markdown"></category></entry><entry><title>Logging PHP errors</title><link href="http://www.agapow.net/programming/web-development/logging-php-errors/" rel="alternate"></link><published>2015-05-01T00:00:00+01:00</published><updated>2015-05-01T00:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2015-05-01:/programming/web-development/logging-php-errors/</id><summary type="html">&lt;div class="section" id="the-scenario"&gt;
&lt;h2&gt;The scenario&lt;/h2&gt;
&lt;p&gt;I try to avoid PHP as much as possible (just not my thing) but I'd installed a PHP-based webapp (&lt;a class="reference external" href="http://redcap.vanderbilt.edu/"&gt;REDCap&lt;/a&gt;) and there was something occuring that seemed like it should have generated an error. However I could not find any PHP errors logged anywhere on the machine. So …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-scenario"&gt;
&lt;h2&gt;The scenario&lt;/h2&gt;
&lt;p&gt;I try to avoid PHP as much as possible (just not my thing) but I'd installed a PHP-based webapp (&lt;a class="reference external" href="http://redcap.vanderbilt.edu/"&gt;REDCap&lt;/a&gt;) and there was something occuring that seemed like it should have generated an error. However I could not find any PHP errors logged anywhere on the machine. So, in order to track down a &lt;em&gt;possible&lt;/em&gt; error, I had to ensure PHP was logging errors at all, then test it with an actual error.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;You may need to use &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; for some parts of this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="php-configuration"&gt;
&lt;h2&gt;PHP configuration&lt;/h2&gt;
&lt;p&gt;There's a lot of confusing advice out there regarding this issue, much is which is right and some of which is incomplete (especially regarding the issue of permissions). Here's what I found to be relevant:&lt;/p&gt;
&lt;p&gt;First, make sure that PHP is actually configured to log errors. In &lt;tt class="docutils literal"&gt;php.ini&lt;/tt&gt; (which is usually in &lt;tt class="docutils literal"&gt;/etc&lt;/tt&gt;), make sure that &lt;tt class="docutils literal"&gt;log_errors = On&lt;/tt&gt;.  There is a setting to &amp;quot;display&amp;quot; errors, but that shows errors on the webpage. Don't switch that on. It may also be worthwhile seeing what level of error PHP is logging, although the default value is sensible.&lt;/p&gt;
&lt;p&gt;(There is another suggestion that may be worthwhile: Set &lt;tt class="docutils literal"&gt;log_errors_max_len = 0&lt;/tt&gt;. I'm not sure if it's critical but it was in my &amp;quot;working&amp;quot; group of settings.)&lt;/p&gt;
&lt;p&gt;Next, set &lt;tt class="docutils literal"&gt;error_log&lt;/tt&gt; to the full path of where you want the log to appear. People often recommend that you put it in with the apache / httpd errors, but you could run into permission issues. (See below.) Just use &lt;tt class="docutils literal"&gt;/var/log/&lt;/tt&gt; and you should be fine.&lt;/p&gt;
&lt;p&gt;The file has to be writable by the webserver process, so find out what that is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ps aux | egrep '(apache|httpd)'
&lt;/pre&gt;
&lt;p&gt;Then create the file and give it the correct owner:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% touch /var/log/php_error.log
% chown apache /var/log/php_error.log
&lt;/pre&gt;
&lt;p&gt;Now restart the webserver:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% service httpd restart
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="generate-an-error"&gt;
&lt;h2&gt;Generate an error&lt;/h2&gt;
&lt;p&gt;To test that everything is working, create a webpage in a useful location:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vi /var/www/html/error.php
&lt;/pre&gt;
&lt;p&gt;and give it contents like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?php
$denominator = 0;
echo 2/ $denominator;
?&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Load that webpage and you should get something in the error log like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[22-Apr-2015 14:21:59 UTC] PHP Warning:  Division by zero in /var/www/html/error.php on line 5
[22-Apr-2015 14:22:23 UTC] PHP Parse error:  syntax error, unexpected T_VARIABLE in /var/www/html/error.php on line 5
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="postscript"&gt;
&lt;h2&gt;Postscript&lt;/h2&gt;
&lt;p&gt;The &amp;quot;error&amp;quot; turned out to be in a user's botched analysis of the data they'd downloaded from the webapp. The app was running fine. Moral: check everything.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="web-development"></category><category term="php"></category></entry><entry><title>Porting this site to Pelican</title><link href="http://www.agapow.net/programming/web-development/pelican/porting-to-pelican/" rel="alternate"></link><published>2015-04-29T00:00:00+01:00</published><updated>2015-04-29T00:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2015-04-29:/programming/web-development/pelican/porting-to-pelican/</id><summary type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Way, way back, this site ran on various permutations of &lt;a class="reference external" href="https://www.phpnuke.org/"&gt;PHP-based frameworks&lt;/a&gt;. Getting sick of ugly URLs and having to vigilantly update the software so as to avoid hacks (and still periodically falling victim to various hacks), I went in search of a Python-based framework that I could customize …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Way, way back, this site ran on various permutations of &lt;a class="reference external" href="https://www.phpnuke.org/"&gt;PHP-based frameworks&lt;/a&gt;. Getting sick of ugly URLs and having to vigilantly update the software so as to avoid hacks (and still periodically falling victim to various hacks), I went in search of a Python-based framework that I could customize, which had a more humane interface and organisation.&lt;/p&gt;
&lt;p&gt;So I settled on &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt;, and there the site lived for 6-7 years. It allowed me to write articles in restructured text, arrange pages into a nice hierarchy, rendered sensible looking URLs, came with a growing set of plugins, had frameworks for customising page appearance and behaviour. On the downside, performance was sluggish and consumed much cpu / memory  / disk space, the Plone stack kept developing in &lt;a class="reference external" href="/programming/tools/lifestyle-tools"&gt;more and more arcane ways&lt;/a&gt;, theming support was dismal and my webhost could best be described as benignly negligent &lt;a class="citation-reference" href="#grokthis" id="id1"&gt;[grokthis]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I turned to the darkside: &lt;a class="reference external" href="https://WordPress.com/"&gt;WordPress&lt;/a&gt;. And the experience was nice. There were plugins for almost anything you wanted. You had the choice of many attractive themes. The WP software stack was reliable, performed well and was easy to install. But now I was being bothered by minor things. I hated having to compose through a web-interface, wanting to write things on my laptop wherever I was. Translating documents I'd written in other ways (e.g. plain text, Word) was painful. While the stack of pages imported from Plone was problematic (as the result of both Plone's and WordPress's joint oddities), a special irritation was documents that changed regularly. Roll out a new version of a software package? Go to the WordPress interface, edit the webpage, edit the online manual, delete the old downloads, add the new uploads ... All this futzing around with documents also made me very conscious that the site contents weren't under version control. Finally there was also the constant need to update WordPress and its plugins &lt;a class="citation-reference" href="#wp" id="id2"&gt;[wp]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then I stumbled across the new generation of static website generators and an idea started to take hold. Buoyed by the cheap price and easy availability of Amazon Web Services, I took the leap. And this is how I set the current website up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-pelican"&gt;
&lt;h2&gt;Why Pelican?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/getpelican"&gt;Pelican&lt;/a&gt; is a static website generator. So why use one of those?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The contents of my website can be kept on a hard disk.&lt;/li&gt;
&lt;li&gt;These contents can be committed and preserved in a Github repo.&lt;/li&gt;
&lt;li&gt;The website can be edited and tested offline before uploading it.&lt;/li&gt;
&lt;li&gt;Documents and files elsewhere on the hard disk can be symbolically linked into the site content, rather than just copied.&lt;/li&gt;
&lt;li&gt;Posts can be written in ReST (&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;restructured text&lt;/a&gt;) or other plain formats.&lt;/li&gt;
&lt;li&gt;The site generation is under under my control and I can hack at it as desired.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a class="reference external" href="http://staticsitegenerators.net/"&gt;many static website generators&lt;/a&gt;. So why Pelican?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's written in Python, my favoured language.&lt;/li&gt;
&lt;li&gt;Restructured text is it's primary format and I like and use ReST heavily.&lt;/li&gt;
&lt;li&gt;It seems to be the major player in Python-based site generators, with active development and a large community.&lt;/li&gt;
&lt;li&gt;The page templating language (&lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;) is a sane and widely-used one.&lt;/li&gt;
&lt;li&gt;There's a &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;solid selection of themes&lt;/a&gt;, essential for those of us with no artistic talent.&lt;/li&gt;
&lt;li&gt;Ditto for &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The framework &lt;em&gt;seemed&lt;/em&gt; sane, approachable and ripe for customization.&lt;/li&gt;
&lt;li&gt;It &lt;em&gt;seemed&lt;/em&gt; like it can render a non-bloggish site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&amp;quot;Seemed&amp;quot; is not me being sarcastic. Lots of frameworks seem simple until used in anger.)&lt;/p&gt;
&lt;p&gt;The main failure points / turn-offs for any alternatives were:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implementation language&lt;/li&gt;
&lt;li&gt;Lack of themes&lt;/li&gt;
&lt;li&gt;Apparent inflexibility&lt;/li&gt;
&lt;li&gt;Small user community&lt;/li&gt;
&lt;li&gt;Incapable of rendering anything but a blog.&lt;/li&gt;
&lt;li&gt;Blogs or reports of people using them until they &amp;quot;discovered Pelican&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="escaping-wordpress"&gt;
&lt;h2&gt;Escaping WordPress&lt;/h2&gt;
&lt;p&gt;First the content had to be extracted from WordPress. The first step is simple, as WP can dump an XML file of your sites content.&lt;/p&gt;
&lt;p&gt;Now this has to be translated into ReST. Fortunately, Pelican has a &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/importer.html"&gt;tool&lt;/a&gt; for this. Unfortunately, it doesn't work as well as it should.  There were a lot of niggling little problems in the produced ReST:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Widespread use of backslash-escaped characters, in plain and literal text.&lt;/li&gt;
&lt;li&gt;Malformed lists (appearing as &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-listitem&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Wrapping and indentation removed from literal and code blocks (devastating for formatted Python code)&lt;/li&gt;
&lt;li&gt;Chunks of raw html. (There is an option in the importer to just skip all of these. It might be wise to use this by default as none of the output HTML actually had any content.)&lt;/li&gt;
&lt;li&gt;Unicode entities (e.g. &lt;tt class="docutils literal"&gt;&amp;amp;amp;&lt;/tt&gt;) left in the output rather than being converted to the correct unicode characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these are tricky things to catch. Some of it might be due to my heavy use of codeblocks and literal text. Some of this might be due to historical content imported from Plone. And WordPress' HTML can be a little pathological.&lt;/p&gt;
&lt;p&gt;The end result was that most pages would not render 'out of the box' and every page had to be checked. I used a lot of regular expressions and search-and-replace to clean the pages up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-pelican"&gt;
&lt;h2&gt;Configuring Pelican&lt;/h2&gt;
&lt;p&gt;Broadly, configuring and setting up Pelican is straightforward. You call &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt;, dump your restructured text (or markdown) files in the &lt;tt class="docutils literal"&gt;content&lt;/tt&gt; directory and run &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;. The out-of-the-box behaviour is nice and sensible, but should you want anything more, you're going to have to write a little code.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Pelican wants to turn your site into a blog:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Almost every other static website generator has this tendency baked-in, despite protests that &amp;quot;you can configure X to do anything you want&amp;quot;. (Much like a blob of molten pig iron can be turned into &lt;em&gt;anything&lt;/em&gt;.) Pelican is arguably more flexible than most, but still has blog-like tendencies, wanting to arrange everything by date and categories and tags. The distinction is made between &lt;tt class="docutils literal"&gt;articles&lt;/tt&gt;  (timed / blog entry-like content) and &lt;tt class="docutils literal"&gt;pages&lt;/tt&gt; (static, fixed content) but pages are definitely second-class citizens in the Pelican ecosystem. For example, they're not included in the tag or category lists, so they're less findable.&lt;/p&gt;
&lt;p&gt;I'm also used to my sites being navigated in a hierarchy (e.g. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/science/computational-biology/galaxy&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/programming/web-development&lt;/span&gt;&lt;/tt&gt;). It's very handy to give the url of a folder to someone and say &amp;quot;everything about X is listed there&amp;quot;. And it's a useful piece of organisation for me - the articles I've written on X can be found &lt;em&gt;here&lt;/em&gt;. Pelican only allows a single level of categories. I could make everything a category but that would lead to an explosion of categories. A combination of catgories and tags might do the job but I wanted things to rest in a sensible url structure, rather than all gathered in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/archive``or&lt;/span&gt; &lt;span class="pre"&gt;``/articles&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;After much prevarication, I decided to hack a solution in. There's a &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/subcategory"&gt;subcategory plugin&lt;/a&gt; available for Pelican that allows nested categories. Unfortunately, it requires that you explicitly annotate each article with its full subcategory. Drats. So I forked the github repo and hacked it so that it used the content path to infer the subcategory. Adjusting the pelican configuration file, I ended up with this scheme:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# used by the subcategory hack
PATH_METADATA= '(?P&amp;lt;path_no_ext&amp;gt;.*)\..*'

CATEGORY_URL = '{slug}/'
CATEGORY_SAVE_AS = join (CATEGORY_URL, 'index.html')

TAG_URL = '/by-tag/{slug}/'
TAG_SAVE_AS = join (TAG_URL, 'index.html')

ARTICLE_URL= join (CATEGORY_PREFIX, '{path_no_ext}/')
ARTICLE_SAVE_AS= join (ARTICLE_URL, 'index.html')

PAGE_URL = '{slug}/'
PAGE_SAVE_AS = join (PAGE_URL, 'index.html')

SUBCATEGORY_URL = '{savepath}/'
SUBCATEGORY_SAVE_AS = join (SUBCATEGORY_URL, 'index.html')
&lt;/pre&gt;
&lt;p class="last"&gt;which meant that the if the article &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt; was placed in &lt;tt class="docutils literal"&gt;content/science/geospatial&lt;/tt&gt;, it was given the subcategory of &lt;tt class="docutils literal"&gt;science/geospatial&lt;/tt&gt;, rendered as &lt;tt class="docutils literal"&gt;/science/geospatial/foo/index.html&lt;/tt&gt;, and referred to with the clean url of &lt;tt class="docutils literal"&gt;/science/geospatial/foo/&lt;/tt&gt;. Clean meaningful urls, meaningful organisation, articles sit under their categories, a bit of time-saving for me.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;No such thing as a single-author site:&lt;/dt&gt;
&lt;dd&gt;No matter what I did, no matter what values I gave to &lt;tt class="docutils literal"&gt;AUTHOR_URL&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;AUTHOR_SAVE_AS&lt;/tt&gt;, Pelican would always generate an authors page.&lt;/dd&gt;
&lt;dt&gt;Each theme is different:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;There's a lot of nice and attractive themes available for Pelican. However, each works in a different way. If several themes have (say) a sharing toolbar or take a site subtitle or breadcrumb navigation or analytics capacity, they will each use different named variables and require different configuration. If a plugin introduces new site features, themes might not display theme or work with theme.&lt;/p&gt;
&lt;p class="last"&gt;So you're going to have to start hacking at the theme until it does what you want. Fortunately, this is not onerous.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;File urls:&lt;/dt&gt;
&lt;dd&gt;I've found the syntax for linking to other assets within the slightly opaque - it seems simple such that the minimal examples given in the documentation appear to be self-explanatory. But it took a while to work out.&lt;/dd&gt;
&lt;dt&gt;Commenting:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;One of the features that appears in some but all themes is commenting. It's fairly easy to signup at Disqus, getting the requisite HTML and Javascript fragments to inject into your template for rendering a comment system. I had some minor trouble because various ad-blockers or tracker-blockers stopped the Disqus forms from showing on the site. After they were disabled, it was fine.&lt;/p&gt;
&lt;p class="last"&gt;A live twitter feed can be inserted in a similar way.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Duplicate target name:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Not the fault of Pelican but I got a lot of these errors - &lt;tt class="docutils literal"&gt;Duplicate explicit target name: &amp;quot;foo&amp;quot;`&lt;/tt&gt;,  &lt;tt class="docutils literal"&gt;Duplicate target name&lt;/tt&gt; - seemingly triggered by hyperlinks that weren't duplicated. The trick seems to be that all links of all types (hyperlinks, citations, footnotes, etc.) within a single ReST document share the same &amp;quot;space&amp;quot;. So links with the same text or name will collide:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
`Foo &amp;lt;http://xxx.example.org&amp;gt;`_
`Foo &amp;lt;http://yyy.example.com&amp;gt;`_
&lt;/pre&gt;
&lt;p&gt;I had footnotes and citations colliding with the urls within those footnotes. One solution is to make the links anonymous:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
`Foo &amp;lt;http://xxx.example.org&amp;gt;`__
`Foo &amp;lt;http://yyy.example.com&amp;gt;`__
&lt;/pre&gt;
&lt;p class="last"&gt;See &lt;a class="reference external" href="http://stackoverflow.com/questions/5464627/how-to-have-same-text-in-two-links-with-restructured-text"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Bad names:&lt;/dt&gt;
&lt;dd&gt;It's really difficult to have tags or categories like &lt;tt class="docutils literal"&gt;c++&lt;/tt&gt;. The resultant urls you get are ugly. This is an admittedly hard problem, but it would be nice to separate the &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;slug&lt;/em&gt; for tags and categories.&lt;/dd&gt;
&lt;dt&gt;Category indexes:&lt;/dt&gt;
&lt;dd&gt;It would be really nice to customize index pages for categories. There is a &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/category_meta"&gt;plugin that purports to handle this&lt;/a&gt; but it seems to have problems with my url layout and use of subcategory.&lt;/dd&gt;
&lt;dt&gt;Writing tools:&lt;/dt&gt;
&lt;dd&gt;Note a Pelican issue as such, but I really wish there were better tools for writing ReST. Many editors provide an appropriate mode but it's often just a syntax colouring. It would be great to have an editor with hotkeys (e.g. type cmd-b to bold this text), spelling and grammar checkers that picks up malformed text. Textmate has decent hotkeys, PyCharm has spellchecking (that is awkward to use) and many editors pick up some errors. Can we get these all together?&lt;/dd&gt;
&lt;dt&gt;Caching:&lt;/dt&gt;
&lt;dd&gt;Occasionally when I was hacking on the site, changes didn't seem to appear, especially if I was using &lt;tt class="docutils literal"&gt;make devserver&lt;/tt&gt; (which compiles the site and recompiles it when changes are detected),  This puzzled me for a while until I realised that Pelican caches generated pages and only recompiles them if it sees changes in the site content, theme or settings. Plugins are outside that loop. So flush the cache directory and all will be fine.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="verdict"&gt;
&lt;h2&gt;Verdict&lt;/h2&gt;
&lt;p&gt;Having complained at length about Pelican's shortcomings, let me reassure you that I'm very happy with it. Yes, it's fairly opinionated about site layout but after you've accepted or hacked on that, the layout is consistent and works well. Several times I thought &amp;quot;surely this change must break Pelican&amp;quot; but the site would work. I like writing in ReST and it's easy to produce material for the site. Files that I've generated elsewhere can easily be linked into the site structure. I don't have to maintain a complex software stack, it's just a collection of HTML pages. It's easy to hack upon. Most of all, it's a tool that lets me do what I want to do and gets out of the way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;Some other Pelican porting experiences:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/"&gt;http://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.alexjf.net/blog/site/website-ported-to-pelican/"&gt;http://www.alexjf.net/blog/site/website-ported-to-pelican/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hselab.org/drupal-to-pelican.html"&gt;http://hselab.org/drupal-to-pelican.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.macdrifter.com/2012/08/pelican-guide-moving-from-wordpress-and-initial-setup.html"&gt;http://www.macdrifter.com/2012/08/pelican-guide-moving-from-wordpress-and-initial-setup.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://heldercorreia.com/blog/from-wordpress-to-pelican"&gt;http://heldercorreia.com/blog/from-wordpress-to-pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils citation" frame="void" id="grokthis" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[grokthis]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The late &lt;a class="reference external" href="http://grokthis.net"&gt;Grokthis&lt;/a&gt;. To their credit, they offered cheap Plone hosting at a time when any Plone hosting was rare. Unfortunately, service faults cropped up a few times a year and the fastest way to get technical support was to post a complaint to a webhosting forum.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="wp" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[wp]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I also set-up my local neighbourhood association with WordPress and would still recommend it for a lot of use cases, especially blogs or timely content. A hosted solution, like the free WordPress.com blogs is best (which relieves you of the software updating and security responsibilities) but self-installation and hosting is fairly painless. A big shoutout to my webhost of the time, &lt;a class="reference external" href="http://www.linode.com"&gt;Linode&lt;/a&gt;. They offer a solid and well-priced service.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="web-development"></category><category term="programming"></category><category term="wordpress"></category><category term="plone"></category><category term="restructured-text"></category><category term="pelican"></category></entry><entry><title>Lifestyle tools</title><link href="http://www.agapow.net/programming/tools/lifestyle-tools/" rel="alternate"></link><published>2015-03-27T00:00:00+00:00</published><updated>2015-03-27T00:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2015-03-27:/programming/tools/lifestyle-tools/</id><summary type="html">&lt;blockquote class="epigraph"&gt;
&lt;p&gt;I'll stick with LaTeX, thank you very much. Which is poking yourself in the eye with a tool perfectly designed for eye-poking after you get the configuration right, but the tool can't be held by human hands so you also need a pneumatic dingus to poke the poker and a …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote class="epigraph"&gt;
&lt;p&gt;I'll stick with LaTeX, thank you very much. Which is poking yourself in the eye with a tool perfectly designed for eye-poking after you get the configuration right, but the tool can't be held by human hands so you also need a pneumatic dingus to poke the poker and a robot arm to hold the poker+dingus combination. But man, your eye is really beautifully poked.&lt;/p&gt;
&lt;p&gt;(commenter on Metafilter)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've wasted too much time over the years on software, libraries and systems that promised a lot but ended up consuming huge amounts of my time. After the first few times, I started to develop a wary eye for software that demanded I do nothing but tend to it, and tools that you couldn't just adopt and solve a problem with, but that seemed to take all your available time just to get your job done. This is especially problematic when you're a lone developer, in a small team or (like me) use software simply as a means to an end.&lt;/p&gt;
&lt;p&gt;So here's some hard-won ideas about these &amp;quot;lifestyle&amp;quot; tools.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I've put this piece in the 'programming' category, but it has a much
wider occurence, from web development to data science and bioinformatics.
Anywhere where there are tough problems, geeks and a lot of activity, you
can expect lifestyle tools to pop up, promising to solve all your problems
at the expense of all your time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ways-to-recognise-lifestyle-tools"&gt;
&lt;h2&gt;Ways to recognise lifestyle tools&lt;/h2&gt;
&lt;div class="section" id="the-software"&gt;
&lt;h3&gt;The software&lt;/h3&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;It hardly seems worth even having a bug system if the frequency of from-scratch rewrites always outstrips the pace of bug fixing ... But that's what happens when there is no incentive for people to do the parts of programming that aren't fun. Fixing bugs isn't fun.&lt;/p&gt;
&lt;p&gt;(Jamie Zawinski)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;NIH (not invented here):&lt;/strong&gt; It reinvents the wheel by providing its own idiosyncratic solutions to problems that have been repeatedly solved elsewhere, i.e. its own build solution, templating language, logging or database interface.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functionality is an ever-moving target:&lt;/strong&gt; You can never get things to &amp;quot;just work&amp;quot;. There's a niggling bug in the UI, the database connection only works with the version you got out of the repo, you had to write a birdnest of code to patch it but &amp;quot;it will be easier in the next version&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pervasive and ongoing incompatibility without and within:&lt;/strong&gt; &amp;quot;Oh yeah, that plugin doesn't work with version X. Get the new version from the repo / recompile all your tools and libraries / it'll be fixed in the next version ...&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Has over-engineered tools to solve problems that shouldn't exist:&lt;/strong&gt; i.e. build tools to manage build tools, complex caching to solve inherent performance issues,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ornate configuration files and schema:&lt;/strong&gt; And they're almost always in XML.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logging:&lt;/strong&gt; for some reason, lifestyle tools show an obsession with logging, perhaps because the only way you'll work out what's going wrong is by crawling through a gigabyte of function calls. It may also be connected with their abysmal error-handling.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bug reports go unfixed&lt;/strong&gt;: Possibly because no one can reproduce your error and/or the setup is so complex anything could be happening.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature churn:&lt;/strong&gt; that horribly complex and poorly documented class definition system? We're not bothering to fix it because the Brand New Hotness is in the repo and it's nearly ready for use but undocumented and it would be too hard to fix the old one ... (See Jamie Zawinski's CADT model.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System complexity increases monotonically with time:&lt;/strong&gt; Things never get better and simpler, because you're patching over fundamentally rotten foundations that few understand and developers can't stop themselves from adding another layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-documentation"&gt;
&lt;h3&gt;The documentation&lt;/h3&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;That's one sure tip-off to the fact that you're being assaulted by an Architecture Astronaut: the incredible amount of bombast; the heroic, utopian grandiloquence; the boastfulness; the complete lack of reality. And people buy it! The business press goes wild! The hallmark of an architecture astronaut is that they don't solve an actual problem... they solve something that appears to be the template of a lot of problems. Or at least, they try.&lt;/p&gt;
&lt;p&gt;(Joel Spolsky)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Is patchy:&lt;/strong&gt; No one really understands it well enough, the task of documenting the whole system is too great and anyway, who has time after rewriting your configuration files for the second time this week.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Requests for clarification are answered with &amp;quot;Read the source&amp;quot;:&lt;/strong&gt; Because when I want to know how my microwave works, the best way is to dismantle it and read the engineering schematics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The documentation has no clear entry-point:&lt;/strong&gt; The complexity and interconnectivity of the product prevents any reasonable mile-high view. To do anything you have to know everything.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;quot;You don't do it that way any more.&amp;quot;:&lt;/strong&gt; The effort of documenting system features - and the churn of features - means that documentation is polluted by references to old and outdated features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-community"&gt;
&lt;h3&gt;The community&lt;/h3&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;The community is  massive ECHO chamber, where nothing gets out, seriously no one cares. Even worse, nothing gets in, we are on a desert island, isolated, alone at sea.&lt;/p&gt;
&lt;p&gt;(Stevan Little)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Is large and (overly) active:&lt;/strong&gt; Forums churn constantly with queries, because everyone has questions, the answers are not easy and it's often not clear what the correct answer is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflexively and globally rejects any criticism:&lt;/strong&gt; Raise even the smallest complaint about (say) arcane terminology, software instability or poor documentation and you can expect the pack to start baying. &amp;quot;What are you saying? There's nothing wrong with that! Why my grandmother managed to set up a server! With no instructions! In 10 minutes!&amp;quot; This may be something to do with human psychology and sunk costs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanations are rife with jargon:&lt;/strong&gt; &amp;quot;Override your XAML template interface with a monkey-patched factory-factory product, adding a new schema supermodel.&amp;quot; This goes double if the new terms duplicate already existing ones, or use existing ones but in a different way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You have nothing better to do:&lt;/strong&gt; Users are expected to spend all day keeping up-to-date, knowing instantly about changes and new releases, reading all the mailing lists. Heaven forbid that you actually spend time doing something with the software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hyperbole and dismissal:&lt;/strong&gt; Adherents will claim that the software is good for every situation and/or that if you can't get it to work &amp;quot;It's clearly not for you / It works here, it must be your problem&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;100% of analysts sitting at my desk use ...:&lt;/strong&gt; The community clings to surveys and reports that cast the software in a good light. &lt;em&gt;X had fewer security alerts last year than PHP!&lt;/em&gt; Yes, and it also had 1% of the users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You suck!:&lt;/strong&gt; A popular feature of the community are conference talks and blog posts that &amp;quot;demolish myths&amp;quot;, by claiming that the problems don't exist, you're doing it wrong, how their product is secretly the innovative edge in it's domain that's inspiring all others, that if you're not prepared to help develop the product then GTFO, etc. etc. Adherents might also answer criticism by disingeniously wondering 'why are there are these haters' or arguing that complexity and unreliability are actually good things.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A closed system:&lt;/strong&gt; Despite its (focused) expertise, the community is hermetic. You never meet anyone who is an enthusiast or expert in a lifestyle tool and something else. They will claim that no other system allows metaprogramming / is a more flexible CMS / has such unprecedented visualisation capabilities. Maybe this is because of their lack of knowledge, maybe they're just repeating talking points that have bounced around the community echo chamber without the benefit of verification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do more:&lt;/strong&gt; The answer to any question is always to double-down: invest more time. Invest more effort. Use this new tool straight out of repo. Sift through the source. Then your code will work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="where-do-lifestyle-tools-come-from"&gt;
&lt;h2&gt;Where do lifestyle tools come from?&lt;/h2&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;X Windows Is &amp;quot;customizable&amp;quot; ... And so is a molten blob of pig iron.&lt;/p&gt;
&lt;p&gt;(Don Hopkins)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's a good question. No one sets out to design one of these ugly, ungainly creatures, yet they keep cropping up.&lt;/p&gt;
&lt;p&gt;One theory is that great developers (or developers that want to be seen as great or poor developers that want to mask their incompetence) wish to visibly demonstrate their &amp;quot;talent&amp;quot;, so they develop mind-bendingly complex things that may not actually do the necessary job but are &amp;quot;so cool!&amp;quot;&lt;/p&gt;
&lt;p&gt;Alternatively, I think that many examples share a common origin: at some point, they they were a decent solution to a particular problem when there were few alternatives. Their feature set was much smaller and they worked well enough. As time passed and they accumulated users and features, fundamental architecture changes become difficult. Small problems ossified into larger issues. Old hands in the community instinctively understand how everything works, even if that explanation is unbelievably complex. New hands spend so much time trying to get up to speed, they lose sight of what's happening outside the community. Eventually, everyone has invested so much time and effort in the system, that the idea of using something else (&amp;quot;throwing all that effort away&amp;quot;) becomes anathema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-happens-to-them"&gt;
&lt;h2&gt;What happens to them?&lt;/h2&gt;
&lt;p&gt;On the upside, it seems to me that all lifestyle tools eventually perish. The size of and activity in the community will become unmanageable. Innovation grinds to a halt as few if any people understand what is going on. Someone will develop a simpler alternative. Projects based on the old tool will crash and burn - or simply fail to complete - while those based on alternatives will complete, the developers going on finish other projects.  People begin to talk up the alternatives and slowly the old dogma dies down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-you-do"&gt;
&lt;h2&gt;What do you do?&lt;/h2&gt;
&lt;p&gt;I suggest there is one key question to ask, to see if you're getting sucked into using a lifestyle tool:&lt;/p&gt;
&lt;blockquote&gt;
Do you spend more time maintaining, learning about, debugging and managing the tool than doing anything with the problem domain you're supposed to be using the tool on?&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="candidates"&gt;
&lt;h2&gt;Candidates&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Maven: holy crap, it's just a build tool.&lt;/li&gt;
&lt;li&gt;Eclipse: why do you need &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pulse_(ALM)"&gt;a tool to manage and update your IDE?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mozilla: not just a browser but an entire cross-platform toolkit. Just read the instructions for setting-up the Mozilla development on your harddisk.&lt;/li&gt;
&lt;li&gt;C++: Has arguably teetered on the edge of being a lifestyle tool, with features that were standardized before they were actually implemented, the overly verbose and cryptic template system, and puttering about minor syntax corrections. This may have been one of the reasons for the rise of Java ... which in turn has threatened to become a lifestyle tool. Maybe it's the large community that does it to a programming language.&lt;/li&gt;
&lt;li&gt;Java frameworks and ORMs are legendary for their steep learning curve and eccentric behaviours (c.v Hibernate, J2EE, ), with huge amounts of energy being invested into mundane issues like how logging takes place.&lt;/li&gt;
&lt;li&gt;Corba: Remember when Corba was going to solve all of our problems? Can you remember what it actually did or what those problems were?&lt;/li&gt;
&lt;li&gt;Perl 6: it wasn't that many years ago that someone described their Perl-based webtool as &amp;quot;state of the art&amp;quot; and practitioners eagerly devoured the many lengthy missives on Perl's new features. Now the community is literally dying out as adherents age and retire.&lt;/li&gt;
&lt;li&gt;Plone: guilty of most of the crimes above. This article was inspired by me noticing that mailing list activity had been dwindling steady for years, while several prominent community members had quietly slipped away. Seriously, the solution to theming is to invent &lt;a class="reference external" href="http://davidjb.com/blog/2009/09/deliver-me-from-deliverance/"&gt;a filtering proxy that sits in front of your website and rewrites all the HTML?&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="also-see"&gt;
&lt;h2&gt;Also see&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Joel Spolsky on &lt;a class="reference external" href="http://www.joelonsoftware.com/articles/fog0000000018.html"&gt;architecture astronauts&lt;/a&gt; (and &lt;a class="reference external" href="http://www.joelonsoftware.com/items/2008/05/01.html"&gt;again&lt;/a&gt;) and &lt;a class="reference external" href="http://www.joelonsoftware.com/items/2009/09/23.html"&gt;over-engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Richard Gabriel on &lt;a class="reference external" href="http://www.jwz.org/doc/worse-is-better.html"&gt;worse is better&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jamie Zawinski on the &lt;a class="reference external" href="http://www.jwz.org/doc/cadt.html"&gt;Cascade of Attention-Deficit Teenagers model of development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stevan Little on &lt;a class="reference external" href="https://speakerdeck.com/stevan_little/perl-the-detroit-of-scripting-languages"&gt;Perl, the Detroit of programming languages&lt;/a&gt; and &lt;a class="reference external" href="https://speakerdeck.com/stevan_little/perl-is-not-dead-it-is-a-dead-end"&gt;Perl is not dead, it's a dead end&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Don Hopkins on &lt;a class="reference external" href="http://wolmarans.com/wordpress/?p=121"&gt;The X-Windows Disaster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bexhuff.com/2008/06/why-do-so-many-developers-love-bafflingly-complex-code"&gt;Why do so Many Developers Love Bafflingly Complex Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="plone"></category><category term="opinion"></category><category term="rant"></category><category term="bioinformatics"></category><category term="c++"></category><category term="web-development"></category></entry><entry><title>Primitive R objects and S3</title><link href="http://www.agapow.net/programming/r/primitive-r-objects-and-s3/" rel="alternate"></link><published>2013-07-01T15:16:00+01:00</published><updated>2013-07-01T15:16:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2013-07-01:/programming/r/primitive-r-objects-and-s3/</id><summary type="html">&lt;div class="section" id="primordial-r-objects"&gt;
&lt;h2&gt;Primordial R objects&lt;/h2&gt;
&lt;p&gt;The first thing to know is that nearly every object in R is really just
a list with named elements. For example, the results returned from
&amp;quot;summary&amp;quot; are returned in an object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x &amp;lt;- summary(c(1:10))
x
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##    1 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="primordial-r-objects"&gt;
&lt;h2&gt;Primordial R objects&lt;/h2&gt;
&lt;p&gt;The first thing to know is that nearly every object in R is really just
a list with named elements. For example, the results returned from
&amp;quot;summary&amp;quot; are returned in an object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x &amp;lt;- summary(c(1:10))
x
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##    1.00    3.25    5.50    5.50    7.75   10.00

class(x)
## [1] &amp;quot;summaryDefault&amp;quot; &amp;quot;table&amp;quot;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: this is a common idiom used in R - wherever multiple results must
be returned from a function, create a list or array with each result in
a named element, essentially a very lightweight class specialised for
that functions results. Also note that the exact form
of  ``summary()`` called and what is returned depends on the type of
arguments passed. I'll talk more about this later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But if you examine the summary results object, it's actually just a list
with named elements:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
typeof(x)
## [1] &amp;quot;double&amp;quot;
length(x)
## [1] 6
names(x)
## [1] &amp;quot;Min.&amp;quot;    &amp;quot;1st Qu.&amp;quot; &amp;quot;Median&amp;quot;  &amp;quot;Mean&amp;quot;    &amp;quot;3rd Qu.&amp;quot; &amp;quot;Max.&amp;quot;
x[1]
## Min.
##    1
&lt;/pre&gt;
&lt;p&gt;So the summary results type is a list of doubles but it is of the
classes  &lt;tt class="docutils literal"&gt;summaryDefault&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;table&lt;/tt&gt;. This probably seems very odd
to those coming from other programming langauges. R has it's own
peculiar terminology for typing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;type&lt;/strong&gt; describes what sort of primitive type the object is, e.g. a
list, integer, double, a dataframe, and can be calculated
with  &lt;tt class="docutils literal"&gt;typeof()&lt;/tt&gt;. Note that as there no such thing as a scalar - a
standalone, single numeric quantity - in R, vectors will return as
the type of their contents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;mode&lt;/strong&gt; also describes what sort of primitive type or data the
object is, albeit in a slightly more generic way, and can be
calculated with  &lt;tt class="docutils literal"&gt;mode()&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;class&lt;/strong&gt; describes the interface of the object and what sort of
functions it can be used with and how. This ties into R's use of
generic functions and can be calculated with  &lt;tt class="docutils literal"&gt;class()&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
typeof(x)
## [1] &amp;quot;double&amp;quot;
mode(x)
## [1] &amp;quot;numeric&amp;quot;
class(x)
## [1] &amp;quot;summaryDefault&amp;quot; &amp;quot;table&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: There is also,
confusingly,  ``storage.mode()`` and ``oldClass`` for asking similar
but not identical questions. Broadly
speaking,  ``typeof`` and ``class`` are the only ones you will usually
need.  ``str()`` provides most of the above information and can be
handy for dissecting objects to see how they work.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attributes-class"&gt;
&lt;h2&gt;Attributes &amp;amp; class&lt;/h2&gt;
&lt;p&gt;Asides from named elements, R objects can also be equipped with
attributes, data or members that sit outside the list contents.
Attributes can be set and retrieved as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# create and set attribute
attr(x, &amp;quot;foo&amp;quot;) &amp;lt;- 23
# retrieve / get attribute value
attr(x, &amp;quot;foo&amp;quot;)
## [1] 23
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Thus attribute access works like indexing in (say) Python or C++
- the element itself is returned and can be operated directly upon as
value or for assignment. This is another common R idiom: a function
returning a member that can be got or set.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Attributes  &lt;em&gt;cannot&lt;/em&gt; be accessed using the slot or member syntax of
other R OOP schemes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x&amp;#64;class
## Error: trying to get slot &amp;quot;class&amp;quot; from an object (class &amp;quot;summaryDefault&amp;quot;)
## that is not an S4 object
x$class
## Error: $ operator is invalid for atomic vectors
&lt;/pre&gt;
&lt;p&gt;All attributes of an object can be listed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# list all attributes
attributes(x)
## $names
## [1] &amp;quot;Min.&amp;quot;    &amp;quot;1st Qu.&amp;quot; &amp;quot;Median&amp;quot;  &amp;quot;Mean&amp;quot;    &amp;quot;3rd Qu.&amp;quot; &amp;quot;Max.&amp;quot;
##
## $class
## [1] &amp;quot;summaryDefault&amp;quot; &amp;quot;table&amp;quot;
##
## $foo
## [1] 23
&lt;/pre&gt;
&lt;p&gt;This highlights something important: all well-formed R objects should
have a  &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; attribute, which is just another attribute with a
string value giving the classes that the object belongs to.
The  &lt;tt class="docutils literal"&gt;class()&lt;/tt&gt; function is really just a shortcut
for &lt;tt class="docutils literal"&gt;attr (x, &amp;quot;class&amp;quot;)&lt;/tt&gt; and can be sued to retrieve or set an objects
class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class(x)
## [1] &amp;quot;summaryDefault&amp;quot; &amp;quot;table&amp;quot;
class(x) &amp;lt;- &amp;quot;foo&amp;quot;
class(x)
## [1] &amp;quot;foo&amp;quot;
class(x) &amp;lt;- c(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;So, looking at our laundry list of OOP characteristics, named elements
and attributes allow R objects to (arguably) allowing modelling and
modularity. But at this point an R S3 class looks little more than a
dumb container of data, just an annotated list. Is making a class just a
matter of assigning a name to the class attribute? If so, what is that
good for? To which the answers are &amp;quot;yes&amp;quot; and &amp;quot;generic functions&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rolling-your-own-objects-classes"&gt;
&lt;h2&gt;Rolling your own objects &amp;amp; classes&lt;/h2&gt;
&lt;p&gt;This most primitive object system is called &amp;quot;S3&amp;quot;. There are many ways
that you could put a S3 class together and few if any formal mechanisms
for doing so.  &lt;tt class="docutils literal"&gt;structure()&lt;/tt&gt; is useful as it adds ones or more
attributes to an object in one pass:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
y &amp;lt;- structure(c(1:3), class = &amp;quot;foo&amp;quot;)
typeof(y)
## [1] &amp;quot;integer&amp;quot;
class(y)
## [1] &amp;quot;foo&amp;quot;
&lt;/pre&gt;
&lt;p&gt;But this skates around the S3's lack of explicit constructor or
intialiser idioms. However, it would be trivial to hack together
constructor-like functions to make objects of a particular or specific
class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mk_object &amp;lt;- function(x, kls) {
    structure(x, class = kls)
}

y &amp;lt;- mk_object(c(1:3), &amp;quot;bar&amp;quot;)
y
## [1] 1 2 3
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;bar&amp;quot;
mk_foo_object &amp;lt;- function(x) {
    structure(x, class = &amp;quot;foo&amp;quot;)
}
y &amp;lt;- mk_foo_object(c(1:3))
y
## [1] 1 2 3
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;foo&amp;quot;
&lt;/pre&gt;
&lt;p&gt;which could elaborated upon to provide type-checking, data
transformation and other features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generic-functions"&gt;
&lt;h2&gt;Generic functions&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note: &amp;quot;method&amp;quot; tends to be used interchangeably with &amp;quot;function&amp;quot; in this
context within R. But a method in other programming languages usually
refers to a function attached to an object, so I've avoided this.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Where the  &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; attributes are used is in dispatching inside
generic functions. Rather than use methods on an object, S3 uses
functions outside an object that sniff the objects class type and send
it to another function specialised for that object. In summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There exists object  &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; of class  &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;A (generic) function  &lt;tt class="docutils literal"&gt;bar&lt;/tt&gt; is called on this
object:  &lt;tt class="docutils literal"&gt;bar (x)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Internally, all arguments passed to the generic function are
dispatched to a version of the function specialised for the class of
the first argument passed:  &lt;tt class="docutils literal"&gt;bar.foo (x)&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's very easy to write a generic function in R. Simply
call  &lt;tt class="docutils literal"&gt;UseMethod&lt;/tt&gt; with the function name and the object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bar &amp;lt;- function(x) {
    UseMethod(&amp;quot;bar&amp;quot;)
}
&lt;/pre&gt;
&lt;p&gt;and provide specialised versions for the different classes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bar.foo &amp;lt;- function(x) {
    # whatever
}
&lt;/pre&gt;
&lt;p&gt;If an object has multiple classes, R works its way along the class
vector looking for appropriate functions. If no specialised function is
supplied (e.g. &lt;tt class="docutils literal"&gt;bar.foo&lt;/tt&gt; isn't defined), R goes looking for the
default implementation, named as if it has a class  &lt;tt class="docutils literal"&gt;default&lt;/tt&gt;,
e.g.  &lt;tt class="docutils literal"&gt;bar.default&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bar.default &amp;lt;- function(x) {
    # handle all objects
}
&lt;/pre&gt;
&lt;p&gt;This can be used to provided specialised version of pre-existing and
builtin functions. For example,  &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;summary&lt;/tt&gt; are both
generic functions. Specialised versions could be written
for  &lt;tt class="docutils literal"&gt;bar&lt;/tt&gt; called &lt;tt class="docutils literal"&gt;print.bar&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;summary.bar&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;You can find out all the specialisations of a function with the
call  &lt;tt class="docutils literal"&gt;methods()&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# lets just see the first ten ...  invisible specialisations are
# asterisked in the listing
methods(print)[1:10]
##  [1] &amp;quot;print.acf&amp;quot;     &amp;quot;print.AES&amp;quot;     &amp;quot;print.anova&amp;quot;   &amp;quot;print.aov&amp;quot;
##  [5] &amp;quot;print.aovlist&amp;quot; &amp;quot;print.ar&amp;quot;      &amp;quot;print.Arima&amp;quot;   &amp;quot;print.arima0&amp;quot;
##  [9] &amp;quot;print.AsIs&amp;quot;    &amp;quot;print.aspell&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Unlike (say) overridden functions in C++, R's generic functions can only
dispatch based on the class of the first argument.&lt;/p&gt;
&lt;p&gt;Strictly speaking, S3 doesn't handle inheritance. However, there is a
function  &lt;tt class="docutils literal"&gt;NextMethod&lt;/tt&gt; which can be used to hand off execution to the
next entry in the class vector:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class(z) &amp;lt;- c(&amp;quot;baz&amp;quot;, &amp;quot;quux&amp;quot;)
## Error: object 'z' not found
print.baz &amp;lt;- function(x) {
    # i.e. looks for print.quux
    NextMethod()
}
&lt;/pre&gt;
&lt;p&gt;So theoretically this could be used to create subtype polymorphism,
dispatching a function call up a class inheritance chain to be fulfilled
by a derived class or to fall back on basal behaviour. In practice, it's
not clear to me that this is very useful. It relies on your class vector
being arranged from specific to general (i.e. explicitly spelling out
the chain of inheritance). And if this is the case, it just explicitly
defines behaviour that would happen anyway from R's default behaviour.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This illustrates an important point. S3 objects are not instances
of a class, rather class is a property of the object. In fact, most
things that we would normally think of as class properties are actually
object properties in S3. And so individual objects can be freely hacked
and modified.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;S3 is the most primitive - and most widespread - form of OOP in R&lt;/li&gt;
&lt;li&gt;S3 objects are essentially just a list of named elements with some
added attributes, one of which is class&lt;/li&gt;
&lt;li&gt;S3 does not have methods, but instead relies upon external generic
functions that dispatch to more specialised functions depending on
the class of the passed object&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A good introduction to the nitty-gritty of types in
R:  &lt;a class="reference external" href="http://www.nealgroothuis.name/introduction-to-data-types-and-objects-in-r/"&gt;http://www.nealgroothuis.name/introduction-to-data-types-and-objects-in-r/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hadley Wickham on S3:  &lt;a class="reference external" href="https://github.com/hadley/devtools/wiki/S3"&gt;https://github.com/hadley/devtools/wiki/S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.r-bloggers.com/the-s3-oop-system/"&gt;http://www.r-bloggers.com/the-s3-oop-system/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Untangling the &amp;quot;type&amp;quot; systems of R:  &lt;a class="reference external" href="http://stackoverflow.com/questions/8855589/a-comprehensive-survey-of-the-types-of-things-in-r-mode-and-class-and-type"&gt;http://stackoverflow.com/questions/8855589/a-comprehensive-survey-of-the-types-of-things-in-r-mode-and-class-and-type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="OOP"></category><category term="programming"></category><category term="R"></category><category term="S3"></category></entry><entry><title>An introduction to objects in R</title><link href="http://www.agapow.net/programming/r/oop-in-r/" rel="alternate"></link><published>2013-07-01T13:33:00+01:00</published><updated>2013-07-01T13:33:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2013-07-01:/programming/r/oop-in-r/</id><summary type="html">&lt;p&gt;&lt;em&gt;The various types of OOP in R, whatever that is.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Doing object-oriented programming (OOP) in R can be complicated. This is
because when you look in R for the usual idioms and features of OOP:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;some are missing&lt;/li&gt;
&lt;li&gt;some are present but implemented in unusual albeit valid ways&lt;/li&gt;
&lt;li&gt;some …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;The various types of OOP in R, whatever that is.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Doing object-oriented programming (OOP) in R can be complicated. This is
because when you look in R for the usual idioms and features of OOP:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;some are missing&lt;/li&gt;
&lt;li&gt;some are present but implemented in unusual albeit valid ways&lt;/li&gt;
&lt;li&gt;some are present but implemented in strange and hacky ways&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A further source of confusion is the existence of several different
implementations of OOP in R:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;S3: the simplest and crudest method for constructing objects, which
is relatively weak but nonetheless the basis for much of the older
OOP code in R&lt;/li&gt;
&lt;li&gt;S4: a more complicated and powerful method, used in many recent
packages&lt;/li&gt;
&lt;li&gt;Reference classes: a recent (2012) method, as yet lightly documented,
which produces objects that behave in a way similar to those in Java
and C++&lt;/li&gt;
&lt;li&gt;R.oo, OOP, etc: a number of third party packages that allow or ease
the construction of classes and objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, as a functional&amp;nbsp;language&amp;nbsp;R sits very uneasily with the usual
notion of objects in C++ and Java, where objects will mutate frequently
and side-effects are common.&lt;/p&gt;
&lt;p&gt;As a result, OOP is comparatively underused in R and the way(s) it is
implemented can be confusing and opaque to those coming from other
programming langauges. While OOP isn't a panacea (there are other valid
and useful programing idioms, and several smart people have challenged
OOP as a paradigm) it's still useful to understand how it can be
achieved in R so as to allow the building of complex data structures and
algorithms.&lt;/p&gt;
&lt;p&gt;In this light, this and the accompanying articles are an outlien iof the
various OOP systems in R, detailing what they can do and how they can be
used, especially from the point-of-view of those coming from other, more
mainstream programming languages. But first …&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-oop"&gt;
&lt;h2&gt;What is OOP?&lt;/h2&gt;
&lt;p&gt;Surprisingly, there isn't a single canonical definition of what
constitutes OOP. Some features are commonly appear:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Modelling: it is useful to model and implement a problem domain as
objects containg related data&lt;/li&gt;
&lt;li&gt;Modularity: bodies of code and data concerned with different aspects
of the problem domain have miminal interactions through narrow
interfaces, to allow both reuse and substition&lt;/li&gt;
&lt;li&gt;Dynamic dispatch: when a method is invoked on an object, it
determines how it is to be executed. It could be argued that generic
functions are anothers means to the same end: a function class is
dispatched to different functions depending on the arguments passed
to it.&lt;/li&gt;
&lt;li&gt;Subtype polymorphism: objects can be replaced with that of a derived
type, which will fulfil the external obligations of the original
object, while allowing the internal details to alter&lt;/li&gt;
&lt;li&gt;Inheritance: derived types can be constructed that fulfil the
interface of the parent class, while customizing the implementation&lt;/li&gt;
&lt;li&gt;Open recursion: objects can refer to themselves&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll refer to these in the subsequent articles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A good introduction to the nitty-gritty of types in
R:&amp;nbsp;&lt;a class="reference external" href="http://www.nealgroothuis.name/introduction-to-data-types-and-objects-in-r/"&gt;http://www.nealgroothuis.name/introduction-to-data-types-and-objects-in-r/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia on
OOP:&amp;nbsp;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Object-oriented_programming"&gt;http://en.wikipedia.org/wiki/Object-oriented_programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="OOP"></category><category term="programming"></category><category term="R"></category></entry><entry><title>Reference classes</title><link href="http://www.agapow.net/programming/r/reference-classes/" rel="alternate"></link><published>2013-05-09T14:20:00+01:00</published><updated>2013-05-09T14:20:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2013-05-09:/programming/r/reference-classes/</id><summary type="html">&lt;p&gt;A more recent development in R is Reference classes. These promise, at
last, fully blown objects and classes like those of C++ and Java.
Naturally, this innovation comes with some downsides:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reference classes are still, as yet, lightly documented&lt;/li&gt;
&lt;li&gt;They use their own form of syntax and idioms&lt;/li&gt;
&lt;li&gt;The C …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;A more recent development in R is Reference classes. These promise, at
last, fully blown objects and classes like those of C++ and Java.
Naturally, this innovation comes with some downsides:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reference classes are still, as yet, lightly documented&lt;/li&gt;
&lt;li&gt;They use their own form of syntax and idioms&lt;/li&gt;
&lt;li&gt;The C++/Java concept of classes that self-mutate and hold state doesn't sit entirely well with R's functional nature of functions without side effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="basics"&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;Let's sketch out a simple reference class, for recording sighting of
wildlife:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Observation &amp;lt;- setRefClass (&amp;quot;Observation&amp;quot;,
   fields = c (species = &amp;quot;character&amp;quot;, count = &amp;quot;numeric&amp;quot;),
   methods = c (
      genus = function(level, ...) {
         strsplit(species, &amp;quot; &amp;quot;)[[1]][1]
      },
      multiple = function() {
         1 &amp;lt; count
      }
   )
)
&lt;/pre&gt;
&lt;p&gt;A few details to highlight:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;As opposed to the class creation mechanisms of S4,  &lt;em&gt;setRefClass&lt;/em&gt; does not just register a class name but creates a class and returns it to be kept in a variable. That is, the class is  &lt;em&gt;Observation&lt;/em&gt; not the name/string  &lt;em&gt;&amp;quot;Observation&amp;quot;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;fields&lt;/em&gt; is much like  &lt;em&gt;representation&lt;/em&gt; in S4, a list of members and their defining data type&lt;/li&gt;
&lt;li&gt;There are true methods, called as functions  &lt;em&gt;of&lt;/em&gt; the object and defined as the members of  &lt;em&gt;methods&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: fields and methods can be defined as a vector or a list. A vector
is arguably shorter and just as easy to understand.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This toy class allows us to set the species name and how many examples
of the species we saw. It also allows us to ask what the genus name is
(the first word in the species name) and ask whether more than one
example was seen:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
my_obs &amp;lt;- Observation$new(species = &amp;quot;Pongo pongo&amp;quot;, count = 5)
my_obs$species
## [1] &amp;quot;Pongo pongo&amp;quot;
my_obs$count
## [1] 5
my_obs$genus()
## [1] &amp;quot;Pongo&amp;quot;
my_obs$multiple()
## [1] TRUE
&lt;/pre&gt;
&lt;p&gt;Two important points here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Classes are instantiated with the  &lt;em&gt;new&lt;/em&gt; method being called on the class.&lt;/li&gt;
&lt;li&gt;Class members and methods are called with the  &lt;em&gt;$&lt;/em&gt; syntax: &lt;em&gt;obj$member&lt;/em&gt; and &lt;em&gt;obj$method&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="methods"&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;p&gt;As noted, Reference class methods are &amp;quot;true&amp;quot; methods: they are located
in or attached to the object and they operate on the members of the
object. Not how in the example above,  &lt;em&gt;species&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; are
referred to in the method definitions are implicitly understood to be
referring to the mebers of that object, i.e. self recursion.&lt;/p&gt;
&lt;p&gt;A number of builtin methods exist on every object, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;callSuper()&lt;/em&gt;: pass execution to the superlcass of this object&lt;/li&gt;
&lt;li&gt;&lt;em&gt;copy()&lt;/em&gt;: make a copy of this object&lt;/li&gt;
&lt;li&gt;&lt;em&gt;field (field_name, val)&lt;/em&gt;: assign a value to the field of the given name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If  &lt;em&gt;initialize()&lt;/em&gt; and &lt;em&gt;finalize()&lt;/em&gt; methods ares provided on a
class, these are used as automatic constructor and destructor methods.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: there's a little oddity here in that Reference classes directly
equate the arguments passed to a class constructor to the actual fields
of an object, in a way mixing interface with implementation. But you can
include arguments in the ''initialize'' method that create members,
neither of which is listed as a field.)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mutation"&gt;
&lt;h2&gt;Mutation&lt;/h2&gt;
&lt;p&gt;R likes functions to have no side effects, i.e. changing data actually
means creating a new copy of the original data with modified values. But
reference classes allow you to mutate the state of objects without
duplicating them. How does that work?&lt;/p&gt;
&lt;p&gt;Reference class methods can use the operator  &lt;em&gt;&amp;lt;&amp;lt;-&lt;/em&gt;. This modifies
the value of a field in place. Where the usual''&amp;lt;-'' operator tpo be
used, thoiis would just just create a new local object, as it it does
normally in R. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
MyMut &amp;lt;- setRefClass (&amp;quot;MyMutCls&amp;quot;,
   fields = c(foo = &amp;quot;character&amp;quot;, bar = &amp;quot;character&amp;quot;),
   methods = c(
      initialize = function(a, b) {
         foo &amp;lt;&amp;lt;- a
         bar &amp;lt;&amp;lt;- b
      },
      mutate = function() {
         foo &amp;lt;- &amp;quot;new_foo&amp;quot;
         bar &amp;lt;&amp;lt;- &amp;quot;new_bar&amp;quot;
      }
   )
)
## Warning: local assignment to field name will not change the field: foo &amp;lt;-
## &amp;quot;new_foo&amp;quot; Did you mean to use &amp;quot;&amp;lt;&amp;lt;-&amp;quot;? ( in method &amp;quot;mutate&amp;quot; for class
## &amp;quot;MyMutCls&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Notice how R warns you against the deliberate mistake in  &lt;em&gt;mutate()&lt;/em&gt;.
Now lets create an object and look at the starting values:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mut_obj &amp;lt;- MyMut$new(a = &amp;quot;old_val&amp;quot;, b = &amp;quot;old_val&amp;quot;)
mut_obj$foo
## [1] &amp;quot;old_val&amp;quot;
mut_obj$bar
## [1] &amp;quot;old_val&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Then lets call the faulty  &lt;em&gt;mutate()&lt;/em&gt; method and see what happens:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mut_obj$mutate()
mut_obj$foo
## [1] &amp;quot;old_val&amp;quot;
mut_obj$bar
## [1] &amp;quot;new_bar&amp;quot;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;foo&lt;/em&gt; is only changed locally. The state of  &lt;em&gt;bar&lt;/em&gt; is changed
permanently.&lt;/p&gt;
&lt;p&gt;If you want to do something clever with the whole object, the
variable  &lt;em&gt;.self&lt;/em&gt; can be used in methods to reference to the current
(owning) object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inheritance"&gt;
&lt;h2&gt;Inheritance&lt;/h2&gt;
&lt;p&gt;A class can inherit from another by simple use of
the  &lt;em&gt;contains&lt;/em&gt; argument to the class definition as per S4:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
TimedObservation &amp;lt;- setRefClass (&amp;quot;TimedObservation&amp;quot;,
   fields = c(time = &amp;quot;character&amp;quot;),
   contains = c(Observation)
)
## Error: the 'contains' argument should be the names of superclasses: got an
## element of class &amp;quot;refObjectGenerator&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Methods in a subclass override those in a superclass and a subclass
inherits all the fields of a superclass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reference classes are proper classes, for certain values of proper&lt;/li&gt;
&lt;li&gt;They have attached methods&lt;/li&gt;
&lt;li&gt;Ref classes can self mutate with aid of the  &lt;em&gt;&amp;lt;&amp;lt;-&lt;/em&gt; operator.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some discussion of the &amp;quot;new&amp;quot; classes:  &lt;a class="reference external" href="http://stackoverflow.com/questions/5137199/what-is-the-significance-of-the-new-reference-classes"&gt;http://stackoverflow.com/questions/5137199/what-is-the-significance-of-the-new-reference-classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hadley Wickham on R5:  &lt;a class="reference external" href="https://github.com/hadley/devtools/wiki/R5"&gt;https://github.com/hadley/devtools/wiki/R5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Inside R and a doc page that is actually useful:  &lt;a class="reference external" href="http://www.inside-r.org/r-doc/methods/ReferenceClasses"&gt;http://www.inside-r.org/r-doc/methods/ReferenceClasses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="OOP"></category><category term="programming"></category><category term="R"></category></entry><entry><title>Using Paperclip for attachments</title><link href="http://www.agapow.net/programming/web-development/ruby-on-rails/using-paperclip-for-attachments/" rel="alternate"></link><published>2012-10-14T12:56:00+01:00</published><updated>2012-10-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-10-14:/programming/web-development/ruby-on-rails/using-paperclip-for-attachments/</id><summary type="html">&lt;p&gt;This is not as straightforward as it seems.&lt;/p&gt;
&lt;p&gt;In development, it works fine. Simply declare that the model has an
attachment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Download &amp;lt; ActiveRecord::Base
        ...
        has_attached_file :attachment
&lt;/pre&gt;
&lt;p&gt;and stuff will work automagically. A directory “system” will be created
in your public folder and the attachments will be created in there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is not as straightforward as it seems.&lt;/p&gt;
&lt;p&gt;In development, it works fine. Simply declare that the model has an
attachment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Download &amp;lt; ActiveRecord::Base
        ...
        has_attached_file :attachment
&lt;/pre&gt;
&lt;p&gt;and stuff will work automagically. A directory “system” will be created
in your public folder and the attachments will be created in there in a
nested fashion.&lt;/p&gt;
&lt;p&gt;Your templates can give a link to file, for downloads etc, like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Download this file
&amp;lt;a href=&amp;quot;#{this.attachment}&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;       # in DRYML
&amp;lt;%= link_to &amp;quot;PDF&amp;quot; , this.attachment.url %&amp;gt;  # in Erb
&lt;/pre&gt;
&lt;p&gt;'attachment' or 'attachment.url' seem to be synonyms, as far as passing
back an url that points to the physical file.&lt;/p&gt;
&lt;p&gt;Stuff gets weird when you move beyond this simple case. For a start, if
you're serving from a suburl, you need to tell Paperclip about this. In
config/production.rb, do something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ENV[&amp;quot;DOWNLOAD_ATTACHMENT_URL&amp;quot;] =
        '/saird/system/:class/:attachment/:id/:basename.:extension'
&lt;/pre&gt;
&lt;p&gt;That is, return an url that points into the public folder with the
appropriate path. The symbols in the string are interpolated, so you end
up with '/saird/system/mymodel/myattachment/foo.txt'.&lt;/p&gt;
&lt;p&gt;Of course, this url has to use the appropriate set of directories /
symbols / path that Paperclip is using to store the file. Should you
need to change the location of those, or want to change the nested
hierarchy, you need to set the path explicitly. Again, in
config/production.rb:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ENV[&amp;quot;DOWNLOAD_ATTACHMENT_PATH&amp;quot;] =
':rails_root/public/system/:class/:attachment/:id/:basename.:extension'
&lt;/pre&gt;
&lt;p&gt;And then the model details are modified:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
has_attached_file :attachment, :path =&amp;gt;
        ENV.fetch('DOWNLOAD_ATTACHMENT_PATH', ':rails_root/public:url'),
        :url =&amp;gt; ENV.fetch('DOWNLOAD_ATTACHMENT_URL',
        '/system/:attachment/:id/:style/:filename')
&lt;/pre&gt;
&lt;p&gt;(Ignore the default details as being peculiar to my dev setup.)&lt;/p&gt;
&lt;p&gt;So, what if you don't want the attachments to be stored in the public
directory? In the HPA case, we have two separate instances in different
locations serving off the same db. If they store files in public, the
two will become unsynchronised. Some files will be with one instance and
some with the other. So have them use a single central location, right?&lt;/p&gt;
&lt;p&gt;Here's the rub: Paperclip doesn't really handle that. Paperclip wants to
assume that your stuff is in the public directory.&lt;/p&gt;
&lt;p&gt;(This appears to be because they're all using Capistrano or some setup
where public/system is sym-linked to central file storage. So, the
problem has already been solved for them.)&lt;/p&gt;
&lt;p&gt;So let's assume I've been given central storage at
”/home/saird”. I modify the path setting to be:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ENV[&amp;quot;DOWNLOAD_ATTACHMENT_PATH&amp;quot;] =
        '/home/saird/system/:class/:attachment/:id/:basename.:extension'
&lt;/pre&gt;
&lt;p&gt;But what's the url to that location? I naively assumed that Paperclip
was doing some clever routing (e.g. any requests that come in are mapped
to the actual filepath on the system). No. No, Paperclip just takes the
url and looks for the appropriate file in the public directory.&lt;/p&gt;
&lt;p&gt;Right, so I put a symbolic link in the public folder that points at the
central storage:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ln -s /home/saird public/storage
&lt;/pre&gt;
&lt;p&gt;and set the url as:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ENV[&amp;quot;DOWNLOAD_ATTACHMENT_URL&amp;quot;] =
        '/saird/storage/system/:class/:attachment/:id/:basename.:extension'
&lt;/pre&gt;
&lt;p&gt;i.e. prefix it with the suburl appropriately and then route it through
the symbolic link to the central directory.&lt;/p&gt;
&lt;p&gt;You might be tempted to use the symlink for the path setting as well,
but this resulted in a permissions error. This may be related to our
server setup however.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; another peculiar error resulted when the file storage was
given just as the directory in which it would be created, e.g.
'/home/saird', as some examples seemed to imply. Here it seemed
that Paperclip tried to copy the dir and corrupted all its permissions.
Charming.&lt;/p&gt;
</content><category term="ruby"></category><category term="ruby-on-rails"></category><category term="web-development"></category></entry><entry><title>Rdoc, the essentials</title><link href="http://www.agapow.net/programming/ruby/rdoc-the-essentials/" rel="alternate"></link><published>2012-10-01T12:00:00+01:00</published><updated>2012-10-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-10-01:/programming/ruby/rdoc-the-essentials/</id><summary type="html">&lt;pre class="literal-block"&gt;
= Top level title

== 2nd level / sub-title

----

A horizontal rule is at least 4 dashes

----

Text can be _italic_, *bold* or +monospaced typewriter+.

   Verbatim / literal text is indented. But look out
   if it's after a list, as they must be idented to a
   different extent

----

   * Indent your lists and use stars …&lt;/pre&gt;</summary><content type="html">&lt;pre class="literal-block"&gt;
= Top level title

== 2nd level / sub-title

----

A horizontal rule is at least 4 dashes

----

Text can be _italic_, *bold* or +monospaced typewriter+.

   Verbatim / literal text is indented. But look out
   if it's after a list, as they must be idented to a
   different extent

----

   * Indent your lists and use stars

   * or hyphens, if you wish

   [definition1] you write them like this

   [definition2] and the lines can loop over to
                 the next, so long as they line up

   Alternatively:: do labelled lists like this

   Do you see:: I'm sure you do

   1. This is a ...

   2. ... numbered list

   a. This is

----

Urls / links can be written {like this}[http://go.to/here]


----

Now for special characters:

em-dash::  -- or ---
ellipsis:: ...
single quotes:: 'text' or `text'
double quotes:: &amp;quot;text&amp;quot; or ``text''
&lt;/pre&gt;
&lt;p&gt;After all that, I'd actually recommend that you use Yard for documenting Ruby
code. It's nicer and more powerful.&lt;/p&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rdoc.rubyforge.org/RDoc/Markup.html"&gt;http://rdoc.rubyforge.org/RDoc/Markup.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lsegal/yard"&gt;https://github.com/lsegal/yard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jan.varwig.org/wp-content/uploads/2006/09/Rdoc%20Cheat%20Sheet.pdf"&gt;http://jan.varwig.org/wp-content/uploads/2006/09/Rdoc%20Cheat%20Sheet.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="ruby"></category><category term="programming"></category><category term="documentation"></category><category term="tools"></category><category term="rdoc"></category></entry><entry><title>Unicode and HTML entities</title><link href="http://www.agapow.net/programming/python/unicode-and-html-entities/" rel="alternate"></link><published>2012-09-14T12:56:00+01:00</published><updated>2012-09-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-09-14:/programming/python/unicode-and-html-entities/</id><summary type="html">&lt;p&gt;Buried in the Python standard library, unicodedata contains most the
information needed to interrogate and translate unicode characters.
Unfortunately, it's underdocumented. More accurately, the
&lt;a class="reference external" href="http://docs.python.org/lib/module-unicodedata.html"&gt;docs&lt;/a&gt; are a
terse list of &lt;em&gt;what&lt;/em&gt; it does, but not &lt;em&gt;why&lt;/em&gt; you might want to use it or
&lt;em&gt;how&lt;/em&gt; you use it. Unfortunately it's also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Buried in the Python standard library, unicodedata contains most the
information needed to interrogate and translate unicode characters.
Unfortunately, it's underdocumented. More accurately, the
&lt;a class="reference external" href="http://docs.python.org/lib/module-unicodedata.html"&gt;docs&lt;/a&gt; are a
terse list of &lt;em&gt;what&lt;/em&gt; it does, but not &lt;em&gt;why&lt;/em&gt; you might want to use it or
&lt;em&gt;how&lt;/em&gt; you use it. Unfortunately it's also a compiled library, which
eliminates looking at the source. The following are some notes I
compiled concerning unicodedata and beating information out of unicode
characters. Throughout these examples, I'll use the characters 'a', 'é'
(u'xE9' in Python) and pi (?, u'u03D6' in python).&lt;/p&gt;
&lt;p&gt;The name for any of these characters can be obtained by passing them to
&lt;strong&gt;name&lt;/strong&gt;. This accepts a single character unicode (not string):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; chars = [u'a', u'xE9', u'u03D6']
&amp;gt;&amp;gt;&amp;gt; for item in chars:
   print unicodedata.name (item)
LATIN SMALL LETTER A
LATIN SMALL LETTER E WITH ACUTE
GREEK PI SYMBOL
&lt;/pre&gt;
&lt;p&gt;This name can be used in a reverse lookup to get the character with
&lt;strong&gt;lookup&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; unicodedata.lookup ('LATIN SMALL LETTER A') u'a'
&lt;/pre&gt;
&lt;p&gt;The hexadecimal letter-numbers (A to F) can be either case.
Interestingly, while the hex 'x' notation can be converted to the
unicode 'u' notation, the reverse doesn't hold. This may be do with the
compilation of Python, although it is stated
&lt;a class="reference external" href="http://www.amk.ca/python/howto/unicode"&gt;elsewhere&lt;/a&gt; that the 'x'
notation is limited to 2 characters, 'u' needs 4, and 'U' requires 8:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; print unicodedata.name (u'u00e9')
LATIN SMALL LETTER E WITH ACUTE
&amp;gt;&amp;gt;&amp;gt; print unicodedata.name (u'x03d6')
...
&amp;lt;type 'exceptions.typeerror'=&amp;quot;&amp;quot;&amp;gt;: need a single Unicode character as parameter
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;decimal&lt;/strong&gt;, &lt;strong&gt;digit&lt;/strong&gt; and &lt;strong&gt;numeric&lt;/strong&gt; are potentially confusing call -
if the character passed is a numerical character, they returns the
integer (float for &lt;em&gt;numeric&lt;/em&gt;) for that character:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; print unicodedata.decimal (u'1') 1
&amp;gt;&amp;gt;&amp;gt; print unicodedata.decimal (u'a')
...
&amp;lt;type 'exceptions.ValueError'&amp;gt;: not a decimal
&amp;gt;&amp;gt;&amp;gt; print unicodedata.digit (u'1')
1
&amp;gt;&amp;gt;&amp;gt; print unicodedata.digit (u'a')
...
&amp;lt;type 'exceptions.ValueError'&amp;gt;: not a digit
&amp;gt;&amp;gt;&amp;gt; print unicodedata.numeric (u'1')
1.0
&amp;gt;&amp;gt;&amp;gt; print unicodedata.digit (u'a')
...
&amp;lt;type 'exceptions.valueerror'=&amp;quot;&amp;quot;&amp;gt;: not a numeric character é
&lt;/pre&gt;
&lt;p&gt;The remainder of functions within unicodedata are justifiably obscure,
concerned with more typographical issuess. &lt;strong&gt;category&lt;/strong&gt; is passingly
interesting, returning a string of classification information for any
character:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; unicodedata.category (u'A')
'Lu' # letter, uppercase
&amp;gt;&amp;gt;&amp;gt; unicodedata.category (u'a')
'Ll' # letter, lowercase
&lt;/pre&gt;
&lt;p&gt;You can obtain the unicode for a character from it's ordinal value -
decimal or hex, but not a hexadecimal string- via &lt;strong&gt;unichr&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; unichr (233), unichr (0xe9) (u'xe9', u'xe9')
&lt;/pre&gt;
&lt;p&gt;Encoding characters for HTML is a small problem for unicode. First, the
angled braces &amp;lt; and &amp;gt; have to be excluded from text within HTML, so they
aren't mistaken for markup. Therefore they are translated into HTML
character entities which can be safely placed in HTML and rendered. This
can be done with the cgi.escape function:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; cgi.escape ('&amp;lt;&amp;gt;') '&amp;amp;lt;&amp;amp;gt;
&lt;/pre&gt;
&lt;p&gt;This works with strings or unicode. cgi.escape also converts ampersands,
as they are used in constructing the character entities:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; cgi.escape ('&amp;amp;') '&amp;amp;amp;'
&lt;/pre&gt;
&lt;p&gt;Next, there is the problem of rendering extended characters in HTML.
While character encoding information can be indicated by webpages, a
safer fallback is to also translate extended characters into character
entities. This can be done for all commonly used characters (and most
uncommon ones). There isn't a direct translation faility in Python, but
&lt;a class="reference external" href="http://effbot.org/zone/element-index.htm"&gt;ElementTree&lt;/a&gt; does this
with some clever pattern recognition:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
_escape = re.compile (eval(r'u&amp;quot;[&amp;amp;&amp;lt;&amp;gt;&amp;quot;u0080-uffff]+&amp;quot;'))
&lt;/pre&gt;
&lt;p&gt;to catch the extended characters and then a simple substitution:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
text = &amp;quot;&amp;amp;#%d;&amp;quot; % ord (char)
&lt;/pre&gt;
&lt;p&gt;to form numerical character entities:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;&amp;amp;#%d;&amp;quot; % ord(u'xe9') 'é'
&lt;/pre&gt;
&lt;p&gt;The catch here is this produces &lt;em&gt;numerical&lt;/em&gt; entities, not the &lt;em&gt;named&lt;/em&gt;
entities that cgi.escape makes. Each character has a named and numerical
entity. While these render equivalently, it would be preferable to
produce the more readable named entities. To illustrate:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
u'?' = unichr (960) = u'u03c0' = 'π' = 'π'
&lt;/pre&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
u'???' becomes '∑&amp;amp;radic;Π' or '∑√Π'
&lt;/pre&gt;
&lt;p&gt;Unfortunately, there's no mapping for these named entities in Python.
(Irritatingly, Docutils has wide support but &lt;a class="reference external" href="http://docutils.sourceforge.net/tmp/charents/README.html"&gt;not in a form that looks
useful for
code&lt;/a&gt;.)&lt;/p&gt;
</content><category term="programming"></category><category term="unicode"></category><category term="text-handling"></category><category term="python"></category></entry><entry><title>008 - paths across grid</title><link href="http://www.agapow.net/programming/puzzles/python/paths-across-grid/" rel="alternate"></link><published>2012-09-01T12:00:00+01:00</published><updated>2012-09-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-09-01:/programming/puzzles/python/paths-across-grid/</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=8"&gt;Problem 8&lt;/a&gt;: Find the greatest product of five consecutive digits in a 1000-digit
number.&lt;/p&gt;
&lt;p&gt;This is fairly straightforward. First we define the number, using
Python's implicit string continuation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
numstr = '73167176531330624919225119674426574742355349194934'
'96983520312774506326239578318016984801869478851843'
'85861560789112949495459501737958331952853208805511'
'12540698747158523863050715693290963295227443043557'
'66896648950445244523161731856403098711121722383113'
'62229893423380308135336276614282806444486645238749'
'30358907296290491560440772390713810515859307960866'
'70172427121883998797908792274921901699720888093776'
'65727333001053367881220235421809751254540594752243'
'52584907711670556013604839586446706324415722155397'
'53697817977846174064955149290862569321978468622482'
'83972241375657056057490261407972968652414535100474'
'82166370484403199890008895243450658541227588666881'
'16427171479924442928230863465674813919123162824586'
'17866458359124566529476545682848912883142607690042'
'24219022671055626321111109370544217506941658960408'
'07198403850962455444362981230987879927244284909188'
'84580156166097919133875499200524063689912560717606'
'05886116467109405077541002256983155200055935729725'
'71636269561882670428252483600823257530420752963450' …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=8"&gt;Problem 8&lt;/a&gt;: Find the greatest product of five consecutive digits in a 1000-digit
number.&lt;/p&gt;
&lt;p&gt;This is fairly straightforward. First we define the number, using
Python's implicit string continuation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
numstr = '73167176531330624919225119674426574742355349194934'
'96983520312774506326239578318016984801869478851843'
'85861560789112949495459501737958331952853208805511'
'12540698747158523863050715693290963295227443043557'
'66896648950445244523161731856403098711121722383113'
'62229893423380308135336276614282806444486645238749'
'30358907296290491560440772390713810515859307960866'
'70172427121883998797908792274921901699720888093776'
'65727333001053367881220235421809751254540594752243'
'52584907711670556013604839586446706324415722155397'
'53697817977846174064955149290862569321978468622482'
'83972241375657056057490261407972968652414535100474'
'82166370484403199890008895243450658541227588666881'
'16427171479924442928230863465674813919123162824586'
'17866458359124566529476545682848912883142607690042'
'24219022671055626321111109370544217506941658960408'
'07198403850962455444362981230987879927244284909188'
'84580156166097919133875499200524063689912560717606'
'05886116467109405077541002256983155200055935729725'
'71636269561882670428252483600823257530420752963450'
&lt;/pre&gt;
&lt;p&gt;To avoid converting each number 5 times as the search moves over it, we
use a functional programming construct:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
numlist = map (int, numstr)
&lt;/pre&gt;
&lt;p&gt;Then we move along the the length of the number and calculate for each
frame (i.e. set of 5 consecutive numbers):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
max_product = 0
max_frame = None
frame_size = 5
from operator import mul
for i in xrange (len (numlist) - frame_size):
   curr_frame = numlist[i:i+frame_size]
   if 0 in curr_frame:
      continue
   curr_product = reduce (mul, curr_frame)
   if (max_product &amp;lt; curr_product):
      max_product = curr_product
      max_frame = curr_frame
print max_product, max_frame
&lt;/pre&gt;
&lt;p&gt;The import mul / reduce code is just a simple trick pinched from &lt;a class="reference external" href="http://jaynes.colorado.edu/PythonIdioms.html"&gt;Python
Idioms&lt;/a&gt; to calculate the product of a sequence. There some attempted
efficiency here, where we abort calculations if a 0 appears in the
frame, but it may not save much time. For interest, we also print out
the maximum frame, but without these two features, a more compact
version would be:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for i in xrange (len (numlist) - frame_size):
   curr_frame = numlist[i:i+frame_size]
   curr_product = reduce (mul, curr_frame)
   max_product = max (max_product, curr_product)
print max_product
&lt;/pre&gt;
&lt;p&gt;Computation time is negligible.&lt;/p&gt;
&lt;p&gt;My initial solution for this problem tried to reduce the number of
multiplications involved, by calculating the product for the initial
frame and then shifting it along one. The product of the new frame would
be that of the old one, multiplied by the value of the new position and
divided by the position that has just dropped off:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[2 4 1 2 5] # product is 2*4*1*2*5=80
[4 1 2 5 3] # product is 80*3/2=120
&lt;/pre&gt;
&lt;p&gt;However, this fails utterly when 0s appear in the sequence.&lt;/p&gt;
</content><category term="python"></category><category term="programming puzzles"></category><category term="project-euler"></category></entry><entry><title>Counting bouncy numbers</title><link href="http://www.agapow.net/programming/puzzles/python/counting-bouncy-numbers/" rel="alternate"></link><published>2012-09-01T12:00:00+01:00</published><updated>2012-09-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-09-01:/programming/puzzles/python/counting-bouncy-numbers/</id><summary type="html">&lt;p&gt;See Project Euler &lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=112"&gt;Problem 112&lt;/a&gt;: Find the point at which the porportion of bouncy numbers is 99%.&lt;/p&gt;
&lt;p&gt;This is a simple problem to state, but has some tricks. First in the
conversion of a number into its component digits. This can be neatly
done with the [int (x) for x …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See Project Euler &lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=112"&gt;Problem 112&lt;/a&gt;: Find the point at which the porportion of bouncy numbers is 99%.&lt;/p&gt;
&lt;p&gt;This is a simple problem to state, but has some tricks. First in the
conversion of a number into its component digits. This can be neatly
done with the [int (x) for x in str (n)] construct, which turns the
number into a string, converts each character in the string into an int
and builds a list with the result.&lt;/p&gt;
&lt;p&gt;Detecting the &amp;quot;bounciness&amp;quot; is done efficiently in the function by moving
to each digit (but the first) and comparing it to the previous. Moves up
and down are recorded and if at any point we have seen both, we need not
check any further.&lt;/p&gt;
&lt;p&gt;The main loop runs from 100 to 5 million. There is no need to look
before 100, because it is the first number that has an opportunity to up
&lt;em&gt;and&lt;/em&gt; down. (This introduces an interesting question as to whether the
answer is meant to also count numbers below 100.) 5 million was
arbitrarily chosen as an upper limit during development, just to catch
any run-away loops.&lt;/p&gt;
&lt;p&gt;The final step, calculating when the percent bouncy numbers is &lt;em&gt;exactly&lt;/em&gt;
99% is tricky. We can't do this using floats because floating point
arithmetic is inexact. (Unless we use decimal.) If we use integers, they
will round off any residue ( 9/10 is 0). So multiplying by 100 allows us
to make a comparison against 99. Even then rounding can occur (99001 /
1000 is 99), so we check with the modulo that the numbers divide evenly
into each other:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def is_bouncy (n):
   num_list = [int (x) for x in str (n)]
   goes_up = goes_down = False
   for index in range (1, len (num_list)):
      if (num_list[index-1] &amp;lt; num_list[index]):
         goes_up = True
      elif (num_list[index-1] &amp;gt; num_list[index]):
         goes_down = True
      if (goes_up and goes_down):
         return True
   return False

# some test code
for x in [100, 120, 138, 142, 144, 149]:
   print x, is_bouncy (x)

trials = 0
bouncy = 0
for i in range (100, 5000000):
   trials += 1
   if (is_bouncy (i)):
      bouncy += 1
percent_bouncy = bouncy * 100 / trials
if (99 == percent_bouncy):
   if ((1559844 * 100) % 1575600 == 0):
      print &amp;quot;Number:&amp;quot;, i, &amp;quot;trials:&amp;quot;, trials, &amp;quot;bouncy:&amp;quot;, bouncy break
&lt;/pre&gt;
&lt;p&gt;The answer is 1575699. Computation time about 20 seconds..&lt;/p&gt;
</content><category term="python"></category><category term="programming puzzles"></category><category term="project-euler"></category></entry><entry><title>007 - 10001st prime</title><link href="http://www.agapow.net/programming/puzzles/python/10001st-prime/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/python/10001st-prime/</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=7"&gt;Problem 7&lt;/a&gt;: What is the 10001st prime number?&lt;/p&gt;
&lt;p&gt;This solution is fairly simple (and largely stolen from &lt;a class="reference external" href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/535154"&gt;Aaron
Gallagher&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def iter_primes ():
   # handle trivial case
   yield 2
   val = 1
   primesq_pairs = []
   while True:
      curr = None
      while (curr is None):
      val += 2
      curr = val
      for prime, square in primesq_pairs:
         if (curr &amp;lt; square …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=7"&gt;Problem 7&lt;/a&gt;: What is the 10001st prime number?&lt;/p&gt;
&lt;p&gt;This solution is fairly simple (and largely stolen from &lt;a class="reference external" href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/535154"&gt;Aaron
Gallagher&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def iter_primes ():
   # handle trivial case
   yield 2
   val = 1
   primesq_pairs = []
   while True:
      curr = None
      while (curr is None):
      val += 2
      curr = val
      for prime, square in primesq_pairs:
         if (curr &amp;lt; square):
            break
         if (curr % prime == 0):
            curr = None
            break
         primesq_pairs.append ((curr, curr**2))
      yield curr

primer_gen = iter_primes()
for x in xrange (10001):
   result = primer_gen.next()
print result
&lt;/pre&gt;
&lt;p&gt;Execution time is slow: 0.2s. Some notes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The prime function is written as a fairly general iterator /
generator for good practice. No doubt more specialised code would run
faster. This also means that we have to instantiate the generator
&lt;tt class="docutils literal"&gt;primer_gen = ...&lt;/tt&gt; and call &lt;tt class="docutils literal"&gt;next&lt;/tt&gt; the requisite number of times, to get
the &lt;em&gt;n&lt;/em&gt; th answer.&lt;/li&gt;
&lt;li&gt;We use &lt;tt class="docutils literal"&gt;xrange&lt;/tt&gt; to save the memory that is created in the loop. A &lt;tt class="docutils literal"&gt;while&lt;/tt&gt;
could also be used here. Sometimes Python cries out for a regular,
C++ style for loop ...&lt;/li&gt;
&lt;li&gt;Note that 2 is not included in the internal list of primes. This is
because we start searching for the primer from an odd number and
increase our test value by 2 in every step, ensuring that our test
value is never even and we never have to see if it is divisible by 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A brief explanation of the algorithm: as we produce primes, each time we
store them. Then any putative primes we create are tested against this
list. (Anything that isn't a primer can be decomposed into prime
factors, i.e. is divisible by a primer.) This approach also avoids the
need of many algorithms (see comments in earlier problems0 to generate a
static array the length of the final number.&lt;/p&gt;
</content><category term="python"></category><category term="programming puzzles"></category><category term="project-euler"></category></entry><entry><title>A useful .irbrc file</title><link href="http://www.agapow.net/programming/ruby/a-useful-irbrc-file/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/ruby/a-useful-irbrc-file/</id><summary type="html">&lt;p&gt;For better or worse, programming in Ruby means that you will be spending
a lot of time in &lt;tt class="docutils literal"&gt;irb&lt;/tt&gt;. You can customise its behaviour in your &lt;tt class="docutils literal"&gt;.irbrc&lt;/tt&gt;
file, usually found in your home directory. The tweaks in mine were
gathered from various places across the 'net:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
require &amp;quot;rubygems&amp;quot;
require &amp;quot;wirble …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;For better or worse, programming in Ruby means that you will be spending
a lot of time in &lt;tt class="docutils literal"&gt;irb&lt;/tt&gt;. You can customise its behaviour in your &lt;tt class="docutils literal"&gt;.irbrc&lt;/tt&gt;
file, usually found in your home directory. The tweaks in mine were
gathered from various places across the 'net:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
require &amp;quot;rubygems&amp;quot;
require &amp;quot;wirble&amp;quot;
require &amp;quot;irb&amp;quot;

# install and use the wirble gem, it does a lot of neat stuff
Wirble.init
Wirble.colorize

# the default colors suck, mod to use your own colors =
Wirble::Colorize.colors.merge({
   # set the comma color to blue
   :comma =&amp;gt; :green,
   :refers =&amp;gt; :green,
})

# to handle mistyping - &amp;quot;did you mean ...&amp;quot;
require 'guessmethod'

class Object
   # what methods are here that are not present on basic objects?
   def interesting_methods
      (self.methods - Object.new.methods).sort
   end

   def which_method (method_name)
      self.method(method_name.to_sym)
   end
end
&lt;/pre&gt;
</content><category term="ruby"></category><category term="programming"></category><category term="irb"></category></entry><entry><title>Euler 035 - counting circular primes</title><link href="http://www.agapow.net/programming/puzzles/python/euler-035-counting-circular-primes/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/python/euler-035-counting-circular-primes/</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=35"&gt;Problem
20&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again, this rescues a lot of code from previous problems, but the
solution is less than perfect. The Euler guidelines say that every
problem should be computable within a minute, but despite much tweaking,
this solution takes significantly longer.&lt;/p&gt;
&lt;p&gt;For speed, primes should be generated only once …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=35"&gt;Problem
20&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again, this rescues a lot of code from previous problems, but the
solution is less than perfect. The Euler guidelines say that every
problem should be computable within a minute, but despite much tweaking,
this solution takes significantly longer.&lt;/p&gt;
&lt;p&gt;For speed, primes should be generated only once, for which we use a
classic sieve:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def iter_primes (n):
   &amp;quot;&amp;quot;&amp;quot;
   After `Tim Hochberg &amp;lt;http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/117119&amp;gt;`__.
   &amp;quot;&amp;quot;&amp;quot;
   yield 2
   D = {}
   q = 3
   while (q &amp;lt;= n):
      p = D.pop (q, 0)
      if p:
         x = q + p
         while x in D:
            x += p
            D[x] = p
      else:
         yield q
      D[q*q] = 2*q
      q += 2
&lt;/pre&gt;
&lt;p&gt;We then accumulate all the primes below a million (which takes only a
few seconds):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
all_primes = []
for x in iter_primes (1000000):
   all_primes.append (x)
&lt;/pre&gt;
&lt;p&gt;And then check every prime. Each prime is rotated and checked to see if
it is in the list of primes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
circ_primes = []
for x in all_primes:
   pstr = str (x)
   is_circular = True
   for y in iter_rotate_seq (pstr):
      if (y == pstr):
         continue
      else:
   n = int (''.join (y))
   if (n not in all_primes):
      is_circular = False
      break
   if (is_circular):
      print x
      circ_primes.append (x)
      print &amp;quot;Length:&amp;quot;, len (circ_primes)
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;iter_rotate_seq&lt;/tt&gt; is a simple function that produces every rotation of a
sequence. Note that the first rotation is a move of 0, giving the
original sequence:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def iter_rotate_seq (seq):
   for i in range (len (seq)):
      yield seq[i:] + seq[:i]
&lt;/pre&gt;
&lt;p&gt;The answer is 55. Computation time is 261.6 seconds.&lt;/p&gt;
</content><category term="programming"></category><category term="programming-puzzles"></category><category term="python"></category><category term="primes"></category></entry><entry><title>Euler in Groovy 1: sum of numbers</title><link href="http://www.agapow.net/programming/puzzles/groovy/euler-in-groovy-1-sum-of-numbers/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/groovy/euler-in-groovy-1-sum-of-numbers/</id><summary type="html">&lt;p&gt;The problem is:&lt;/p&gt;
&lt;blockquote&gt;
Print the sum of numbers less than 1000 that are divisble by 5 or 3.&lt;/blockquote&gt;
&lt;p&gt;Already, we're exposed to a few nifty features of Groovy - ranges, and
the functional methods on arrays like findAll:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// print the sum of numbers less than 1000 that are divisble by 5 …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;The problem is:&lt;/p&gt;
&lt;blockquote&gt;
Print the sum of numbers less than 1000 that are divisble by 5 or 3.&lt;/blockquote&gt;
&lt;p&gt;Already, we're exposed to a few nifty features of Groovy - ranges, and
the functional methods on arrays like findAll:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// print the sum of numbers less than 1000 that are divisble by 5 or 3
answer = (1..999).findAll {
        (it % 3 == 0) || (it % 5 == 0)
}.sum()
println answer // =&amp;gt; 233168
&lt;/pre&gt;
</content><category term="project-euler"></category><category term="groovy"></category><category term="programming-puzzles"></category></entry><entry><title>Euler in Groovy 6: sum of squares vs square of sums</title><link href="http://www.agapow.net/programming/puzzles/groovy/exercise-6-sum-of-squares-vs-square-of-sums/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/groovy/exercise-6-sum-of-squares-vs-square-of-sums/</id><summary type="html">&lt;p&gt;The sum of the squares of the first ten natural numbers is, &lt;tt class="docutils literal"&gt;1^2 + 2^2 + ... + 10^2 = 385&lt;/tt&gt;.
The square of the sum of the first ten natural numbers is &lt;tt class="docutils literal"&gt;(1 + 2 + ... +
&lt;span class="pre"&gt;10)^2&lt;/span&gt; = 55^2 = 3025&lt;/tt&gt;. Hence the difference between the sum of the squares
of the first …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The sum of the squares of the first ten natural numbers is, &lt;tt class="docutils literal"&gt;1^2 + 2^2 + ... + 10^2 = 385&lt;/tt&gt;.
The square of the sum of the first ten natural numbers is &lt;tt class="docutils literal"&gt;(1 + 2 + ... +
&lt;span class="pre"&gt;10)^2&lt;/span&gt; = 55^2 = 3025&lt;/tt&gt;. Hence the difference between the sum of the squares
of the first ten natural numbers and the square of the sum is &lt;tt class="docutils literal"&gt;3025 - 385
= 2640&lt;/tt&gt;. Find the difference between the sum of the squares of the first
one hundred natural numbers and the square of the sum:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sum_of_squares = 0
square_of_sum = 0
(1..100).each {
        sum_of_squares += it * it
        square_of_sum += it
}
square_of_sum *= square_of_sum
return square_of_sum - sum_of_squares
// =&amp;gt; 25164150
&lt;/pre&gt;
</content></entry><entry><title>Euler in Groovy 7: finding primes</title><link href="http://www.agapow.net/programming/puzzles/groovy/euler-in-groovy-7-finding-primes/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/groovy/euler-in-groovy-7-finding-primes/</id><summary type="html">&lt;p&gt;By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we
can see that the 6th prime is 13. What is the 10001st prime number?&lt;/p&gt;
&lt;p&gt;It seems a bit cumbersome, but use a sieve of erasthonenes to
generate primes until we have collected the 10001st.
Basically …&lt;/p&gt;</summary><content type="html">&lt;p&gt;By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we
can see that the 6th prime is 13. What is the 10001st prime number?&lt;/p&gt;
&lt;p&gt;It seems a bit cumbersome, but use a sieve of erasthonenes to
generate primes until we have collected the 10001st.
Basically, iterate up from 3 in steps of 2, check each number against the
list of previously encountered primes. If none are divisors, then its a prime,
add it to the list.&lt;/p&gt;
&lt;p&gt;We save a little time by starting at the first
&amp;quot;real&amp;quot; prime (3) and stepping up by 2 from there, because no even
number we encounter will be a prime:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
primes = [2]
for (i=3; primes.size() &amp;lt; 10001; i+=2) {
        primes_cnt = primes.size()
        found_a_prime = true
        for (j=0; (j &amp;lt; primes_cnt) &amp;amp;&amp;amp; (found_a_prime); j++) {
                if (i % primes[j] == 0) {
                        found_a_prime = false
                }
        }
        if (found_a_prime) {
                primes &amp;lt;&amp;lt; i
        }
}

println (primes[-1])
&lt;/pre&gt;
&lt;p&gt;which returns 104743&lt;/p&gt;
</content><category term="programming"></category><category term="programming-puzzles"></category><category term="groovy"></category><category term="project-euler"></category></entry><entry><title>Exercise 3: finding prime factors</title><link href="http://www.agapow.net/programming/puzzles/groovy/exercise-3-finding-prime-factors/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/groovy/exercise-3-finding-prime-factors/</id><summary type="html">&lt;p&gt;Exercise 3: finding prime factors&lt;/p&gt;
&lt;p&gt;What is the largest prime factor of the number 600851475143?&lt;/p&gt;
&lt;p&gt;// What is the largest prime factor of the number 600851475143? target =
600851475143 factors = [] residue = target residue_is_prime = false //
NOTE: ``#`` is not a comment character! // While the residue is not
prime, keep extracting factors and adding to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Exercise 3: finding prime factors&lt;/p&gt;
&lt;p&gt;What is the largest prime factor of the number 600851475143?&lt;/p&gt;
&lt;p&gt;// What is the largest prime factor of the number 600851475143? target =
600851475143 factors = [] residue = target residue_is_prime = false //
NOTE: ``#`` is not a comment character! // While the residue is not
prime, keep extracting factors and adding to list while (!
residue_is_prime) { // A factor could be from 2 to half the residue,
try until one is found // NOTE: don't get integer division automatically
in groovy, so have to // explicitly cast // NOTE: originally used
``each``, but ``break`` only works inside loops println
(&amp;quot;Factoring ${residue} ...&amp;quot;) half = (long) (residue / 2) found_factor =
false for (i=2; i &amp;lt;= half; i++) { // If it's a factor, stop looking, add
to list &amp;amp; reduce residue if (residue % i == 0) { residue = (long)
(residue / i) println (&amp;quot;Reduce to ${i} &amp;amp; ${residue}&amp;quot;) // NOTE: this is
how you append to a list factors &amp;lt;&amp;lt; i found_factor = true break } } //
If you haven't found a factor, then the residue must be prime // NOTE:
groovy doesn't have `not`, `and` or `or` as syntactic sugar if (!
found_factor) { factors &amp;lt;&amp;lt; residue residue_is_prime = true } }
println (&amp;quot;Factors are ${factors}.&amp;quot;) println (&amp;quot;Max factor is
${factors.max()}.&amp;quot;) # =&amp;gt; 6857&lt;/p&gt;
</content></entry><entry><title>Exercise: 4 palindromic numbers</title><link href="http://www.agapow.net/programming/puzzles/groovy/exercise-4-palindromic-numbers/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/groovy/exercise-4-palindromic-numbers/</id><summary type="html">&lt;p&gt;Exercise: 4 palindromic numbers /* A palindromic number reads the same
both ways. The largest palindrome made from the product of two 2-digit
numbers is 9009 = 91 x 99. Find the largest palindrome made from the
product of two 3-digit numbers. */ // The only way to work this out is
to try …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Exercise: 4 palindromic numbers /* A palindromic number reads the same
both ways. The largest palindrome made from the product of two 2-digit
numbers is 9009 = 91 x 99. Find the largest palindrome made from the
product of two 3-digit numbers. */ // The only way to work this out is
to try all pairs of 3 digit numbers (100 to // 999). However, we can
trim the search space by testing a number with all // numbers higher
than it (e.g. test 998 with 998-999, 997 with 997-999), so we // are
testing all unique combinations), so we // are testing all unique
combinations palindromes = [] (100..999).each { i -&amp;gt; (i..999).each { j
-&amp;gt; product = i * j // NOTE: convert string just with interpolation,
could also do it with // ``(String)`` prod_str = &amp;quot;${product}&amp;quot; //
Grab the first &amp;amp; second halves of string, reverse second &amp;amp; compare len =
prod_str.size() half = (int) (len / 2) // NOTE: ``substring`` is a
little like a python slice - where do you str_a = prod_str.substring
(0, half) // start, where do you stop just short of str_b =
prod_str.substring (len - half, len).reverse() if (str_a == str_b) {
palindromes &amp;lt;&amp;lt; product } } } println palindromes.max()&lt;/p&gt;
</content></entry><entry><title>Exercise 5: smallest divisible number</title><link href="http://www.agapow.net/programming/puzzles/groovy/exercise-5-smallest-divisible-number/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/groovy/exercise-5-smallest-divisible-number/</id><summary type="html">&lt;p&gt;Exercise 5: smallest divisible number&lt;/p&gt;
&lt;p&gt;What is the smallest positive number that is evenly divisible by all of
the numbers from 1 to 20?&lt;/p&gt;
&lt;p&gt;/* 2520 is the smallest number that can be divided by each of the
numbers from 1 to 10 without any remainder. What is the smallest
positive …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Exercise 5: smallest divisible number&lt;/p&gt;
&lt;p&gt;What is the smallest positive number that is evenly divisible by all of
the numbers from 1 to 20?&lt;/p&gt;
&lt;p&gt;/* 2520 is the smallest number that can be divided by each of the
numbers from 1 to 10 without any remainder. What is the smallest
positive number that is evenly divisible by all of the numbers from 1 to
20? */ // It seems the only way to do this is by exhaustive again. So
we count up and // look for the first success. However, we don't have to
check for all the // divisors - if something is divisible by 20, it is
also divisible by 10 and // 5 and 4 and 2 ... divisors = [20, 19, 18,
17, 16, 14, 13, 12, 11] num_divisors = divisors.size() // We get a
speedup by &amp;quot;stepping-up&amp;quot; by the smallest divisor. This also means //
that we don't have to test for that divisor step = divisors[-1] for
(i=step;; i=i+step) { found_all_div = true for (j=0; j &amp;lt;
(num_divisors - 1); j++) { d = divisors[j] if (i % d != 0) { // println
(&amp;quot;${i} is not divisible by ${d} ...&amp;quot;) found_all_div = false break } }
if (found_all_div) { println i // =&amp;gt; 232792560 break } }&lt;/p&gt;
</content></entry><entry><title>General Field Validation In Rails</title><link href="http://www.agapow.net/programming/web-development/ruby-on-rails/general-field-validation-in-rails/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/web-development/ruby-on-rails/general-field-validation-in-rails/</id><summary type="html"></summary><content type="html"></content></entry><entry><title>Mysteriously a tuple</title><link href="http://www.agapow.net/programming/python/mysteriously-a-tuple/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/python/mysteriously-a-tuple/</id><summary type="html">&lt;p&gt;Not the first time I've been stung by this, so it's worth recording the
problem.&lt;/p&gt;
&lt;div class="section" id="symptoms"&gt;
&lt;h2&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;A function or call inexplicably returns not as the expected type but as
a tuple containing the said type. After a furious amount of debugging,
you determine that everything is acting as it should …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Not the first time I've been stung by this, so it's worth recording the
problem.&lt;/p&gt;
&lt;div class="section" id="symptoms"&gt;
&lt;h2&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;A function or call inexplicably returns not as the expected type but as
a tuple containing the said type. After a furious amount of debugging,
you determine that everything is acting as it should and returning the
types that it should. Yet, somehow, the value you capture from a
particular line is a tuple.&lt;/p&gt;
&lt;p&gt;Your code will look something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
f =&amp;nbsp;radio_input ('Pathogen', 'pathogen', pathogen_choices,
        env=d,&amp;nbsp;... ...
        helptext=&amp;quot;Which organism are you looking for matches with?&amp;quot;,
        default=None),
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="diagnosis"&gt;
&lt;h2&gt;Diagnosis&lt;/h2&gt;
&lt;p&gt;You may have spotted this already but it's the trailing comma. Easy to
miss when you're scanning complex code and a series of nested calls, but
instead of this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x = long_complicated_stuff
&lt;/pre&gt;
&lt;p&gt;you're doing this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x =&amp;nbsp;long_complicated_stuff,
&lt;/pre&gt;
&lt;p&gt;which evalulates to this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x = (long_complicated_stuff, )
&lt;/pre&gt;
&lt;p&gt;i.e. an implicit one-element tuple&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Remove the comma, obviously.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Naming an association in Rails</title><link href="http://www.agapow.net/programming/web-development/ruby-on-rails/naming-an-association-in-rails/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/web-development/ruby-on-rails/naming-an-association-in-rails/</id><summary type="html">&lt;p&gt;Naming an association in Rails&lt;/p&gt;
&lt;p&gt;In which we thwart the magic of Ruby on Rails.&lt;/p&gt;
&lt;p&gt;The automagically generated and named rails associations (:has_many,
:belongs) are handy, but I ran into problems when trying to give an
association a name other than the default based on the class name (e.g …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Naming an association in Rails&lt;/p&gt;
&lt;p&gt;In which we thwart the magic of Ruby on Rails.&lt;/p&gt;
&lt;p&gt;The automagically generated and named rails associations (:has_many,
:belongs) are handy, but I ran into problems when trying to give an
association a name other than the default based on the class name (e.g.
&amp;quot;users&amp;quot;). It would be better to use more informative names, especially
where models may relate in a number of ways (e.g. &amp;quot;authors&amp;quot;, &amp;quot;editors&amp;quot;,
&amp;quot;artists&amp;quot;).&lt;/p&gt;
&lt;p&gt;Unfortunately the Rails documentation is a little opaque on this, with
many method options that _look_ as if they'll do the job (:source,
:class_name, :foreign_key). Furthermore, there's are lots of partial
solutions that partially work, making it hard to de-engineer what's
going on.&lt;/p&gt;
&lt;p&gt;This is one possible solution, which can be summarized:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rename the association in the owning (has_many) model.&lt;/li&gt;
&lt;li&gt;Rename the association in intermediate model and give the class name
of the model on the other side of the relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: this focuses on :has_many, because Hobo does not make full use of
:has_many_and_belongs_to_many as yet.&lt;/p&gt;
&lt;p&gt;The situation: each shift can have several supervisors and each user can
be a supervisor for multiple shifts, i.e. a classic many-to-many&lt;/p&gt;
&lt;p&gt;Version 1: with automatically deduced names based on the model classes:&lt;/p&gt;
&lt;p&gt;# The supervisors are available through &amp;quot;users&amp;quot; class Shift &amp;lt;
ActiveRecord::Base has_many :shift_supervisors, :dependent =&amp;gt; :destroy
has_many :users, :through =&amp;gt; :shift_supervisors end # intermediate
table # the user is pointed at by &amp;quot;user&amp;quot;, and the shift by &amp;quot;shift&amp;quot; class
ShiftSupervisor &amp;lt; ActiveRecord::Base belongs_to :shift belongs_to
:user end # The shifts are available through &amp;quot;shifts&amp;quot; class User &amp;lt;
ActiveRecord::Base has_many :shift_supervisors, :dependent =&amp;gt; :destroy
has_many :shifts, :through =&amp;gt; :shift_supervisors end&lt;/p&gt;
&lt;p&gt;Version 2: renaming the association in Shift to something more logical:&lt;/p&gt;
&lt;p&gt;# The supervisors are available through &amp;quot;supervisors&amp;quot;, just by renaming
the # association class Shift &amp;lt; ActiveRecord::Base has_many
:shift_supervisors, :dependent =&amp;gt; :destroy has_many :supervisors,
:through =&amp;gt; :shift_supervisors end # the user is pointed at by
&amp;quot;supervisor&amp;quot;, with explicit naming of the model class ShiftSupervisor &amp;lt;
ActiveRecord::Base belongs_to :shift belongs_to :supervisor,
:class_name =&amp;gt; &amp;quot;User&amp;quot; end # unchanged class User &amp;lt; ActiveRecord::Base
has_many :shift_supervisors, :dependent =&amp;gt; :destroy has_many :shifts,
:through =&amp;gt; :shift_supervisors end&lt;/p&gt;
</content></entry><entry><title>Sum of even fibonacci numbers</title><link href="http://www.agapow.net/programming/puzzles/groovy/euler-in-groovy-2-sum-of-even-fibonacci-numbers/" rel="alternate"></link><published>2012-06-14T12:56:00+01:00</published><updated>2012-06-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-06-14:/programming/puzzles/groovy/euler-in-groovy-2-sum-of-even-fibonacci-numbers/</id><summary type="html">&lt;p&gt;Find the sum of all even fibonacci numbers that do not exceed four
million&lt;/p&gt;
&lt;p&gt;Warning, there's a slightly crude appending to an array below (I learn
how to properly append in later exercises). findAll gets another working
out:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
fibos = []
a1 = 0
a2 = 1

while (true) {
   curr_term = a1 + a2
   if (4000000 …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Find the sum of all even fibonacci numbers that do not exceed four
million&lt;/p&gt;
&lt;p&gt;Warning, there's a slightly crude appending to an array below (I learn
how to properly append in later exercises). findAll gets another working
out:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
fibos = []
a1 = 0
a2 = 1

while (true) {
   curr_term = a1 + a2
   if (4000000 &amp;lt;= curr_term)
      break
      fibos += [curr_term]
   a1 = a2
   a2 = curr_term
}

println fibos.findAll { it % 2 == 0 }.sum() // =&amp;gt; 4613732
&lt;/pre&gt;
</content><category term="groovy"></category><category term="project-euler"></category><category term="programming"></category><category term="programming-puzzle"></category></entry><entry><title>Django form fields</title><link href="http://www.agapow.net/programming/web-development/django-form-fields/" rel="alternate"></link><published>2012-05-14T12:00:00+01:00</published><updated>2012-05-14T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-05-14:/programming/web-development/django-form-fields/</id><summary type="html">&lt;p&gt;Django's form generation machinery for the most part is fine and
straightforward, but on a recent project I ran into problems with a form
that accepted files. The documentation is all there, but changes in how
things work and an emphasis on forms for models make things harder to
understand …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django's form generation machinery for the most part is fine and
straightforward, but on a recent project I ran into problems with a form
that accepted files. The documentation is all there, but changes in how
things work and an emphasis on forms for models make things harder to
understand than they should be.&lt;/p&gt;
&lt;p&gt;First, lets look at the form:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MyForm(forms.Form):
   myfile = forms.FileField() # ...
&lt;/pre&gt;
&lt;p&gt;and the &lt;em&gt;original&lt;/em&gt; code for handling it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def show_form (cls, request):
   # instantiate form in one of several ways ...
   form_cls = cls.MyForm
   # if the form has been submitted ...
   if request.method == 'POST':
      form = form_cls(request.POST)
   # if the form is valid
   if form.is_valid():
      # get the clean data and do the work
      cls.process_form (form.cleaned_data)
   else:
      # if you're coming to the form anew, make an unbound form
      form = form_cls()
      render_to_response('myform.html', {'form': form })
&lt;/pre&gt;
&lt;p&gt;When the form is instantiated, it looks fine. But when it is submitted,
the validation always fails on the file field, saying the file is
required, whether or not a file has been selected in the form.&lt;/p&gt;
&lt;p&gt;Strange. The field is, by default, required so a file needed but is not
being detected. By tracking the validation, we can see that it is
working correctly.&lt;/p&gt;
&lt;p&gt;The answer is that files are now stored in the request apart from the
rest of the data in &lt;tt class="docutils literal"&gt;request.FILES&lt;/tt&gt;. This has to be passed to the form
c'tor:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if request.method == 'POST':
   form = form_cls(request.POST, request.FILES)
&lt;/pre&gt;
&lt;p&gt;at which point the validation passes. After validation the file can be
found in the clean data as an &lt;tt class="docutils literal"&gt;UploadedFile&lt;/tt&gt; object.&lt;/p&gt;
</content><category term="django"></category><category term="web-development"></category><category term="programming"></category></entry><entry><title>Can I use RMagick?</title><link href="http://www.agapow.net/programming/web-development/ruby-on-rails/can-i-use-rmagick/" rel="alternate"></link><published>2012-04-01T12:00:00+01:00</published><updated>2012-04-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-04-01:/programming/web-development/ruby-on-rails/can-i-use-rmagick/</id><summary type="html">&lt;p&gt;RMagick is necessary for a lot of Ruby packages, so the restrictions on
using it are critical (and very annoying). Here are the constraints on
what can be used where:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="43%" /&gt;
&lt;col width="43%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Ruby 1.8&lt;/td&gt;
&lt;td&gt;RMagick 1&lt;/td&gt;
&lt;td&gt;RMagick 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Ruby 1.9&lt;/td&gt;
&lt;td&gt;RMagick 2&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Or to put it another way: if you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;RMagick is necessary for a lot of Ruby packages, so the restrictions on
using it are critical (and very annoying). Here are the constraints on
what can be used where:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="43%" /&gt;
&lt;col width="43%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Ruby 1.8&lt;/td&gt;
&lt;td&gt;RMagick 1&lt;/td&gt;
&lt;td&gt;RMagick 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Ruby 1.9&lt;/td&gt;
&lt;td&gt;RMagick 2&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Or to put it another way: if you have Ruby 1.9+, you must use RMagick 2
and must have ImageMagick 6.35+. No exceptions.&lt;/p&gt;
</content><category term="ruby-on-rails"></category><category term="ruby"></category><category term="web-development"></category></entry><entry><title>Gotcha: map keys in Groovy</title><link href="http://www.agapow.net/programming/groovy/gotcha-map-keys-in-groovy/" rel="alternate"></link><published>2012-02-01T12:00:00+00:00</published><updated>2012-02-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-02-01:/programming/groovy/gotcha-map-keys-in-groovy/</id><summary type="html">&lt;p&gt;Maps are great quick-and-dirty data structures or caches in many
programming languages. But there's a least one way that Groovy maps
aren't so friendly. Observe:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
groovysh&amp;gt; m1 = [1:1]
===&amp;gt; {1=1}
groovysh&amp;gt; m1[1]
===&amp;gt; 1
groovysh&amp;gt; m1[(int) 1]
===&amp;gt; 1
groovysh&amp;gt; m1[(long) 1]
===&amp;gt; null
&lt;/pre&gt;
&lt;p&gt;So, map keys are using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Maps are great quick-and-dirty data structures or caches in many
programming languages. But there's a least one way that Groovy maps
aren't so friendly. Observe:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
groovysh&amp;gt; m1 = [1:1]
===&amp;gt; {1=1}
groovysh&amp;gt; m1[1]
===&amp;gt; 1
groovysh&amp;gt; m1[(int) 1]
===&amp;gt; 1
groovysh&amp;gt; m1[(long) 1]
===&amp;gt; null
&lt;/pre&gt;
&lt;p&gt;So, map keys are using a strict form of equality where type matters, so
that an integer doesn't equal a long. To demonstrate further (note the
wacky notation to force types when initialising the map):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
groovysh&amp;gt; m2 = [((long) 1):1]
===&amp;gt; {1=1}
groovysh&amp;gt; m2[1]
===&amp;gt; null
groovysh&amp;gt; m2[(int) 1]
===&amp;gt; null
groovysh&amp;gt; m2[(long) 1]
===&amp;gt; 1
&lt;/pre&gt;
</content><category term="programming"></category><category term="groovy"></category></entry><entry><title>Page-specific assets in Rails</title><link href="http://www.agapow.net/programming/web-development/ruby-on-rails/page-specific-assets-in-rails/" rel="alternate"></link><published>2012-01-01T12:00:00+00:00</published><updated>2012-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-01-01:/programming/web-development/ruby-on-rails/page-specific-assets-in-rails/</id><summary type="html">&lt;p&gt;A common use-case in web development is including some asset (e.g. a
stylesheet or javascript file) only for certain pages. The situation
gets trickier if the inclusion has to be in the page header. Finding how
do do this in RoR is surprisingly tricky, due to outdated or bad …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A common use-case in web development is including some asset (e.g. a
stylesheet or javascript file) only for certain pages. The situation
gets trickier if the inclusion has to be in the page header. Finding how
do do this in RoR is surprisingly tricky, due to outdated or bad
information, but the answer is simple. Successive calls to content-for
will append data, so the header can be written something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html;charset=UTF-8&amp;quot; /&amp;gt;
&amp;lt;%= javascript_include_tag :defaults %&amp;gt; ... &amp;lt;%= yield :more_head_content %&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/pre&gt;
&lt;p&gt;and the view written:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;% content_for :more_head_content do %&amp;gt;
        &amp;lt;%= javascript_include_tag &amp;quot;myfile2&amp;quot; %&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;% content_for :more_head_content do %&amp;gt;
        &amp;lt;%= javascript_include_tag &amp;quot;myfile3&amp;quot; %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/pre&gt;
&lt;p&gt;to push both javascript include tags into the header. Two caveats: this
will not work in partials. Also, there are some reports of failure in
more recent versions of Rails, reason unclear. See &lt;a class="reference external" href="http://railscasts.com/episodes/8-layouts-and-content-for"&gt;Railscasts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A more fiddly version that may overcome these problems follows. Instead
of a symbol, we include an instance variable in the header to later
write to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;head&amp;gt; ... &amp;lt;%= &amp;#64;even_more_head_content %&amp;gt; &amp;lt;/head&amp;gt;
&lt;/pre&gt;
&lt;p&gt;In the view that requires the inclusion, write:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;% &amp;#64;even_more_head_content ||= &amp;quot;&amp;quot;;
        &amp;#64;even_more_head_content += capture do %&amp;gt;
&amp;lt;%= javascript_include_tag 'myextracode' %&amp;gt; &amp;lt;% end %&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Working through the code, the inclusion variable is initialised if not
already. Extra content is then captured and appended to it. &amp;quot;Extra&amp;quot;
content may be safely added from several places and will appear in the
header. No doubt this could be shortened, if only Ruby would allow pass
by reference semantics. A curious site effect is that if you try to
include vanilla HTML tags (links, spans, etc.) in the header, they get
pushed done into the body of the document and appear at the top of the
visible webpage.&lt;/p&gt;
&lt;p&gt;Taken from &lt;a class="reference external" href="http://stackoverflow.com/questions/390164/javascript-include-tag-best-practice-in-a-rails-application"&gt;Stack Overflow&lt;/a&gt;, although the code as presented there will
not work.&lt;/p&gt;
</content></entry><entry><title>Setuptools and the single file</title><link href="http://www.agapow.net/programming/python/setuptools-and-the-single-file/" rel="alternate"></link><published>2012-01-01T12:00:00+00:00</published><updated>2012-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-01-01:/programming/python/setuptools-and-the-single-file/</id><summary type="html">&lt;p&gt;Setuptools and the single file&lt;/p&gt;
&lt;p&gt;Problems with making an installer for a simple module&lt;/p&gt;
&lt;p&gt;Although
&lt;a class="reference external" href="http://peak.telecommunity.com/DevCenter/setuptools"&gt;setuptools&lt;/a&gt; is a
complex thing, and there has has been widespread complaints about its
architecture, for the most part, I've had few problems with it. However,
I recently encountered a crusty and under-documented corner of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Setuptools and the single file&lt;/p&gt;
&lt;p&gt;Problems with making an installer for a simple module&lt;/p&gt;
&lt;p&gt;Although
&lt;a class="reference external" href="http://peak.telecommunity.com/DevCenter/setuptools"&gt;setuptools&lt;/a&gt; is a
complex thing, and there has has been widespread complaints about its
architecture, for the most part, I've had few problems with it. However,
I recently encountered a crusty and under-documented corner of it.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://wordpress.agapow.net/software/rst2beamer-2"&gt;rst2beamer&lt;/a&gt; is a
Python module for translating &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;restructured
text&lt;/a&gt; to the
&lt;a class="reference external" href="http://latex-beamer.sourceforge.net/"&gt;Beamer&lt;/a&gt; LaTeX dialect for
presentations. The module is fairly simple and consists of a single file
of Python (i.e. a one file module), rst2beamer.py. The job of the
installer is therefore to copy this file to the local site-packages and
create a script that calls the writer defined in this file.&lt;/p&gt;
&lt;p&gt;When the normal layout for a setuptools-enabled setup.py installer is
used, it generates distributions (source and egg) seemingly without any
problems, and these distributions install (via setup.py or
easy_install) also without any apparent problems. But while it appears
that the distribution is installed, trying to import it or use the
generated script to call it results in an import error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-diagnosis"&gt;
&lt;h2&gt;The diagnosis&lt;/h2&gt;
&lt;p&gt;The non-functional rst2beamer sat on PyPi for months before someone
informed me it wasn't working. (Are the expectations for open-source
software that bad?) On studying the distribution it became clear that
setuptools wasn't recognizing rst2beamer.py as something to install. In
fact, the distributions are created without the actual source file.
Altering the manifest file and using various other methods to get the
source included in the distribution still resulted in non-functional
distributions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;We have to revert to an older way of installing software. While the
setup.py file used to say:&lt;/p&gt;
&lt;p&gt;setup( name='rst2beamer', version=__version__, # ...
packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),
include_package_data=True, # ... )&lt;/p&gt;
&lt;p&gt;setuptools doesn't see rst2beamer as a package or installable. So it
needs to be changed to read:&lt;/p&gt;
&lt;p&gt;setup( name='rst2beamer', version=__version__, # ...
py_modules=['rst2beamer'], # ... )&lt;/p&gt;
&lt;p&gt;i.e. pass the single file module names to py_modules. Note that the .py
is not used.&lt;/p&gt;
&lt;p&gt;It's a surprising hole in setuptools documentation - there's an implicit
assumption that everything you install will be a package, i.e. at least
a folder. Perhaps it was felt there was no need to document features
carried over from disutils.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks"&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks to James Heggarty for reporting the problem and helping diagnose
it.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Simple string interpolation</title><link href="http://www.agapow.net/programming/ruby/simple-string-interpolation/" rel="alternate"></link><published>2012-01-01T12:00:00+00:00</published><updated>2012-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-01-01:/programming/ruby/simple-string-interpolation/</id><summary type="html">&lt;p&gt;It's often useful for a script to allow the specification of how an
output file is named, e.g. myscript.rb -o file.out. At the same time, it
would be nice to have the output name based on the an input file name,
and have easy and consistent naming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's often useful for a script to allow the specification of how an
output file is named, e.g. myscript.rb -o file.out. At the same time, it
would be nice to have the output name based on the an input file name,
and have easy and consistent naming over multiple files. So, what we
need is some sort of string markup or template pattern that the user can
use to specify how names are produced or transformed. But this markup
should be simple (not a fully-blown language) and safe (because we are
executing input from users). below is a simple script that interpolates
and substitutes markup in strings that is delimited by curly braces,
e.g. myfile{time}.txt. Several sample substitutions are supplied, it
would be easy to create others. Some examples:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ruby demo-iinterp.rb &amp;quot;foo.{ext}&amp;quot; bar.txt
'bar.txt' would be renamed as 'foo.txt' ...

% ruby demo-iinterp.rb &amp;quot;foo.{ext}&amp;quot; bar.txt
'bar.txt' would be renamed as 'foo.txt' ...

% ruby demo-iinterp.rb &amp;quot;foo.{ext}&amp;quot; bar.txt
'bar.txt' would be renamed as 'foo.txt' ...

% ruby demo-iinterp.rb &amp;quot;{base}.2&amp;quot; bar.txt
'bar.txt' would be renamed as 'bar.txt.2' ...

% ruby demo-iinterp.rb &amp;quot;{root}.2.{date}.{ext}&amp;quot; bar.txt
'bar.txt' would be renamed as 'bar.2.2010-05-27.txt' ...
&lt;/pre&gt;
&lt;p&gt;The script:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/env ruby
# Show how files would be renamed according to a &amp;quot;template&amp;quot; string,
# demonstrating how a &amp;quot;safe&amp;quot; and simple template can be defined on
# the commandline. Call as:
#
# demo-interp.rb template infile1 [infile2 ...]

require 'date'
require 'time'
require 'pp'

def interpolate (str, sub_hash)
        return str.gsub(/{([^}]+)}/) { |m| sub_hash[$1] }
end

tmpl_str = ARGV[0]
infiles = ARGV.slice (1, ARGV.size())
infiles.each { |f|
        ext = File.extname(f)
        subs = {
                &amp;quot;ext&amp;quot;=&amp;gt; ext[1, ext.length],
                &amp;quot;base&amp;quot; =&amp;gt; File.basename(f),
                &amp;quot;root&amp;quot; =&amp;gt; File.basename(f, ext),
                &amp;quot;date&amp;quot; =&amp;gt; Date.today.to_s(),
                &amp;quot;time&amp;quot; =&amp;gt; Time.now.strftime(fmt='%T'),
                &amp;quot;datetime&amp;quot; =&amp;gt; DateTime.now.strftime (fmt='%F T%T'),
        }
        out_name = interpolate(tmpl_str, subs)
        print &amp;quot;'#{f}' would be renamed as '#{out_name}' ... &amp;quot;
}
&lt;/pre&gt;
</content><category term="ruby"></category></entry><entry><title>Universal binaries with Netbeans</title><link href="http://www.agapow.net/programming/tools/universal-binaries-with-netbeans/" rel="alternate"></link><published>2012-01-01T12:00:00+00:00</published><updated>2012-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-01-01:/programming/tools/universal-binaries-with-netbeans/</id><summary type="html">&lt;p&gt;&lt;em&gt;How to compile a MacOS executable from C++ using the Netbeans IDE.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Universal binaries are one of Apple's clever innovations that paper over
the differences between architectures by including several distinct
executables within a single file. When run, the OS examines the file and
decides which binary to execute. Thus …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;How to compile a MacOS executable from C++ using the Netbeans IDE.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Universal binaries are one of Apple's clever innovations that paper over
the differences between architectures by including several distinct
executables within a single file. When run, the OS examines the file and
decides which binary to execute. Thus you can transparently support
Intel and PowerPC machines.&lt;/p&gt;
&lt;p&gt;Strangely, for something so important, the documentation for this
feature is uneven. While there is coverage wihtin Apple techdocs, there
are outdated and obscure spots. It gets more difficult if you insist on
working outside XCode. After trial and error, I've found out how to
produce cover Universal binaries from a Netbeans C++ project.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;In Netbeans, highlight the project you are compiling and right/control/context click. Select Properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In the ensuing dialog, select C++ Compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Select the editor button for Additional options. Enter:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-force_cpusubtype_ALL -mmacosx-version-min=10.4 -arch ppc -arch i386
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Apply the changes and compile.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A similar process should work for C programs as well.&lt;/p&gt;
&lt;p&gt;While the arch arguments are obvious, neglecting the first two will
result in something that looks like a universal binary, but doesn't work
like one with the cross compiled target failing. It's unclear to me if
mmacosx-version-min can realistically be set to anything earlier, but
10.4 should catch most users anyway. You can check the result with file,
and get something like this (where mesa is the executable):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% file mesa mesa: Mach-O universal binary with 2 architectures
mesa (for architecture ppc): Mach-O executable ppc
mesa (for architecture i386): Mach-O executable i386
&lt;/pre&gt;
</content></entry><entry><title>Upgrading to 3.0</title><link href="http://www.agapow.net/programming/web-development/plone/upgrading-to-3-0/" rel="alternate"></link><published>2012-01-01T12:00:00+00:00</published><updated>2012-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2012-01-01:/programming/web-development/plone/upgrading-to-3-0/</id><summary type="html">&lt;p&gt;Despite the Plone community's tendency to dump everything and jump onto
the latest version, I'd resisted the move to Plone 3.0. One good reason
for this is that I'd repeatedly installed Plone 3.0 and it had -
repeatedly - failed to startup. The symptoms weren't identical every
time, but most …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Despite the Plone community's tendency to dump everything and jump onto
the latest version, I'd resisted the move to Plone 3.0. One good reason
for this is that I'd repeatedly installed Plone 3.0 and it had -
repeatedly - failed to startup. The symptoms weren't identical every
time, but most commonly showed Plone failing to import or find a common
submodule. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[agapow&amp;#64;iBook ~/Sites/zope-2.10.5-final]$ ./bin/runzope -X
&amp;quot;debug-mode=on&amp;quot; 2008-02-04 14:35:23 INFO ZServer HTTP server started at
Mon Feb 4 14:35:23 2008 Hostname: 0.0.0.0 Port: 8080 2008-02-04 14:35:27
ERROR PortalTransforms Problem importing module
web_intelligent_plain_text_to_html : No module named
intelligenttext.transforms 2008-02-04 14:35:27 ERROR PortalTransforms
Problem importing module html_to_web_intelligent_plain_text : No
module named intelligenttext.transforms 2008-02-04 14:35:29 ERROR
Application Could not import Products.ATContentTypes Traceback (most
recent call last): File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/OFS/Application.py&amp;quot;,
line 709, in import_product product=__import__(pname, global_dict,
global_dict, silly) File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/ATContentTypes/__init__.py&amp;quot;,
line 64, in ? import Products.ATContentTypes.content File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/ATContentTypes/content/__init__.py&amp;quot;,
line 26, in ? import Products.ATContentTypes.content.link File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/ATContentTypes/content/link.py&amp;quot;,
line 39, in ? from Products.ATContentTypes.content.base import
registerATCT File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/ATContentTypes/content/base.py&amp;quot;,
line 63, in ? from Products.CMFPlone.PloneFolder import
ReplaceableWrapper File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/CMFPlone/__init__.py&amp;quot;,
line 215, in ? from browser import ploneview File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/CMFPlone/browser/ploneview.py&amp;quot;,
line 12, in ? from Products.CMFPlone import utils File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/CMFPlone/utils.py&amp;quot;, line
7, in ? from plone.i18n.normalizer.interfaces import IIDNormalizer
ImportError: No module named i18n.normalizer.interfaces Traceback (most
recent call last): File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/Zope2/Startup/run.py&amp;quot;,
line 56, in ? run() File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/Zope2/Startup/run.py&amp;quot;,
line 21, in run starter.prepare() File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/Zope2/Startup/__init__.py&amp;quot;,
line 102, in prepare self.startZope() File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/Zope2/Startup/__init__.py&amp;quot;,
line 278, in startZope Zope2.startup() File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/Zope2/__init__.py&amp;quot;,
line 47, in startup _startup() File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/Zope2/App/startup.py&amp;quot;,
line 45, in startup OFS.Application.import_products() File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/OFS/Application.py&amp;quot;,
line 686, in import_products import_product(product_dir,
product_name, raise_exc=debug_mode) File
&amp;quot;/Users/agapow/Applications/bin/zope-2.10.5-final/lib/python/OFS/Application.py&amp;quot;,
line 709, in import_product product=__import__(pname, global_dict,
global_dict, silly) File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/ATContentTypes/__init__.py&amp;quot;,
line 64, in ? import Products.ATContentTypes.content File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/ATContentTypes/content/__init__.py&amp;quot;,
line 26, in ? import Products.ATContentTypes.content.link File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/ATContentTypes/content/link.py&amp;quot;,
line 39, in ? from Products.ATContentTypes.content.base import
registerATCT File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/ATContentTypes/content/base.py&amp;quot;,
line 63, in ? from Products.CMFPlone.PloneFolder import
ReplaceableWrapper File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/CMFPlone/__init__.py&amp;quot;,
line 215, in ? from browser import ploneview File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/CMFPlone/browser/ploneview.py&amp;quot;,
line 12, in ? from Products.CMFPlone import utils File
&amp;quot;/Users/agapow/Sites/zope-2.10.5-final/Products/CMFPlone/utils.py&amp;quot;, line
7, in ? from plone.i18n.normalizer.interfaces import IIDNormalizer
ImportError: No module named i18n.normalizer.interfaces
&lt;/pre&gt;
&lt;p&gt;Got all of that? Marvellous - you now have a small understanding of what Plone development is like: routine operations being interupted by enormous cryptic tracebacks.&lt;/p&gt;
&lt;p&gt;At one point, I'd found that several zope packages I had in my standard
Python library site-packages were causing the problem, being loaded
instead of those in the instance library. (Those in site-packages were
more up-to-date that those in the instance. Backwards compatiability?
What's that?) . This is despite the fact the PYTHONPATH for Zope was set
to look at the instance library first. Clearing out the zope packages
fixed things.&lt;/p&gt;
&lt;p&gt;Some minor revs later, I gave it another try. This time it failed with
the above error message, but there were no zope packages in
site-packages and none of the paths showed anything be drawn from there.
Intrigued, I started up IPython and typed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[1]: import zope
ImportError: No module named zope
[2]: import Plone
[3]:
&lt;/pre&gt;
&lt;p&gt;Uh-huh. Now it was a Plone module. Searching site-packages, a single
package was found, that wasn't even part of the plone distribution but
was using the plone namespace. This was enough to throw off the import.
Removing that was enough to allow the instance to run. It seems that
something like this is the cause of a lot of related problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.nabble.com/My-Plone-3-Linux-Environments-Became-Corrupted-After-Following-Instructions-To-Install-Plone.portlet.static-td14493633s6742.html"&gt;My Plone 3 Linux environments became corrupted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.nabble.com/additional-zeo-instance-failed-to-load-products-p13132130s15482.html"&gt;Additional ZEO instance failed to load products&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plone.org/products/ploneboard/issues/157"&gt;Ploneboard ticket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.plone.org/plone/ticket/7510"&gt;Dev.plone ticket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The clean solution is to use a python installation dedicated to nothing
but Plone, so that there is no other installed software to interfere
with Plone. Suggested solutions in some of the incidents listed above
include using a universal installer (doesn't help), a buildout recipe or
virtualenv, which puts me in mind of the &lt;a class="reference external" href="http://www.dorkypantsr.us/"&gt;Dilbert cartoon about cycling
shorts&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; bicycle seats are hard. They hurt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analysis:&lt;/strong&gt; There must be something wrong with your pants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Dorky pants.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="Plone"></category></entry><entry><title>Illogical or</title><link href="http://www.agapow.net/programming/ruby/illogical-or/" rel="alternate"></link><published>2011-09-01T12:00:00+01:00</published><updated>2011-09-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2011-09-01:/programming/ruby/illogical-or/</id><summary type="html">&lt;p&gt;In which we consider the difference between &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;||&lt;/tt&gt;
in Ruby. The secret is ... it depends. On context.&lt;/p&gt;
&lt;p&gt;Behold:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; foo = nil or &amp;quot;foo&amp;quot;
=&amp;gt; &amp;quot;foo&amp;quot;
&amp;gt;&amp;gt; bar = nil || &amp;quot;bar&amp;quot;
=&amp;gt; &amp;quot;bar&amp;quot;
&lt;/pre&gt;
&lt;p&gt;That makes sense. But!:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def testor (&amp;amp;block)
   foo = block or &amp;quot;foo&amp;quot;
   bar = block || &amp;quot;bar&amp;quot;
   return foo, bar, block
end

&amp;gt;&amp;gt; testor()
=&amp;gt; [nil, &amp;quot;bar …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;In which we consider the difference between &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;||&lt;/tt&gt;
in Ruby. The secret is ... it depends. On context.&lt;/p&gt;
&lt;p&gt;Behold:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; foo = nil or &amp;quot;foo&amp;quot;
=&amp;gt; &amp;quot;foo&amp;quot;
&amp;gt;&amp;gt; bar = nil || &amp;quot;bar&amp;quot;
=&amp;gt; &amp;quot;bar&amp;quot;
&lt;/pre&gt;
&lt;p&gt;That makes sense. But!:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def testor (&amp;amp;block)
   foo = block or &amp;quot;foo&amp;quot;
   bar = block || &amp;quot;bar&amp;quot;
   return foo, bar, block
end

&amp;gt;&amp;gt; testor()
=&amp;gt; [nil, &amp;quot;bar&amp;quot;, nil]
&lt;/pre&gt;
&lt;p&gt;Ruby, WTF?&lt;/p&gt;
</content><category term="ruby"></category><category term="programming"></category><category term="wtf"></category></entry><entry><title>Ruby 1.9, keyword arguments, WTF</title><link href="http://www.agapow.net/programming/ruby/ruby-1-9-keyword-arguments-wtf/" rel="alternate"></link><published>2011-09-01T12:00:00+01:00</published><updated>2011-09-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2011-09-01:/programming/ruby/ruby-1-9-keyword-arguments-wtf/</id><summary type="html">&lt;p&gt;Amongst the many entries Ruby has in the &amp;quot;you have got to be kidding me&amp;quot;
stakes, this is a doozy.&lt;/p&gt;
&lt;p&gt;Due to Ruby's lack of explicit support for keyword arguments, it's
traditional to use a quirk of its argument parsing that pushes named
arguments into a hash:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def foo (a …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Amongst the many entries Ruby has in the &amp;quot;you have got to be kidding me&amp;quot;
stakes, this is a doozy.&lt;/p&gt;
&lt;p&gt;Due to Ruby's lack of explicit support for keyword arguments, it's
traditional to use a quirk of its argument parsing that pushes named
arguments into a hash:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def foo (a, kwargs={})
        print a
        print kwargs
end

foo(1) # prints &amp;quot;1&amp;quot; and &amp;quot;{}&amp;quot;
foo(1, :a=&amp;gt;2) # prints &amp;quot;1&amp;quot; and &amp;quot;{:a=&amp;gt;2}&amp;quot;
&lt;/pre&gt;
&lt;p&gt;However, should you be so unwise as to insert a space between the
function name and arguments:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
foo (1, :a=&amp;gt;2)
&lt;/pre&gt;
&lt;p&gt;you'll get an extremely unhelpful error message:&lt;/p&gt;
&lt;blockquote&gt;
SyntaxError: (irb):5: syntax error, unexpected ',', expecting ')'&lt;/blockquote&gt;
&lt;p&gt;The error is being pinpointed in the argument list although it is
actually being caused by the space between the function name and parens.
It appears that this problem was introduced in 1.9 (see comments on this
&lt;a class="reference external" href="http://blog.grayproductions.net/articles/getting_code_ready_for_ruby_19"&gt;article&lt;/a&gt;).&lt;/p&gt;
</content><category term="ruby"></category><category term="wtf"></category><category term="programming"></category></entry><entry><title>Surprises</title><link href="http://www.agapow.net/programming/python/surprises/" rel="alternate"></link><published>2011-07-01T12:00:00+01:00</published><updated>2011-07-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2011-07-01:/programming/python/surprises/</id><summary type="html">&lt;p&gt;In a way, tuples are one of the most magical parts of Python. How does
the interpreter distinguish between a method call, a bracketed portion
of a mathematical expression and an actual tuple?:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
calc_midpoint (1, None, [2, 3], False)
x = w + (x * y)
a = (b, c)
&lt;/pre&gt;
&lt;p&gt;The really smart thing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a way, tuples are one of the most magical parts of Python. How does
the interpreter distinguish between a method call, a bracketed portion
of a mathematical expression and an actual tuple?:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
calc_midpoint (1, None, [2, 3], False)
x = w + (x * y)
a = (b, c)
&lt;/pre&gt;
&lt;p&gt;The really smart thing is that Python rarely mistakes the meaning you
intend, otherwise &amp;quot;accidental&amp;quot; tuples would make writing code painful.
But when it does, the symptoms can be baffling.&lt;/p&gt;
&lt;p&gt;Writing a multi-element tuple is easy: &lt;tt class="docutils literal"&gt;(a, b, c)&lt;/tt&gt;. When you first
come to writing a single element tuple however, it can be baffling:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
a = (2) # this is the integer 2
b = ((2)) # this is still the integer 2
c = tuple (2) # this fails as 2 is not iterable
&lt;/pre&gt;
&lt;p&gt;The answer is delightfully simple, and relies on Python's tolerance of
excessive commas (something I wish Javascript had):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
d = (2,)  # this is a tuple
d = 2,    # as is this
&lt;/pre&gt;
&lt;p&gt;However, stray commas can cause problems. It took me nearly an hour to
spot why this list was being mis-interpreted as a tuple containing the
list:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
e = [ 1, 2, 3, ],
&lt;/pre&gt;
&lt;p&gt;Hint: it's the trailing comma.&lt;/p&gt;
</content><category term="python"></category><category term="programming"></category></entry><entry><title>Stuff I done learned about Hobo</title><link href="http://www.agapow.net/programming/web-development/ruby-on-rails/stuff-i-done-learned-about-hobo/" rel="alternate"></link><published>2011-05-01T12:00:00+01:00</published><updated>2011-05-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2011-05-01:/programming/web-development/ruby-on-rails/stuff-i-done-learned-about-hobo/</id><summary type="html">&lt;p&gt;In which I discover things, sometimes painfully.&lt;/p&gt;
&lt;p&gt;Unless otherwise stated, done using Ruby 1.9.2, Hobo 1.0.3 (and hence
Rails 2.3.10):&lt;/p&gt;
&lt;div class="section" id="permissions"&gt;
&lt;h2&gt;Permissions&lt;/h2&gt;
&lt;p&gt;It seems that permissions in Hobo can be a little tricky, in so much as
I've had a case where something that behaved …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In which I discover things, sometimes painfully.&lt;/p&gt;
&lt;p&gt;Unless otherwise stated, done using Ruby 1.9.2, Hobo 1.0.3 (and hence
Rails 2.3.10):&lt;/p&gt;
&lt;div class="section" id="permissions"&gt;
&lt;h2&gt;Permissions&lt;/h2&gt;
&lt;p&gt;It seems that permissions in Hobo can be a little tricky, in so much as
I've had a case where something that behaved appropriately under a test
environment, starting throwing permissions errors under development. In
particular, the error “view of non-viewable field 'foo'” seemed to
trigger problems where a link or foreign key field caused problems.
Issues included:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Test for a guest then an admin then for user properties:&lt;/strong&gt; otherwise
the admin may fail on the user properties.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write a permission method for the specific field:&lt;/strong&gt; e.g.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def poster_view_permitted?
   true
end
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Check the permissions on the referred class&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scripts"&gt;
&lt;h2&gt;Scripts&lt;/h2&gt;
&lt;p&gt;You can call “server” with -p to set the port and -P to set the path, so
you can test serving the site at a subdomain:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.script/server -p 9123 -P /saird
&lt;/pre&gt;
&lt;p&gt;You can pass an environment via -e or set the env with a bash call. This
is useful for testing the production version:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
RAILS_ENV=production ./script/server -e production
&lt;/pre&gt;
&lt;p&gt;Do the migration of the production database from your development
environment in a similar way:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
RAILS_ENV=production rake db:migrate
&lt;/pre&gt;
&lt;p&gt;Generate with -p to “pretend” (don't actually make the changes):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./script/generate hobo_migration -p
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-i-get-that-damn-irritating-creator-link-to-go-away"&gt;
&lt;h2&gt;How do I get that damn irritating creator link to go away?&lt;/h2&gt;
&lt;p&gt;Pass the without-creator-link attribute to your show template:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;show-page without-creator-link&amp;gt; ... &amp;lt;/show-page&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-templates"&gt;
&lt;h2&gt;Customizing templates&lt;/h2&gt;
&lt;p&gt;DRYML is sufficiently strange that if you want to customize the
appearance, it can be hard to know where to start. Some tips:&lt;/p&gt;
&lt;p&gt;1. Copy the appropriate template of another object, delete the object
specific features and use&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Copy the auto-generated template from app/views/taglibs/auto/rapid&lt;/li&gt;
&lt;li&gt;Use the psuedo tags&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="anomalies"&gt;
&lt;h2&gt;Anomalies&lt;/h2&gt;
&lt;p&gt;Had a very strange error where I was using Less (via More) and
“sudddenly” (when I chnaged the less stylesheet for the first time in
weeks), the site errored out, complaining “uninitialized constant
Less::Engine). The More maintainers have since moved on to the Next Big
Thing (converting .less via javascript) but I had no desire to follow.
The solution turned out to be reinstalling the more plugin:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ./script/plugin remove more % script/plugin install git://github.com/cloudhead/more.git
&lt;/pre&gt;
&lt;p&gt;and regenerating the stylesheets manually:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% rake more:generate
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="cookiestore-cookieoverflow"&gt;
&lt;h2&gt;CookieStore::CookieOverflow&lt;/h2&gt;
&lt;p&gt;“Status: 500 Internal Server Error
ActionController::Session::CookieStore::CookieOverflow”&lt;/p&gt;
&lt;p&gt;Should you get this error, you're probably passing results or other data
in the session, which by default is held in a cookie. You've overflowed
the cookie data limit of 4K. Behaviour can be a bit subtle if you are
using lazily evaluated records, as accessing a new fields can be enough
to throw you over the limit. There are a few solution:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Store the session another way, say in the database&lt;/li&gt;
&lt;li&gt;If you're returning records, instead return the record ids and fetch
them when you need them&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See: &lt;a class="reference external" href="http://justbarebones.blogspot.com/2009/03/cookierstorecookieoverflow.html"&gt;http://justbarebones.blogspot.com/2009/03/cookierstorecookieoverflow.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wrong-number-of-arguments"&gt;
&lt;h2&gt;&amp;quot;wrong number of arguments&amp;quot;&lt;/h2&gt;
&lt;p&gt;After creating a new model class and editing it, the subsequent
migration failed with a cryptic error:wrong number of arguments (1 for
2). Calling the generator with traceback enabled, pointed out the new
class as the error:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./script/generate hobo_migration -t
&lt;/pre&gt;
&lt;p&gt;That's because the ”:required” keyword on a field was spelt ”:requires”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
fields do
   description :text, :requires
end
&lt;/pre&gt;
&lt;p&gt;Changed and fixed. Easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strict-dryml"&gt;
&lt;h2&gt;Strict DRYML&lt;/h2&gt;
&lt;p&gt;The DRYML parser is far less forgiving than your typical web browser -
it has to be legalXML. So while a browser will put up with this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;submitted&amp;quot; value=&amp;quot;true&amp;quot;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Hobo insist that it be like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;submitted&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="cheatsheets"&gt;
&lt;h2&gt;Cheatsheets&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zylstra.files.wordpress.com/2008/03/hobocheatsheet-011.pdf"&gt;http://zylstra.files.wordpress.com/2008/03/hobocheatsheet-011.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://conceptspace.wikidot.com/blog:hobo-page-structure"&gt;http://conceptspace.wikidot.com/blog:hobo-page-structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="permissions-on-subordinate-objects"&gt;
&lt;h2&gt;Permissions on subordinate objects&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Discovered by Ali and recorded for when we encounter this again.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A strange situation arose in the creation of a Hobo model that had
children that were another model that could be created inline, a classic
one-to-many:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Foo &amp;lt; ActiveRecord::Base
   hobo_model # Don't put anything above this
   [...]
   has_many :bars, :accessible =&amp;gt; true, :dependent =&amp;gt; :destroy
&lt;/pre&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Bar &amp;lt; ActiveRecord::Base
hobo_model # Don't put anything above this
[...]
belongs_to :foo
&lt;/pre&gt;
&lt;p&gt;The aim was to allow users to create a Foo, with a variable number of
children Bars created inline on the same form. Users would be unable to
later edit or delete these objects. Thus permissions were set allowing
non-admin users to create Foos and Bars but other actions were denied.&lt;/p&gt;
&lt;p&gt;A strange behaviour ensued: if an admin created a Foo, all fields
appeared as expected, including the list of Bar children, with the
javascript-enabled + and - buttons to add or delete children. If the
user was non-admin, the children would not appear, although other
relationships would.&lt;/p&gt;
&lt;p&gt;After a great deal of trial and error, the problem was identified.
Non-admin users require the destroy permission for the bar children to
appear, even on a form for the de novo creation of Foo. Perhaps this is
because the child delete (minus) button requires this permission.
Perhaps it's because the new form and edit forms are one and the same.
More investigation is required.&lt;/p&gt;
&lt;/div&gt;
</content><category term="ruby"></category><category term="ruby-on-rails"></category><category term="web-development"></category></entry><entry><title>Parsing Excel</title><link href="http://www.agapow.net/programming/ruby/parsing-excel/" rel="alternate"></link><published>2011-03-01T12:00:00+00:00</published><updated>2011-03-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2011-03-01:/programming/ruby/parsing-excel/</id><summary type="html">&lt;p&gt;Some (very) quick notes on libraries for manipulating (mostly reading)
Excel files in Ruby.&lt;/p&gt;
&lt;div class="section" id="parseexcel"&gt;
&lt;h2&gt;Parseexcel&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This is the usual / traditional method for reading Excel&lt;/li&gt;
&lt;li&gt;Doesn't work on XSLX (modern Excel)&lt;/li&gt;
&lt;li&gt;There are a number of versions handing around the web, look on rubygems for latest version&lt;/li&gt;
&lt;li&gt;Appears to not call …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Some (very) quick notes on libraries for manipulating (mostly reading)
Excel files in Ruby.&lt;/p&gt;
&lt;div class="section" id="parseexcel"&gt;
&lt;h2&gt;Parseexcel&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This is the usual / traditional method for reading Excel&lt;/li&gt;
&lt;li&gt;Doesn't work on XSLX (modern Excel)&lt;/li&gt;
&lt;li&gt;There are a number of versions handing around the web, look on rubygems for latest version&lt;/li&gt;
&lt;li&gt;Appears to not call external libraries, uses it's own OLE module&lt;/li&gt;
&lt;li&gt;Uses a member on Excel cells called &amp;quot;type&amp;quot; which causes spurious deprecation warnings&lt;/li&gt;
&lt;li&gt;The project seems to be moribund, it was last touched in 2007&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="writeexcel"&gt;
&lt;h2&gt;Writeexcel&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Counterpart to Parseexcel, and the usual / traditional method for writing&lt;/li&gt;
&lt;li&gt;An active project, last modified November 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="spreadsheet"&gt;
&lt;h2&gt;Spreadsheet&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Will read and write Excel&lt;/li&gt;
&lt;li&gt;Supposedly builds on Parseexcel&lt;/li&gt;
&lt;li&gt;&amp;quot;Will&amp;quot; handle other formats, but currently only does Excel&lt;/li&gt;
&lt;li&gt;A quiet project, last touched in 2009&lt;/li&gt;
&lt;li&gt;Will handle unicode&lt;/li&gt;
&lt;li&gt;There's an irritating error involving the calling of &lt;tt class="docutils literal"&gt;new!&lt;/tt&gt; method for a class that doesn't have it. Updating your Ruby OLE library should fix this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="windows-ole-bridge"&gt;
&lt;h2&gt;Windows OLE bridge&lt;/h2&gt;
&lt;p&gt;Possible to use this for getting at Excel, but useless if you aren't on
Windows (and I'm not)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="roo"&gt;
&lt;h2&gt;Roo&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The most promising candidate, reads Excel (including XSLX), OpenOffice and Google Docs spreadsheets&lt;/li&gt;
&lt;li&gt;Unfortunately achieves this by importing 6 or so other libraries that gem doesn't seem to automatically installed alongside it&lt;/li&gt;
&lt;li&gt;Seems to have the best handling / guessing of cell type&lt;/li&gt;
&lt;li&gt;Has the Spreadsheet &amp;quot;New!&amp;quot; problem (see above)&lt;/li&gt;
&lt;li&gt;Has decent cell type inference&lt;/li&gt;
&lt;li&gt;Documentation is a little sketchy (and a little German) but mostly adequate&lt;/li&gt;
&lt;li&gt;Reading isn't quite as easy as in the other modules, which allow simple iteration over rows and cells. Instead requires setting the default worksheet, finding the index of the first and last row and columns and iterating over the indices.&lt;/li&gt;
&lt;li&gt;Generally the best, most functional and fully featured&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="notes-on-the-code"&gt;
&lt;h2&gt;Notes on the code&lt;/h2&gt;
&lt;p&gt;The sample program to test each library has the following parameters
(based on a current work task):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It should read a given spreadsheet with an unknown number of rows and return a hash for each row&lt;/li&gt;
&lt;li&gt;The keys for the hash are given by an initial header row, the values are the actual cell contents&lt;/li&gt;
&lt;li&gt;Column headers can be in any order and are transformed to a canonical form to allow for variations in case, spaces, etc.&lt;/li&gt;
&lt;li&gt;Blank cells should be caught and returned as nil&lt;/li&gt;
&lt;li&gt;Flanking whitespace is trimmed off&lt;/li&gt;
&lt;li&gt;Cell contents should ideally be returned as the best type (e.g. the float &lt;tt class="docutils literal"&gt;1.23&lt;/tt&gt; instead of the string &lt;tt class="docutils literal"&gt;&amp;quot;1.23&amp;quot;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;The reader should allow sub-classing, so as to allow custom handling of particular columns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some small inconsistencies between the readers (as I changed
my mind about the requirements) but they all clean up column headers in
the same way (lowercase, trim, spaces to underscores) and all try to
guess the cell type and convert it appropriately. There's specialised
conversion for two columns. There's a a whole mess of code trying to
infer date formats (some of which is plain guessing, e.g. is &amp;quot;1/2/2011&amp;quot;
in January or February?) that for brevity is placed in a common file.
Excel-formatted dates are stored as &amp;quot;serial values&amp;quot;, which is a float
that has January 1, 1900 as day 1. This can be converted to an actual
Ruby date thus:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def serial_to_date (s)
   # round down and convert from string if need be
   # zero day is actually &amp;quot;Jan 0&amp;quot; and indexing starts from 1, so subtract 2
   s = s.to_i() - 2
   # add to zero day
   JAN_1_1900 = Date.new(1900, 1, 1)
   return JAN_1_1900 + s
end
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="test-programs"&gt;
&lt;h2&gt;Test programs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="parsing-excel/excel-utils.rb"&gt;excel-utils.rb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="parsing-excel/test-parseexcel.rb"&gt;test-parseexcel.rb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="parsing-excel/test-spreadsheet.rb"&gt;test-spreadsheet.rb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="parsing-excel/test-roo.rb"&gt;test-roo.rb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="ruby"></category><category term="excel"></category><category term="programmning"></category></entry><entry><title>Creating a Hobo project</title><link href="http://www.agapow.net/programming/web-development/ruby-on-rails/creating-a-hobo-project/" rel="alternate"></link><published>2011-02-01T12:00:00+00:00</published><updated>2011-02-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2011-02-01:/programming/web-development/ruby-on-rails/creating-a-hobo-project/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://hobocentral.net"&gt;Hobo&lt;/a&gt; is a nifty thing, a better Rails than
Rails, but there are a number of small roadbumps to getting a project
started. This is a list of one possible way through the maze.&lt;/p&gt;
&lt;div class="section" id="assumptions"&gt;
&lt;h2&gt;Assumptions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You're working in a Unix-like environment&lt;/li&gt;
&lt;li&gt;For development purposes, you will be building a sandboxed …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://hobocentral.net"&gt;Hobo&lt;/a&gt; is a nifty thing, a better Rails than
Rails, but there are a number of small roadbumps to getting a project
started. This is a list of one possible way through the maze.&lt;/p&gt;
&lt;div class="section" id="assumptions"&gt;
&lt;h2&gt;Assumptions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You're working in a Unix-like environment&lt;/li&gt;
&lt;li&gt;For development purposes, you will be building a sandboxed ruby and
hobo installation in you home directory&lt;/li&gt;
&lt;li&gt;You are using the most recent stable version of Hobo (e.g. 1.0.x) and
not the Rails 3 candidates and not v1.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-the-ruby-version-manager"&gt;
&lt;h2&gt;Installing the Ruby Version Manager&lt;/h2&gt;
&lt;p&gt;This allows you to keep and run multiple versions of Ruby and different
libraries.&lt;/p&gt;
&lt;p&gt;Install rvm as per its website &amp;lt;&lt;a class="reference external" href="http://rvm.beginrescueend.com/"&gt;http://rvm.beginrescueend.com/&lt;/a&gt; &amp;gt;. This
requires that git is available:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% bash &amp;lt; &amp;lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="install-the-versions-of-ruby-you-need"&gt;
&lt;h2&gt;Install the versions of Ruby you need&lt;/h2&gt;
&lt;p&gt;1.9.2 is best:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% rvm install 1.9.2
&lt;/pre&gt;
&lt;p&gt;Follow the instructions to add this line to end of your .bash_profile,
so rvm can chnage the paths for all you Ruby interpreters and libraries:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; . &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;
# This loads RVM into a shell session.
&lt;/pre&gt;
&lt;p&gt;Source this file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% source ~/.bash_profile
&lt;/pre&gt;
&lt;p&gt;Test it is successfully installed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% type rvm | head -1 rvm is a function
&lt;/pre&gt;
&lt;p&gt;To use a particular version:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% rvm use 1.9.2
&lt;/pre&gt;
&lt;p&gt;To set this as the default version:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% rvm use --default 1.9.2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="install-libraries"&gt;
&lt;h2&gt;Install libraries&lt;/h2&gt;
&lt;p&gt;It's easiest to pin a version of Rails for use with Hobo:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% gem install --version &amp;quot;=2.3.10&amp;quot; rails
&lt;/pre&gt;
&lt;p&gt;Finally install hobo:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% gem install hobo
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-project"&gt;
&lt;h2&gt;Create the project&lt;/h2&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% hobo myproject
&lt;/pre&gt;
&lt;p&gt;Test it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% cd myproject % ./script/server - p 9124
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-application-components"&gt;
&lt;h2&gt;Creating application components&lt;/h2&gt;
&lt;p&gt;A resource is a database model (and table) with connected views and
controllers:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ./script/generate hobo_model_resource Trial title:string description:text
&lt;/pre&gt;
&lt;p&gt;A naked model is internal, it has no direct web interface:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ./script/generate hobo_model TrialParticipant relationship:string
&lt;/pre&gt;
&lt;p&gt;Controllers for static content (e.g. documentation pages, tools) can be
generated by using the Hobo front controller:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ./script/generate hobo_front_controller Docs
&lt;/pre&gt;
&lt;p&gt;After the creation of any tables, a migration must be generated and
used:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ./script/generate hobo_migration
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;The default Hobo installation uses sqlite as a database.&lt;/p&gt;
&lt;p&gt;For unclear reasons, sometimes rvm doesn't install sqlite as part of the
standard library. You may have to install it manually:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% gem install sqlite
&lt;/pre&gt;
&lt;p&gt;If the Hobo project creation errors or runs into problems, you will need
to delete and recreate it as not all the necessary infrastructure has
been created.&lt;/p&gt;
&lt;/div&gt;
</content><category term="ruby"></category><category term="web-development"></category><category term="ruby-on-rails"></category><category term="hobo"></category></entry><entry><title>write argument must be string</title><link href="http://www.agapow.net/programming/python/write-argument-must-be-string/" rel="alternate"></link><published>2011-01-01T12:00:00+00:00</published><updated>2011-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2011-01-01:/programming/python/write-argument-must-be-string/</id><summary type="html">&lt;p&gt;So I was writing a web application using WSGI and - after working for a
long time - it started erroring out with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
AssertionError: write() argument must be string
&lt;/pre&gt;
&lt;p&gt;from deep inside the WSGI handler. Now, this usually means that you're
returning unicode, which WSGI can't handle. However, it's quite happy
to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I was writing a web application using WSGI and - after working for a
long time - it started erroring out with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
AssertionError: write() argument must be string
&lt;/pre&gt;
&lt;p&gt;from deep inside the WSGI handler. Now, this usually means that you're
returning unicode, which WSGI can't handle. However, it's quite happy
to return a bytestream, so you can fix this by encoding your return from
the application function:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;dfgdfgfdg&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;.encode('utf-8')
response_headers = [
        ('Content-Type', 'text/html; charset=UTF-8'),
        ('Content-Length', str (len (x))),
]
start_response ('200 OK', response_headers)
return [x]
&lt;/pre&gt;
&lt;p&gt;Note how the return text is always sent as an item of a list. This is
because WSGI insists that you return an iterable, and if you send back a
naked string, it will iterate over each character.&lt;/p&gt;
&lt;p&gt;But still, I had an error. It was only when I tried to print out the
response text that I realised what was going on. I never got to the
print out point. In fact, I never got to the return from the application
function - because I was accidentally returning from earlier in the
function. Despite that return had no headers, WSGI errored out on its
type: unicode text. So, easily fixed.&lt;/p&gt;
</content><category term="python"></category><category term="unicode"></category><category term="wsgi"></category><category term="web-development"></category></entry><entry><title>Plotting &amp; Graphs for the web</title><link href="http://www.agapow.net/programming/web-development/plotting-graphs-for-the-web/" rel="alternate"></link><published>2010-12-01T12:00:00+00:00</published><updated>2010-12-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2010-12-01:/programming/web-development/plotting-graphs-for-the-web/</id><summary type="html">&lt;p&gt;In several recent projects, I've needed to produce graphs of various
epidemiological &amp;amp; bioinformatic datasets on demand in web applications.
Unfortunately, in the world of Ruby and Rails, the choices of toolkits
aren't as straightforward as hoped. This is a summary of the available
choices and what I found.&lt;/p&gt;
&lt;div class="section" id="background-assumptions"&gt;
&lt;h2&gt;Background &amp;amp; assumptions …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In several recent projects, I've needed to produce graphs of various
epidemiological &amp;amp; bioinformatic datasets on demand in web applications.
Unfortunately, in the world of Ruby and Rails, the choices of toolkits
aren't as straightforward as hoped. This is a summary of the available
choices and what I found.&lt;/p&gt;
&lt;div class="section" id="background-assumptions"&gt;
&lt;h2&gt;Background &amp;amp; assumptions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Must support box-and-whisker charts. User requirements.&lt;/li&gt;
&lt;li&gt;Must be guaranteed to preserve privacy of data, e.g. no rendering on
a remote platform. User privacy requirements (PII)&lt;/li&gt;
&lt;li&gt;Must work in a web environment and Rails&lt;/li&gt;
&lt;li&gt;Must work with Ruby&lt;/li&gt;
&lt;li&gt;Should be open and non-encumbered license-wise, e.g. no commercial
products, crippleware, limited versions. So that we have full access
to the code and may distribute the products without any problem.&lt;/li&gt;
&lt;li&gt;Should produce image graphs that can be copied and downloaded. Users
may want to copy grants for inclusion in reports. This rules out
Flash and Javascript-based solutions.&lt;/li&gt;
&lt;li&gt;Should be an active project and maintained. So there will be fewer
problems with incompatibility.&lt;/li&gt;
&lt;li&gt;Should require a minimal amount of customization. Less work, better
code quality.&lt;/li&gt;
&lt;li&gt;Should work with Ruby 1.8.6. That's what we develop with, although
deployment will be with a later version.&lt;/li&gt;
&lt;li&gt;Would like to avoid wonky or non-standard tech, e.g. anything
requiring a flash plugin or browser upgrades. Don't want another user
issue to manage.&lt;/li&gt;
&lt;li&gt;Would like to avoid installation of other requisite libraries, e.g.
ImageMagick. Less to install and maintain, less vulnerable points for
incompatibility.&lt;/li&gt;
&lt;li&gt;Would like to avoid commercial solutions, because of difficulties in
finding money and being able to share any sofwtare developed freely&lt;/li&gt;
&lt;li&gt;Would like a Ruby module to wrap any low level details if necessary&lt;/li&gt;
&lt;li&gt;Note there's a shifting landscape in browser capabilities, with more
recent browser version being mucgh more capable than others&lt;/li&gt;
&lt;li&gt;Note there's a wide body of possible local &amp;amp; remote users, i.e. not a
small group we can encourage to install a plugin.&lt;/li&gt;
&lt;li&gt;Note most users (including most of HPA) still have older versions of
Internet Explorer (e.g. v8 or earlier)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="possible-general-solutions"&gt;
&lt;h2&gt;Possible general solutions&lt;/h2&gt;
&lt;div class="section" id="svg-in-the-browser"&gt;
&lt;h3&gt;SVG in the browser&lt;/h3&gt;
&lt;p&gt;Generate and render SVG for direct display in the browser&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's easy to write&lt;/li&gt;
&lt;li&gt;It looks good and scales well&lt;/li&gt;
&lt;li&gt;It looks the same everywhere&lt;/li&gt;
&lt;li&gt;There's some nice toolkits (e.g. Raphael)&lt;/li&gt;
&lt;li&gt;Can be interactive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Before version 9, IE doesn't handle SVG at all&lt;/li&gt;
&lt;li&gt;Outside technical audiences, no one knows what to do with an SVG
file, and few of the general programs (e.g. Powerpoint) can handle
them. There are some clever export mechanisms that can convert in the
browser but that's extra work.&lt;/li&gt;
&lt;li&gt;You can use a plugin to get SVG rendering for IE, but a large number
of them are being discontinued or neglected. And you have to use a
plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Verdict:&lt;/strong&gt; no good, we have to support IE8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="canvas"&gt;
&lt;h3&gt;Canvas&lt;/h3&gt;
&lt;p&gt;Use the canvas element to draw pictures.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Similar comments to SVG&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Similar problems to SVG&lt;/li&gt;
&lt;li&gt;The full canvas element is a component of HTML5, which is implemented
in a very small number of recent browsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Verdict:&lt;/strong&gt; no good, we need to support legacy browsers&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="svg-behind-the-scenes"&gt;
&lt;h3&gt;SVG behind the scenes&lt;/h3&gt;
&lt;p&gt;Use SVG to make pictures and then convert to display format&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Get ease of use of SVG and downloadable pics&lt;/li&gt;
&lt;li&gt;Easy to change size / resolution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Need a converter. Deal with the install headache of ImageMagick?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Verdict:&lt;/strong&gt; maybe&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="javascript-in-the-browser"&gt;
&lt;h3&gt;Javascript in the browser&lt;/h3&gt;
&lt;p&gt;Clever drawing solution using JS that make pretty pictures (e.g. Plotr,
Raphael)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Looks nice&lt;/li&gt;
&lt;li&gt;Some are interactive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Can't save directly&lt;/li&gt;
&lt;li&gt;Entails working at least a little bit in Javascript, so do we want to
bring another language / development mode into the mix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Verdict:&lt;/strong&gt; probably not&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="google-visualization-charts"&gt;
&lt;h3&gt;Google Visualization &amp;amp; Charts&lt;/h3&gt;
&lt;p&gt;Various Google javascript intermediated tools for graphing.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Looks nice&lt;/li&gt;
&lt;li&gt;API fairly straightforward&lt;/li&gt;
&lt;li&gt;A number of gems for using this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Works by calling and sending data to the Google mothership, a big
privacy no-no&lt;/li&gt;
&lt;li&gt;From experience, converting all data into another language layer
(JSON) is a bit irritating&lt;/li&gt;
&lt;li&gt;Unclear if we can save images&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Verdict:&lt;/strong&gt; not at the moment&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="call-external-program-serverside"&gt;
&lt;h3&gt;Call external program serverside&lt;/h3&gt;
&lt;p&gt;Various and diverse methods that call some commandline thing on the
server like MetaPost or GnuPlot, capture result and return to browser.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Proven rendering solution&lt;/li&gt;
&lt;li&gt;Delivers right format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Another component in the system to go wrong&lt;/li&gt;
&lt;li&gt;Have to deliver data to external program somehow&lt;/li&gt;
&lt;li&gt;Privacy concerns mean we have to careful with any saved files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Verdict:&lt;/strong&gt; a bit too fiddly, hope to avoid&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fucking-flash"&gt;
&lt;h3&gt;Fucking Flash&lt;/h3&gt;
&lt;p&gt;Flash-based solutions.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Can look nice&lt;/li&gt;
&lt;li&gt;Can be interactive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have to ensure users have plugins&lt;/li&gt;
&lt;li&gt;Don't necessarily have an image export capability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Verdict:&lt;/strong&gt; no&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="specific-solutions"&gt;
&lt;h2&gt;Specific solutions&lt;/h2&gt;
&lt;div class="section" id="protovis"&gt;
&lt;h3&gt;Protovis&lt;/h3&gt;
&lt;p&gt;A server-side library for building graphics and visualizations.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Very nice looking&lt;/li&gt;
&lt;li&gt;There's a lot of smartness in how graphs are built - scaling data to
the size of the axes, overlaying charts, etc.&lt;/li&gt;
&lt;li&gt;Does lots of different types of charts&lt;/li&gt;
&lt;li&gt;There's a Ruby wrapper for it, RubyVis&lt;/li&gt;
&lt;li&gt;General drawing toolkit&lt;/li&gt;
&lt;li&gt;Implementation of protovis&lt;/li&gt;
&lt;li&gt;Still calls REXML&lt;/li&gt;
&lt;li&gt;1.8.7 minmum&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Really, truly is a toolkit. Just to do a simple barchart, you'll have
to write a lot of code. There's no “barchart()” or “scatter_graph()”
functions.&lt;/li&gt;
&lt;li&gt;Produces SVG, so you have the conversion problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="highcharts"&gt;
&lt;h3&gt;Highcharts&lt;/h3&gt;
&lt;p&gt;A free-for-non-commercial javascript based toolkit.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lots of graph types, looks good.&lt;/li&gt;
&lt;li&gt;Has an export module for saving graphics as bitmaps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have to encode data for Javascript.&lt;/li&gt;
&lt;li&gt;Ruby gem is for rails 3+&lt;/li&gt;
&lt;li&gt;Export requires either using public remote service or running your
own&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="fusioncharts"&gt;
&lt;h3&gt;Fusioncharts&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Flash&lt;/li&gt;
&lt;li&gt;Nice charts&lt;/li&gt;
&lt;li&gt;&amp;quot;Fusioncharts Free&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="amcharts"&gt;
&lt;h3&gt;amCharts&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Flash&lt;/li&gt;
&lt;li&gt;Nice charts&lt;/li&gt;
&lt;li&gt;&amp;quot;the only limitation of the free version ...&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="open-flash-chart"&gt;
&lt;h3&gt;Open Flash Chart&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Free&lt;/li&gt;
&lt;li&gt;It's still flash&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="anychart"&gt;
&lt;h3&gt;Anychart&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Flash&lt;/li&gt;
&lt;li&gt;&amp;quot;download trial versions&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="seer"&gt;
&lt;h3&gt;Seer&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Wraps Google visualization API&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Highcharts&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Uses javascript&lt;/li&gt;
&lt;li&gt;Nice charts &amp;amp; hints&lt;/li&gt;
&lt;li&gt;Has ruby library&lt;/li&gt;
&lt;li&gt;&amp;quot;free for non-commercial uses&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rifgraf"&gt;
&lt;h3&gt;Rifgraf&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;For timeline / progressive data&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="gruff"&gt;
&lt;h3&gt;Gruff&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;Nice looking graphs&lt;/li&gt;
&lt;li&gt;Require imagemagick&lt;/li&gt;
&lt;li&gt;No box and whisker plots&lt;/li&gt;
&lt;li&gt;Active as of September 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="scruffy"&gt;
&lt;h3&gt;Scruffy&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;Status unclear, dead since 2009? Looks like there's a very recent
fork.&lt;/li&gt;
&lt;li&gt;No box and whisker plots&lt;/li&gt;
&lt;li&gt;USes SVG internally&lt;/li&gt;
&lt;li&gt;Says charts can be added&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rgplot"&gt;
&lt;h3&gt;RGPlot&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;Uses gnuplot. Seriously?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prawngraphs"&gt;
&lt;h3&gt;Prawngraphs&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;Render to pdf&lt;/li&gt;
&lt;li&gt;A little thin on documentation and demos&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rchart"&gt;
&lt;h3&gt;rchart&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;&amp;quot;A port of PChart&amp;quot;&lt;/li&gt;
&lt;li&gt;Requires gd&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="statsample"&gt;
&lt;h3&gt;statsample&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;A large toolkit for analysing and plotting population data&lt;/li&gt;
&lt;li&gt;Many dependcies or included libraries&lt;/li&gt;
&lt;li&gt;Calls rubyvis which calls rexml/formatter/default which doesn't exist
in Ruby 1.8.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="gerbilcharts"&gt;
&lt;h3&gt;gerbilcharts&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;For time series data&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lilygraph"&gt;
&lt;h3&gt;lilygraph&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ruby serverside library&lt;/li&gt;
&lt;li&gt;Lightly documented&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="svg-graph"&gt;
&lt;h3&gt;SVG::Graph&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General drawing toolkit&lt;/li&gt;
&lt;li&gt;Uses SVG&lt;/li&gt;
&lt;li&gt;Can render SVG &amp;amp; PNG&lt;/li&gt;
&lt;li&gt;Graph choice is a little thin?&lt;/li&gt;
&lt;li&gt;Loads, at least&lt;/li&gt;
&lt;li&gt;Uses Rexml but seems fine with Ruby 1.8.6 version&lt;/li&gt;
&lt;li&gt;Still have to export to an image via something like RMagick&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="processing"&gt;
&lt;h3&gt;Processing&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General visualization toolkit&lt;/li&gt;
&lt;li&gt;For interactive / compiled visualisations&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rmagick"&gt;
&lt;h3&gt;RMagick&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General drawing toolkit&lt;/li&gt;
&lt;li&gt;Draw the images yourself?&lt;/li&gt;
&lt;li&gt;RMagick has RVG, an SVG like drawing API&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rendersvg"&gt;
&lt;h3&gt;Rendersvg&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General drawing toolkit&lt;/li&gt;
&lt;li&gt;No examples&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;REXML and Image/GraghicMagick turned out to be a major problem.
Several of the libraries have major (and differing) version
dependencies which turns into a big ball of conflicting requirements
quickly.&lt;/li&gt;
&lt;li&gt;REXML cannot be downloaded and installed locally, which would patch
protovis&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;There's a lot of choices out there. But in my case, there's not a lot of
good choices. The (what I would hold is reasonable) desire to avoid
flash or commercial solutions lops off a good proportion of choices. The
(unavoidable due to privacy concerns and users wanting to download
graphs as images) need to generate all charts on the server excludes
several nice javascript solutions. With what remains, you're confronted
by three big problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The selection of graph types generated is often poor&lt;/li&gt;
&lt;li&gt;The libraries rely on ImageMagick and (thus) Rmagick, which are a
pain to install (e.g. &amp;quot;unexpected segmentation fault at ...&amp;quot;)&lt;/li&gt;
&lt;li&gt;You get caught up in the Ruby dependency and versioning hell, where
the sum of libraries required force a narrow window of versions of
other libraries, which in turn constrains what you can do elsewhere
in the application and makes hosting the application a pain (e.g. one
of your apps needs ruby 1.8.7 and &lt;em&gt;these&lt;/em&gt; libraries, while another
needs 1.9.2 and &lt;em&gt;these&lt;/em&gt; other libraries)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, it sucks. I've cobbled together some graphs with RubyVis (nice
output but needed a lot of code) and done some work with Gruff
(simpler), with both needing ImageMagick in the background. This is much
harder than it should be.&lt;/p&gt;
&lt;/div&gt;
</content><category term="plotting"></category><category term="graphs"></category><category term="web-development. visualisation"></category></entry><entry><title>Rubyvis</title><link href="http://www.agapow.net/programming/ruby/rubyvis/" rel="alternate"></link><published>2010-05-14T12:00:00+01:00</published><updated>2010-05-14T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2010-05-14:/programming/ruby/rubyvis/</id><summary type="html">&lt;p&gt;If you need to draw a custom graph type in Ruby, there's a few problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There's only a modest number of graphing libraries&lt;/li&gt;
&lt;li&gt;You don't have to go to far for your graph type to not be covered by
these&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which leaves you few choices. You could manually draw it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you need to draw a custom graph type in Ruby, there's a few problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There's only a modest number of graphing libraries&lt;/li&gt;
&lt;li&gt;You don't have to go to far for your graph type to not be covered by
these&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which leaves you few choices. You could manually draw it in a graphics
library (hard). You could do a call to R to draw it (ugh). Or you could
opt for Rubyvis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rubyvis&lt;/strong&gt; is a port of the Protovis javascript library, which is
well-known for producing lush illustrations, and captures most of
Protovis' power. However, there are some hard lessons to learn.&lt;/p&gt;
&lt;p&gt;Rubyvis / protovis are not libraries of functions that produce graphs
and charts but libraries of functions you can use for writing your own
code to draw graphs and charts. There's no off-the-shelf solution for a
scatter plot or bar chart, for example. You're going to be laying it all
out for yourself, albeit with the help of the toolkit.&lt;/p&gt;
&lt;p&gt;Further, Rubyvis isn't a complete port. In fact, in places you can still
find partially translated Javascript that uses Javascript interfaces.
For example, if your data is dates, it may fail when Rubyvis tries to
access the&amp;nbsp;JS&amp;nbsp;date functions rather than Ruby ones. (That's “may”.
Depending on your data, you may not encounter that section of the
toolkit.)&lt;/p&gt;
&lt;p&gt;You can get around the date problem with a little cleverness. Translate
your dates into integers and when it comes time to doing labels, your
formatting function should translate these back and format them
appropriately. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
epoch = Date.new(1970,1,1)
new_series = data.collect { |r|
   (p[0] - epoch).to_i, p[1]
}
...
my_panel.add(pv.Label).text(lambda { |d|
      (epoch + d).strftime(&amp;quot;%m/%d&amp;quot;)
   }
)
&lt;/pre&gt;
&lt;p&gt;Another you might encounter is with log axes. The following line
produces an axes that runs from 0 to 1000 and draws it within 200
pixels:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vert = pv.Scale.linear(0, 1000).range(0, 200)
&lt;/pre&gt;
&lt;p&gt;Simply convert this into a log scale and it will error out as it tries
to find the log of 0:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vert = pv.Scale.log(0, 1000).range(0, 200)
&lt;/pre&gt;
&lt;p&gt;Logical, but if we're trying to map data running better 0 and 1000, we
need a better answer. I suggest setting the bottom end just slightly off
zero, depending on your data:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vert = pv.Scale.log(0.01, 1000).range(0, 200)
&lt;/pre&gt;
&lt;p&gt;But at the end of this you end up with SVG. What do you do? Well, you could use RMagick - &lt;a class="reference external" href="can-i-use-rmagick"&gt;if it will install&lt;/a&gt;. You could go outside of Ruby and use Cairo. Or you could call the commandline program &lt;em&gt;rsvg&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% rsvg foo.svg foo.png
&lt;/pre&gt;
</content><category term="ruby"></category><category term="programming"></category><category term="visualisation"></category><category term="plotting"></category></entry><entry><title>Can't use print</title><link href="http://www.agapow.net/programming/python/cant-use-print/" rel="alternate"></link><published>2010-03-14T12:00:00+00:00</published><updated>2010-03-14T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2010-03-14:/programming/python/cant-use-print/</id><summary type="html">&lt;p&gt;Who would of thunk it? &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; is a reserved word everywhere.&lt;/p&gt;
&lt;p&gt;Perhaps this is buried in some specification, but it seems that you
can't use &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; as the name of a method of a class. (It makes sense you
can't override the global name, but in an object? Perhaps it's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Who would of thunk it? &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; is a reserved word everywhere.&lt;/p&gt;
&lt;p&gt;Perhaps this is buried in some specification, but it seems that you
can't use &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; as the name of a method of a class. (It makes sense you
can't override the global name, but in an object? Perhaps it's
idiotproofing or preparing for the day when you don't have to use self.)
An example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class A:
   def print (self):
      &amp;quot;&amp;quot;&amp;quot;
      At compile, python throws a `SyntaxError: invalid syntax`
      just after the 'print' token.
      &amp;quot;&amp;quot;&amp;quot;
      print &amp;quot;This is self.print&amp;quot;
&lt;/pre&gt;
</content><category term="python"></category><category term="programming"></category></entry><entry><title>Getting the name of something</title><link href="http://www.agapow.net/programming/python/getting-the-name-of-something/" rel="alternate"></link><published>2009-10-01T12:00:00+01:00</published><updated>2009-10-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2009-10-01:/programming/python/getting-the-name-of-something/</id><summary type="html">&lt;p&gt;Recently, I had the need to get an informative name from a range of
Python objects for generating a useful error message. Where problems
started was that these objects could include classes (new-style and
old), functions, lambdas and built-in types. And here the logic started
getting tricky.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To get the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Recently, I had the need to get an informative name from a range of
Python objects for generating a useful error message. Where problems
started was that these objects could include classes (new-style and
old), functions, lambdas and built-in types. And here the logic started
getting tricky.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To get the name of the class of an object, you can use
&lt;tt class="docutils literal"&gt;obj.__class__.__name__&lt;/tt&gt;. But these could be the classes
themselves.&lt;/li&gt;
&lt;li&gt;Likewise, the class of primitive types (&lt;tt class="docutils literal"&gt;int&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;float&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;str&lt;/tt&gt;, etc.)
is type, which is uninformative&lt;/li&gt;
&lt;li&gt;Functions have an attribute &lt;tt class="docutils literal"&gt;func_name&lt;/tt&gt;, that could be useful&lt;/li&gt;
&lt;li&gt;Lambda's don't have any useful attribute for this at all, of course,
because they are anonymous functions.&lt;/li&gt;
&lt;li&gt;Googling for a solution brings a whole host of overly complicated and
incomplete answers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The solution is easy: almost everything answers to &lt;tt class="docutils literal"&gt;__name__&lt;/tt&gt;. So we
can do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# variable is 'totype'
type_name = None
if hasattr (to_type, '__name__'):
   type_name = getattr (totype, '__name__')
   # lambdas and all others require name be explicitly supplied
   assert (type_name not in [None, '&amp;lt;lambda&amp;gt;']), \
      &amp;quot;type validator requires type name for lambda&amp;quot;
&lt;/pre&gt;
</content><category term="programming"></category><category term="python"></category></entry><entry><title>Epydoc go boom</title><link href="http://www.agapow.net/programming/python/epydoc-go-boom/" rel="alternate"></link><published>2009-09-14T12:56:00+01:00</published><updated>2009-09-14T12:56:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2009-09-14:/programming/python/epydoc-go-boom/</id><summary type="html">&lt;p&gt;So, epydoc used to be the neatest and bestest documentation tool
available for Python. It produced documentation from introspecting code
and thus was the easiest way to the most accurate API documentation.
However, it looks like the project has been abandoned. Attempts to run
it over code result in sometimes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, epydoc used to be the neatest and bestest documentation tool
available for Python. It produced documentation from introspecting code
and thus was the easiest way to the most accurate API documentation.
However, it looks like the project has been abandoned. Attempts to run
it over code result in sometimes odd and cryptic failures:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% epydoc --html -o docs/api/html -v --debug qanda.validators ...
File /home/f0/paul/Projects/Py-qanda/qanda/validators.py, line 53,
in qanda.validators.BaseValidator.__call__
Warning: Lines 58, 59, 62: Improper paragraph indentation. ...
&lt;/pre&gt;
&lt;p&gt;This improper indentation error seems to happen to me a lot. Fix it by
forcing the documentation to be interpreted as restructured text on the
commandline:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% epydoc --html -o docs/api/html -v --debug \
        --docformat=restructuredtext qanda.validators
&lt;/pre&gt;
&lt;p&gt;or in the files themselves:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
__docformat__ = &amp;quot;restructuredtext en&amp;quot;
&lt;/pre&gt;
&lt;p&gt;If your documentation actually is in restructured text, that is. This
may reveal the next level of bug:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% epydoc --html -o docs/api/html -v --docformat=restructuredtext \
        --debug qanda.validators
Traceback (most recent call last):
Parsing docstrings:
File &amp;quot;/home/f0/paul/Installed/bin/epydoc&amp;quot;, line 5, in &amp;lt;module&amp;gt; pkg_resources.run_script('epydoc==3.0.1', 'epydoc')
...
File &amp;quot;/lib/python2.6/site-packages/epydoc-3.0.1-py2.6.egg/epydoc/markup/restructuredtext.py&amp;quot;, line 307, in visit_paragraph
m = self._SUMMARY_RE.match(child.data)
AttributeError: 'Text' object has no attribute 'data'
&lt;/pre&gt;
&lt;p&gt;The easy solution, as revealed on StackOverflow is to edit the offending
line to catch the error:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# markup/restructuredtext.py, line 307
&amp;lt; &amp;nbsp; m = self._SUMMARY_RE.match(child.data)
---
&amp;gt; &amp;nbsp; try:
&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;m = self._SUMMARY_RE.match(child.data)
&amp;gt; &amp;nbsp; except AttributeError:
&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;m = None
&lt;/pre&gt;
&lt;p&gt;And here's to hoping that someone picks up the project and modernizes
it.&lt;/p&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/6704770/epydoc-attributeerror-text-object-has-no-attribute-data"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="documentation"></category><category term="epydoc"></category><category term="tool"></category></entry><entry><title>How to stop output and printing</title><link href="http://www.agapow.net/programming/python/how-to-stop-output-and-printing/" rel="alternate"></link><published>2009-07-11T12:00:00+01:00</published><updated>2009-07-11T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2009-07-11:/programming/python/how-to-stop-output-and-printing/</id><summary type="html">&lt;p&gt;Let me explain: Ete2, a Python module for representing phylogenies, has
a number of dependencies (MySQLdb, Numpy, PyQt, etc.) that it doesn’t
necessarily need and it can be installed without them. If you don’t use
the associated functionality, you won’t need these dependencies. But,
irritatingly, ete2 tries …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let me explain: Ete2, a Python module for representing phylogenies, has
a number of dependencies (MySQLdb, Numpy, PyQt, etc.) that it doesn’t
necessarily need and it can be installed without them. If you don’t use
the associated functionality, you won’t need these dependencies. But,
irritatingly, ete2 tries to import them anyway at the root level. If
they are not present, it catches the ImportError and and write warning
messages to stdout and stderr for each one, So ete2 is imported
successfully, but with the clutch of error statements:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import ete2
Clustering module could not be loaded
No module named numpy
MySQLdb module could not be loaded
No module named MySQLdb
Treeview module could not be loaded
No module named PyQt4.QtGui
&lt;/pre&gt;
&lt;p&gt;which is cosmetically irritating and problematic is you’re catching all
the output from a process (like in a CGI environment). So output has to
be temporarily silenced.&lt;/p&gt;
&lt;p&gt;We can silent output by reassigning the stderr and stdout members of the
sys module to /dev/null. Of course, you should revert the assignment
afterwards or you’ll be killing any future output of your program.
Remember to flush the handles to clear any outstanding data. The
solution below is written as a Python context manager, although it could
be easily written in a more procedural way:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import os, sys

class SuppressAllOutput (object):
   def __enter__(self):
      sys.stderr.flush()
      self.old_stderr = sys.stderr
      sys.stderr = open('/dev/null', 'a+', 0)
      sys.stdout.flush()
      self.old_stdout = sys.stdout
      sys.stdout = open('/dev/null', 'a+', 0)

   def __exit__(self, exc_type, exc_value, traceback):
      sys.stderr.flush()
      sys.stderr = self.old_stderr
      sys.stdout.flush()
      sys.stdout = self.old_stdout

print &amp;gt;&amp;gt;sys.stdout, &amp;quot;printing to stdout before suppression&amp;quot;
print &amp;gt;&amp;gt;sys.stderr, &amp;quot;printing to stderr before suppression&amp;quot;

with SuppressAllOutput():
   import ete2
   print &amp;gt;&amp;gt;sys.stdout, &amp;quot;printing to stdout during suppression&amp;quot;
   print &amp;gt;&amp;gt;sys.stderr, &amp;quot;printing to stderr during suppression&amp;quot;

print &amp;gt;&amp;gt;sys.stdout, &amp;quot;printing to stdout after suppression&amp;quot;
print &amp;gt;&amp;gt;sys.stderr, &amp;quot;printing to stderr after suppression&amp;quot;
&lt;/pre&gt;
</content><category term="programming"></category><category term="python"></category></entry><entry><title>Applescript via Python</title><link href="http://www.agapow.net/programming/python/applescript-via-python/" rel="alternate"></link><published>2009-03-01T12:00:00+00:00</published><updated>2009-03-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2009-03-01:/programming/python/applescript-via-python/</id><summary type="html">&lt;p&gt;Over the years, Apple has fallen in and out of love with Applescript,
its &amp;quot;official&amp;quot; scripting language for MacOS. True, Applescript isn't
going to go away any day now and true, it is a very simple language and
easy to use. But if you don't want to have to learn …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the years, Apple has fallen in and out of love with Applescript,
its &amp;quot;official&amp;quot; scripting language for MacOS. True, Applescript isn't
going to go away any day now and true, it is a very simple language and
easy to use. But if you don't want to have to learn a new language just
to manipulate MacOS, and want to something fully-powered, there is a
choice. &lt;a class="reference external" href="http://appscript.sourceforge.net/"&gt;appscript&lt;/a&gt; is a Python interface to Applescript, giving all
the power of AS in neat pythonic code::&lt;/p&gt;
&lt;pre class="literal-block"&gt;
app('TextEdit').documents['Read Me'].paragraphs[1].get()
&lt;/pre&gt;
&lt;p&gt;appscript is - for the most part - well documented. The developer also
supplies two utilities for interrogating application dictionaries (the
Applescript interface they provide) and translating Applescript into
appscript Python. Unfortunately:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some applications don't implement an Applescript interface.&lt;/li&gt;
&lt;li&gt;The translation utility doesn't recognise some common Applescript
commands and idioms.&lt;/li&gt;
&lt;li&gt;Some of the advice found on the web for solving some appscript
problems is flat-out wrong. (My guess is that the advisors either
didn't test their solutions or the API has changed.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This short script demonstrates appscript and shows&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;I have a list of &amp;quot;to do&amp;quot; items, extracted from an &lt;a class="reference external" href="http://bargiel.home.pl/"&gt;organiser program&lt;/a&gt;
into a different program, &lt;a class="reference external" href="http://www.culturedcode.com/things/"&gt;Things&lt;/a&gt;. Unfortunately, Things doesn't have
an Applescript interface. Nor does it have an import facility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;On the Things forums, Karel provided &lt;a class="reference external" href="http://culturedcode.com/things/forums/read.php?3,2926,4890,page=2#msg-4890"&gt;two Applescripts for converting
mail messages into Things todos&lt;/a&gt; and was kind enough to supply &lt;a class="reference external" href="http://idisk.mac.com/karelgil-Public/Scripts.zip"&gt;the
source&lt;/a&gt;. The below is largely based upon them. I munged my input into a
simple text file, with an item per line. This is the file 'igtd.out'
below:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from appscript import *
import os, time

# build the list of input items
infile = open ('igtd.out', 'r')
items = [x.strip() for x in infile]

# get the application and bring it to the front
things_app = app('Things')
things_app.activate()
# move selection to the inbox
time.sleep (1)
app('System Events').keystroke('0', using=[k.command_down, k.option_down])
for item in items:
   # create a new item
   app('System Events').keystroke('n', using=k.command_down)
   time.sleep(1)
   # copy text to clipboard
   os.popen('pbcopy','w').write(item)
   # paste into new item
   app('System Events').keystroke('v', using=k.command_down)
   time.sleep(1)
   # hit return to close item
   app('System Events').keystroke('r')
   time.sleep(1)
&lt;/pre&gt;
&lt;p&gt;Some explanations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;This mimics an user creating a todo item in Things by:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Moving to Things inbox (command-option-0)&lt;/li&gt;
&lt;li&gt;Creating a new item (command-N)&lt;/li&gt;
&lt;li&gt;Pasting some text in (command-V)&lt;/li&gt;
&lt;li&gt;Hitting return to close the item.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Between actions, a wait may be required to allow the previous action
to taken effect. In the original script, this was accomplished with
the Applescript command &lt;tt class="docutils literal"&gt;delay 1&lt;/tt&gt; and a timeout. appscript can't
translate delay but the python equivalent is &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt;. The 1 second
given is plenty, and probably can be reduced or even eliminated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sending keystrokes to the front application can be done with
app('System Events').keystroke(KEY, using=MODS) where &lt;em&gt;KEY&lt;/em&gt; is the
keystroke and &lt;em&gt;MODS&lt;/em&gt; is either a single or sequence of key modifiers.
The key modifiers are constants in the k subpackage of appscript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Text can be written to the system clipboard with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
os.popen('pbcopy', 'w').write(item)
&lt;/pre&gt;
&lt;p&gt;where ITEM is the text in question.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;app('System Events').keystroke('r')&lt;/em&gt; is the equivalent of hitting
the return key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category><category term="applescript"></category></entry><entry><title>SQLAlchemy merge and relations</title><link href="http://www.agapow.net/programming/python/sqlalchemy-merge-and-relations/" rel="alternate"></link><published>2009-01-15T12:00:00+00:00</published><updated>2009-01-15T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2009-01-15:/programming/python/sqlalchemy-merge-and-relations/</id><summary type="html">&lt;p&gt;In which an oddity in SQLAlchemy is spotted, and it turns out to be a
bug not a misunderstanding.&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The merge function in SQLAlchemy lets an object seem to get pushed to
the database, but actually stores and returns a copy of the object. This
is handy for when …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In which an oddity in SQLAlchemy is spotted, and it turns out to be a
bug not a misunderstanding.&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The merge function in SQLAlchemy lets an object seem to get pushed to
the database, but actually stores and returns a copy of the object. This
is handy for when you are mixing persistent and non-persistent objects.
Unfortunately, as of version 4.2, there's a weird bug that can result if
you use related objects. This page serves to document this bug, in case
anyone else runs across it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="symptoms"&gt;
&lt;h2&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;Merged objects with other object joined by a relation using
backrefs, show those 'child' objects twice. A condensed demonstration -
the names of the mapped objects and tables are unimportant, but a
Biosequence has a one-to-many with a set of Annotations, established by
a backref:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from sqlalchemy import *
from sqlalchemy.orm import *

metadata = MetaData()

class Biosequence (object):
   pass

class Annotation (object):
   pass

table_biosequences = Table ('biosequences',
   metadata,
   Column ('identifier', Integer(), primary_key=True),
   Column ('dummy', String(16)),
)

table_seqannotations = Table ('seqannotations',
   metadata,
   Column ('identifier', Integer(), primary_key=True),
   Column ('biosequence_id', Integer(), ForeignKey ('biosequences.identifier')),
)

mapper (Annotation, table_seqannotations)

mapper (Biosequence, table_biosequences,
   properties={
      'annotations':relation ( Annotation,
         backref='biosequence_ref',
         lazy=False,
         cascade=&amp;quot;all, delete, delete-orphan&amp;quot;,
      ),
   },
)

engine = create_engine (
   'sqlite:///',
   convert_unicode=True,
)
sessionfactory = sessionmaker (
   bind=engine,
   autoflush=False,
   transactional=False
)
session = sessionfactory()
metadata.create_all (bind=engine, checkfirst=True)

# make an object with 3 'children'
bseq = Biosequence()
anns = [Annotation() for x in range (3)]
bseq.annotations = anns

print &amp;quot;Original num of anns:&amp;quot;, len (bseq.annotations)

# the merged copy has 6 children
merge_bseq = session.merge (bseq)
session.flush()
print &amp;quot;Now num of anns still:&amp;quot;, len (bseq.annotations)
print &amp;quot;Ids:&amp;quot;, [x.identifier for x in bseq.annotations]
print &amp;quot;Merged copy num of anns:&amp;quot;, len (merge_bseq.annotations)
print &amp;quot;Ids:&amp;quot;, [x.identifier for x in merge_bseq.annotations]

# as does the return!
results = session.query (Biosequence)
print &amp;quot;Number of results&amp;quot;, results.count()
returned_bseq = results.one()
print &amp;quot;Returned num of anns:&amp;quot;, len (returned_bseq.annotations)
print &amp;quot;Ids:&amp;quot;, [x.identifier for x in returned_bseq.annotations]

# make an new object with 3 children
bseq2 = Biosequence()
bseq2.annotations = [Annotation() for x in range (3)]

print &amp;quot;New obj num of anns:&amp;quot;, len (bseq.annotations)
session.save_or_update (bseq2)
session.flush()
# and it works as expected
results = session.query (Biosequence)
print &amp;quot;Number of retreived objects&amp;quot;, results.count()
returned_bseqs = results.all()
for item in returned_bseqs:
   print &amp;quot;Returned num of anns:&amp;quot;, len (item.annotations)
   print &amp;quot;Ids:&amp;quot;, [x.identifier for x in item.annotations]
&lt;/pre&gt;
&lt;p&gt;Which returns:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Original num of anns: 3
Now num of anns still: 3
Ids: [None, None, None]
Merged copy num of anns: 6
Ids: [1, 1, 2, 2, 3, 3]
Number of results 1
Returned num of anns: 6
Ids: [1, 1, 2, 2, 3, 3]
New obj num of anns: 3
Number of retreived objects 2
Returned num of anns: 6
Ids: [1, 1, 2, 2, 3, 3]
Returned num of anns: 3
Ids: [4, 5, 6]
&lt;/pre&gt;
&lt;p&gt;In summary: if an object is stored using &lt;tt class="docutils literal"&gt;save_or_update&lt;/tt&gt;, when later
retrieved, it has the correct number of related children. If merged, the
returned merge copy has each child twice. If this object is retrieved
later, it still has every child twice. Looking at the db, the correct
number of child rows is being stored and the relations are correct.&lt;/p&gt;
&lt;p&gt;To illustrate, this is the original Biosequence's annotations:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Annotation, id 1&lt;/li&gt;
&lt;li&gt;Annotation, id 2&lt;/li&gt;
&lt;li&gt;Annotation, id 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is what the annotations of the merged copy and later retrieved
merges look like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Annotation, id 1&lt;/li&gt;
&lt;li&gt;Annotation, id 1&lt;/li&gt;
&lt;li&gt;Annotation, id 2&lt;/li&gt;
&lt;li&gt;Annotation, id 2&lt;/li&gt;
&lt;li&gt;Annotation, id 3&lt;/li&gt;
&lt;li&gt;Annotation, id 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="technical-details"&gt;
&lt;h2&gt;Technical details&lt;/h2&gt;
&lt;p&gt;Python 2.5, SqlAlchemy 4.2-ish, Mac OSX.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="result"&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;Thanks to the super-efficient Michael Bayer, this bug will be fixed in
4.3 and apparently can be avoided by just not using the backref.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="programming"></category><category term="database"></category><category term="orm"></category><category term="sqlalchem"></category><category term="imported"></category></entry><entry><title>The etree tail quirk</title><link href="http://www.agapow.net/programming/python/the-etree-tail-quirk/" rel="alternate"></link><published>2009-01-01T12:00:00+00:00</published><updated>2009-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2009-01-01:/programming/python/the-etree-tail-quirk/</id><summary type="html">&lt;p&gt;How to make a good XML solution for Python better.&lt;/p&gt;
&lt;p&gt;Python was late to adopt XML and even then the libraries provided
weren't as powerful or easy to use as those available elsewhere.
Fortunately, with Python 2.5, a subset of the
&lt;a class="reference external" href="http://effbot.org/zone/element-index.htm"&gt;ElementTree&lt;/a&gt; library was
incorporated into the standard library …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How to make a good XML solution for Python better.&lt;/p&gt;
&lt;p&gt;Python was late to adopt XML and even then the libraries provided
weren't as powerful or easy to use as those available elsewhere.
Fortunately, with Python 2.5, a subset of the
&lt;a class="reference external" href="http://effbot.org/zone/element-index.htm"&gt;ElementTree&lt;/a&gt; library was
incorporated into the standard library as
&lt;a class="reference external" href="http://docs.python.org/lib/module-xml.etree.ElementTree.html"&gt;xml.etree&lt;/a&gt;.
Less fortunately, etree has its own quirks. One of these is to do with
the handling of text within nodes.&lt;/p&gt;
&lt;p&gt;If you're dealt with XML, you'd know that an XML element may contain
text, which some XML parsers will (sensibly) interpret as the value for
that element. In this example, the name element has Truman Capote as its
value:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;name&amp;gt;Truman Capote&amp;lt;/name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;It can also contain other elements, which are treated as children of the
parent element. Here name has the child elements first and last:&lt;/p&gt;
&lt;blockquote&gt;
&amp;lt;name&amp;gt;&amp;lt;first&amp;gt;Truman&amp;lt;/first&amp;gt;&amp;lt;last&amp;gt;Capote&amp;lt;/last&amp;gt;&amp;lt;/name&amp;gt;&lt;/blockquote&gt;
&lt;p&gt;It can also do both:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;credit&amp;gt;The novel was written by &amp;lt;name&amp;gt;Truman Capote&amp;lt;/name&amp;gt; in
1965&amp;lt;/credit&amp;gt;
&lt;/pre&gt;
&lt;p&gt;In this case, what should the &amp;quot;value&amp;quot; of the parent element be? Should
it be The novel was written by? This is logical, but should it also
include the child element? And what about the trailing in 1965? That
clearly belongs to the root credit, but it can't be part of the value
without the intervening name element. The question of children is also
complicated. If name is the only child, it removes it from its context
within the surrounding text.&lt;/p&gt;
&lt;p&gt;What is the correct way to handle this? In Python, xml.minidom treats
text as a child element (actually &amp;quot;text node&amp;quot;) in itself, as does the
HTML DOM. This seems logical and orthogonal. The ordering and
relationship of children is preserved. A node's &amp;quot;value&amp;quot; can either not
be used (just look at terminal text nodes), or interpreted as the sum of
all child nodes, or applies only when there is a single child that is
text. Thus the above XML fragment renders as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;credit&amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Text node &amp;quot;The novel was written by &amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;name&amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Text node &amp;quot;Truman Capote&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Text node &amp;quot; in 1965&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a more consistent approach. The nature of a child node shouldn't
change depending on other child nodes (other siblings). Yet this is what
is exactly what happens with etree. Consider two XML fragments:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; frag1 = &amp;quot;&amp;lt;tag1&amp;gt;ABCD&amp;lt;/tag1&amp;gt;&amp;quot;
&amp;gt;&amp;gt;&amp;gt; frag2 = &amp;quot;&amp;lt;tag1&amp;gt;&amp;lt;tag2/&amp;gt;ABCD&amp;lt;/tag1&amp;gt;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;When using minidom, in both cases the text ABCD is rendered as a text
node:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import xml.dom.minidom as minidom
&amp;gt;&amp;gt;&amp;gt; doc1 = minidom.parseString (frag1)
&amp;gt;&amp;gt;&amp;gt; root1 = doc1.childNodes[0]
&amp;gt;&amp;gt;&amp;gt; root1.childNodes [&amp;lt;DOM Text node &amp;quot;ABCD&amp;quot;&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; doc2 = minidom.parseString (frag2)
&amp;gt;&amp;gt;&amp;gt; root2 = doc2.childNodes[0]
&amp;gt;&amp;gt;&amp;gt; root2.childNodes [&amp;lt;DOM Element: tag2 at ...&amp;gt;, &amp;lt;DOM Text node &amp;quot;ABCD&amp;quot;&amp;gt;]
&lt;/pre&gt;
&lt;p&gt;in the respective parse trees:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;tag1&amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Text node &amp;quot;ABCD&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;tag1&amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Element &amp;quot;tag2&amp;quot;&lt;/li&gt;
&lt;li&gt;Text node &amp;quot;ABCD&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast, when parsing with etree:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from xml.etree import ElementTree
&amp;gt;&amp;gt;&amp;gt; root3 = ElementTree.fromstring (frag1)
&amp;gt;&amp;gt;&amp;gt; root3[:] []
&amp;gt;&amp;gt;&amp;gt; root3.text 'ABCD'
&amp;gt;&amp;gt;&amp;gt; root4 = ElementTree.fromstring (frag2)
&amp;gt;&amp;gt;&amp;gt; root4[:] [&amp;lt;Element tag2 at ...&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; root4[0].tail 'ABCD'
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;in the respective parse trees:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Element &amp;quot;tag1&amp;quot; (with text as &amp;quot;ABCD&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;tag1&amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Element &amp;quot;tag2&amp;quot; (with tail as &amp;quot;ABCD&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To detail, in etree an Element has text and tail members, for the text
stored within and following a element. If text is the sole child of an
element, it will be stored in the text member. If there are sibling
elements, it will be stored in text or as the tail of one of it's
siblings, &lt;em&gt;depending on its relative position&lt;/em&gt;. A more detailed example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; tailfrag1 = '&amp;lt;tag1&amp;gt;text1&amp;lt;tag2&amp;gt;text2&amp;lt;/tag2&amp;gt;text3&amp;lt;/tag1&amp;gt;'
&amp;gt;&amp;gt;&amp;gt; tailfrag2 = '&amp;lt;tag1&amp;gt;text1&amp;lt;tag2/&amp;gt;text2&amp;lt;tag3/&amp;gt;text3&amp;lt;/tag1&amp;gt;'
&lt;/pre&gt;
&lt;p&gt;Parsing with xml.minidom produces orthogonal structures:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; m = minidom.parseString (tailfrag1)
&amp;gt;&amp;gt;&amp;gt; n = m.childNodes[0] # get the root
&amp;gt;&amp;gt;&amp;gt; n.tagName, n.nodeValue, len (n.childNodes) (u'tag1', None, 3)
&amp;gt;&amp;gt;&amp;gt; for x in n.childNodes: ... print x ... &amp;lt;DOM Text node &amp;quot;text1&amp;quot;&amp;gt;
&amp;lt;DOM Element: tag2 at ...&amp;gt; &amp;lt;DOM Text node &amp;quot;text3&amp;quot;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; e = minidom.parseString (tailfrag2)
&amp;gt;&amp;gt;&amp;gt; f = e.childNodes[0] # get the root
&amp;gt;&amp;gt;&amp;gt; f.tagName, f.nodeValue, len (f.childNodes) (u'tag1', None, 5)
&amp;gt;&amp;gt;&amp;gt; for x in f.childNodes:
        ... print x ...
        &amp;lt;DOM Text node &amp;quot;text1&amp;quot;&amp;gt; &amp;lt;DOM
Element: tag2 at ...&amp;gt; &amp;lt;DOM Text node &amp;quot;text2&amp;quot;&amp;gt; &amp;lt;DOM Element: tag3 at ...&amp;gt;
&amp;lt;DOM Text node &amp;quot;text3&amp;quot;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The results respectively are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;tag1&amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Text node &amp;quot;text1&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;tag2&amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Text node &amp;quot;text2&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Text node &amp;quot;text3&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;tag1&amp;quot;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Text node &amp;quot;text1&amp;quot;&lt;/li&gt;
&lt;li&gt;Element &amp;quot;tag2&amp;quot;&lt;/li&gt;
&lt;li&gt;Text node &amp;quot;text2&amp;quot;&lt;/li&gt;
&lt;li&gt;Element &amp;quot;tag3&amp;quot;&lt;/li&gt;
&lt;li&gt;Text node &amp;quot;text3&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While, with etree the text shifts between text and tail:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; x = ElementTree.fromstring (tailfrag1)
&amp;gt;&amp;gt;&amp;gt; x.tag, x.text, x.tail, len(x)
('tag1', 'text1', None, 1)
&amp;gt;&amp;gt;&amp;gt; y = x[0]
&amp;gt;&amp;gt;&amp;gt; y.tag, y.text, y.tail, len(y)
('tag2', 'text2', 'text3', 0)
&amp;gt;&amp;gt;&amp;gt; a = ElementTree.fromstring (tailfrag2)
&amp;gt;&amp;gt;&amp;gt; a.tag, a.text, a.tail, len(a)
('tag1', 'text1', None, 2)
&amp;gt;&amp;gt;&amp;gt; b = a[0]
&amp;gt;&amp;gt;&amp;gt; b.tag, b.text, b.tail, len(b)
('tag2', None, 'text2', 0)
&amp;gt;&amp;gt;&amp;gt; c = a[1]
&amp;gt;&amp;gt;&amp;gt; c.tag, c.text, c.tail, len(c)
('tag3', None, 'text3', 0)
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The results respectively are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;tag1&amp;quot; (with text as &amp;quot;text1&amp;quot;)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Element &amp;quot;tag2&amp;quot; (with text as &amp;quot;text2&amp;quot; and text as &amp;quot;text3&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Element &amp;quot;tag1&amp;quot; (with text as &amp;quot;text1&amp;quot;)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Element &amp;quot;tag2&amp;quot; (with tail as &amp;quot;text2&amp;quot;)&lt;/li&gt;
&lt;li&gt;Element &amp;quot;tag3&amp;quot; (with tail as &amp;quot;text3&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's inconsistent and just damn untidy.&lt;/p&gt;
&lt;p&gt;Admittedly, kosher XML &lt;em&gt;should&lt;/em&gt; have elements that contain &lt;em&gt;either&lt;/em&gt; a
single text node &lt;em&gt;or&lt;/em&gt; one or more elements. In the real world, this
can't be relied upon. Take almost any stretch of HTML or XHTML:&lt;/p&gt;
&lt;blockquote&gt;
&amp;lt;P&amp;gt;In &amp;lt;B&amp;gt;When Death Comes&amp;lt;/B&amp;gt;, Mary Oliver says &amp;lt;EM&amp;gt;When it's
over, I want to say I have been a bride married to amazement, I've
been a bridegroom taking the world into my arms&amp;lt;/EM&amp;gt;.&amp;lt;/P&amp;gt;&lt;/blockquote&gt;
&lt;p&gt;With etree, parts of this sentence that logically should be at the same
level appear as the text of the root paragraph, or as the text or tails
of children of the root. When walking an such an XML tree, a program has
to look for both text and tail members and interpret them correctly.
Perhaps worse, when building an XML tree, code has to keep track of what
has preceded so that text can be attached to correct place. Finally, the
&amp;quot;tail&amp;quot; idiom is unlike the treatment of text in the HTML DOM, or in fact
any other XML library I know of. That's not a showstopper, but makes it
worth asking if the benefits of any new approach are real.&lt;/p&gt;
&lt;p&gt;What's the solution? etree is simple and works well in most cases.
Rather than writing YAXP (Yet Another XML Parser), a better solution is
to modify the etree behaviour with wrapping function. This one of the
reasons I developed the teetree module, detailed elsewhere.&lt;/p&gt;
&lt;p&gt;Other illustrations (and solutions) to this problem can be found:&lt;/p&gt;
&lt;p&gt;-&lt;a class="reference external" href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/498286"&gt;ElementTree text helper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-&lt;a class="reference external" href="http://codespeak.net/lxml/dev/compatibility.html"&gt;LXML compatibility&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Tips &amp; tricks</title><link href="http://www.agapow.net/programming/web-development/plone/tips-tricks/" rel="alternate"></link><published>2008-12-01T12:00:00+00:00</published><updated>2008-12-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2008-12-01:/programming/web-development/plone/tips-tricks/</id><summary type="html">&lt;div class="section" id="archetypes"&gt;
&lt;h2&gt;Archetypes&lt;/h2&gt;
&lt;p&gt;Ah, archetypes. How I adore thee. Other ways of constructing Plone
content are as nothing before me. You are quick to develop, flexible in
your approach, sensible in your defaults. But cryptic in your errors.&lt;/p&gt;
&lt;p&gt;A lesson or two on breaking archetypes: First, not all fields accept all
widgets …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="archetypes"&gt;
&lt;h2&gt;Archetypes&lt;/h2&gt;
&lt;p&gt;Ah, archetypes. How I adore thee. Other ways of constructing Plone
content are as nothing before me. You are quick to develop, flexible in
your approach, sensible in your defaults. But cryptic in your errors.&lt;/p&gt;
&lt;p&gt;A lesson or two on breaking archetypes: First, not all fields accept all
widgets. This is only logical - a Boolean field can't take a Multiselect
widget. However, there are some other pairings that seem reasonable but
are wrong. What happens in this case is that Plone prangs when trying to
render the page and you end up with a cryptic message on the White Wordy
Page of Error. The error clearly points to a problem in the archetype
machinery and rendering, but doesn't identify which widget or field.
Charming.&lt;/p&gt;
&lt;p&gt;Equally mysterious can be the errors that occur when you accidentally
have two fields with the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="structured-text"&gt;
&lt;h2&gt;Structured text&lt;/h2&gt;
&lt;p&gt;Structured text is a fine format ... as long as the documents do not get
too complicated. Once you get text with 3 or 4 nested levels of
headings, it becomes difficult to keep track of the correct depth of
indentation. Once you add in lists, preformatted chunks of text and the
vagarity of the documentation, it can become impossible to render a
document correctly. It also appears that there may be a few bugs in the
STX implementation in Zope. I've had a case
where a paragraph early in a document would persistently detach from its
position and appear near the end of a document. Disecting the document
showed no obvious cause. I eventually rewrote the doc in HTML.
Restructured text (if available) is far easier to write and
troubleshoot, and is also more powerful.&lt;/p&gt;
&lt;p&gt;Moral: simple structured text for simple documents.&lt;/p&gt;
&lt;p&gt;An under-publicised feature of structured text is that you can include
HTML commands within it. For example, instead of using the primitive
image include directives in STX (e.g. &lt;tt class="docutils literal"&gt;&amp;quot;My image&amp;quot; :img:my_pic.jpg&lt;/tt&gt;), you
can use the more powerful HTML img command (e.g. &lt;tt class="docutils literal"&gt;&amp;lt;IMG &lt;span class="pre"&gt;SRC=&amp;quot;my_pic.jpg&amp;quot;&lt;/span&gt;
&lt;span class="pre"&gt;class=&amp;quot;fancyframe&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;align=&amp;quot;right&amp;quot;&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="http://zwiki.org/WellUnderstoodProblems"&gt;Well understood problems in
STX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a class="reference external" href="http://zwiki.org/TextFormattingSurprises"&gt;Text Formatting Surprises in
STX&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ids"&gt;
&lt;h2&gt;IDs&lt;/h2&gt;
&lt;p&gt;Plone doesn't (and can't) validate all the names and ids you give to
objects at creation. The wrong name can lead to odd effects. While
porting a site, I recreated a file named &lt;tt class="docutils literal"&gt;colophon&lt;/tt&gt;. This caused Plone to
spasm and complain about template errors if anything in that file was
accessed. Eventually I had to delete the file using the ZMI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="look-and-feel"&gt;
&lt;h2&gt;Look-and-feel&lt;/h2&gt;
&lt;p&gt;While the visual design of Plone is excellent, one place it falls down
is in distinguishing the lower order headers H3, H4 and beyond, which
begin to be hard to dstinguish from each other and from the general
text. As an improvement, I'd suggest making H1 and H3 larger and making
headers stand out as a different colour or drop shadow. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
h1, h2, h3, h4, h5, h6 {
   text-shadow: gray 0.1em 0.2em 0.15em;
}

h1 {
   font-size: 180%;
}

h3 {
   font-size: 140%;
   border-bottom: none;
   font-weight: normal;
}
&lt;/pre&gt;
&lt;p&gt;Changes you've made in your &lt;tt class="docutils literal"&gt;ploneCustom.css&lt;/tt&gt; not working when you insert
dtml property directives like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dtml-fontFamily&lt;/span&gt;&lt;/tt&gt;? You've probably made the
elementary mistake of not placing them between the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dtml-with&lt;/span&gt;&lt;/tt&gt; tags, which
are necessary to interpret the directives:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/* &amp;lt;dtml-with base_properties&amp;gt; (do not remove this :) */
/* &amp;lt;dtml-call &amp;quot;REQUEST.set('portal_url', portal_url())&amp;quot;&amp;gt;
   (not this either :) */
/* THIS WORKS */
h3 {
   font-size: 140%;
   border-bottom: none;
   font-weight: normal;
}
/* &amp;lt;/dtml-with&amp;gt; */
/* THIS DOESN'T */
pre {
   color:&amp;amp;dtml-fontColor;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="miscellaneous"&gt;
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;p&gt;The CMFBibliography product is a sophisticated way of managing
references. However I've had nothing but problems with it. Twice when I
attempted to uninstall it, it caused an error, rendering my plone site
unsuable. &lt;em&gt;Caveat user&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It is almost impossible to develop and debug Zope without a decent
debugger. The error messages are cyrptic enough that anyhting cou,d be
hapening. On the Mac I make an alias debuzope which I define:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
alias debugzope='sudo -u plone ./bin/runzope -X &amp;quot;debug-mode=on&amp;quot;'
&lt;/pre&gt;
&lt;p&gt;The Safari broser seems to be very aggressive about caching. Thus
changes in images and stylesheets may not immediately appear.&lt;/p&gt;
&lt;p&gt;Conversely page template seem to be loaded straight from the disk, so
you can alter the appearance of page elemnts by editing the pages
without restarting or reinstalling products.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="web-development"></category><category term="plone"></category><category term="zope"></category></entry><entry><title>Changing a user's password</title><link href="http://www.agapow.net/programming/web-development/plone/changing-a-users-password/" rel="alternate"></link><published>2008-11-01T12:00:00+00:00</published><updated>2008-11-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2008-11-01:/programming/web-development/plone/changing-a-users-password/</id><summary type="html">&lt;p&gt;How do you give a user a new password? Well, in the &amp;quot;User &amp;amp; Groups&amp;quot;
control panel, you select &lt;tt class="docutils literal"&gt;reset password&lt;/tt&gt; for them. What if they've
lost or changed their email address? In the same place, set the new one.
What if &amp;quot;that doesn't work&amp;quot;? You can assign them a new …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How do you give a user a new password? Well, in the &amp;quot;User &amp;amp; Groups&amp;quot;
control panel, you select &lt;tt class="docutils literal"&gt;reset password&lt;/tt&gt; for them. What if they've
lost or changed their email address? In the same place, set the new one.
What if &amp;quot;that doesn't work&amp;quot;? You can assign them a new password. This is
actually easy to do but I always forget how and for some reason it is
difficult to find in the documentation.&lt;/p&gt;
&lt;p&gt;In the ZMI, go to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*&amp;lt;root of plone site&amp;gt;*/acl_users/Users/acl_users
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;acl_users&lt;/tt&gt; folder is a bit of maze, so make sure you go to its
&lt;tt class="docutils literal"&gt;Contents&lt;/tt&gt; tab and tunnel down from there into &lt;tt class="docutils literal"&gt;Users&lt;/tt&gt;. This should take
you to the list of individual users. Click on the name of the one you
need to fix. You'll have a form there that will allow you to directly
enter a new password.&lt;/p&gt;
&lt;p&gt;Make sure it's insulting.&lt;/p&gt;
</content><category term="web development"></category><category term="plone"></category></entry><entry><title>Matplotlib</title><link href="http://www.agapow.net/programming/python/matplotlib/" rel="alternate"></link><published>2008-07-01T12:00:00+01:00</published><updated>2008-07-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2008-07-01:/programming/python/matplotlib/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://matplotlib.sf.net"&gt;Matplotlib&lt;/a&gt; is cool. Did I say it was
cool? I meant very cool. While principally a plotting library, it can be
used for image manipulation and drawing.&lt;/p&gt;
&lt;div class="section" id="draw-lines"&gt;
&lt;h2&gt;draw_lines&lt;/h2&gt;
&lt;p&gt;Which is where our first problem occurs (as of the 0.8.4 version of
matplotlib and possibly earlier). Should you try …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://matplotlib.sf.net"&gt;Matplotlib&lt;/a&gt; is cool. Did I say it was
cool? I meant very cool. While principally a plotting library, it can be
used for image manipulation and drawing.&lt;/p&gt;
&lt;div class="section" id="draw-lines"&gt;
&lt;h2&gt;draw_lines&lt;/h2&gt;
&lt;p&gt;Which is where our first problem occurs (as of the 0.8.4 version of
matplotlib and possibly earlier). Should you try and use the Agg backend
to draw a few lines on a picture like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from matplotlib.backends.backend_agg import RendererAgg
from matplotlib.transforms import Value

dpi = Value (72.0)
theIm = RendererAgg (400, 400, dpi)
theGc = theIm.new_gc()
theIm.draw_lines (theGc, (50 , 100 ), (150 , 200))
&lt;/pre&gt;
&lt;p&gt;matplotlib will choke with the message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
IndexError: Unexpected SeqBase&amp;lt;T&amp;gt; length
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;draw_lines&lt;/tt&gt; does more or less the same thing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
theIm.draw_lines (theGc, (10, 20, 30), (50, 60, 70))
&lt;/pre&gt;
&lt;p&gt;The problem appears to be that &lt;tt class="docutils literal"&gt;draw_lines&lt;/tt&gt; can be called with an
optional argument to transform the line(s). If this is not passed, an
assertion is triggered just at the start of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;RendererAgg::draw_lines&lt;/span&gt;&lt;/tt&gt; within
&lt;tt class="docutils literal"&gt;_backend_agg.cpp&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
args.verify_length(4);
&lt;/pre&gt;
&lt;p&gt;as there are only 3 arguments. &lt;tt class="docutils literal"&gt;draw_line&lt;/tt&gt; runs into problems because it
is implemented as a call to &lt;tt class="docutils literal"&gt;draw_lines&lt;/tt&gt;. Although the transfrom argument
is supposed to be set to &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; by default, this doesn't help because
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;RendererAgg::draw_lines&lt;/span&gt;&lt;/tt&gt; trys to access the &lt;tt class="docutils literal"&gt;ptr()&lt;/tt&gt; argument of the
transform. (In fact, it's worse as this has a tendency to kill the
python interpreter.)&lt;/p&gt;
&lt;p&gt;This problem can be solved from the user level by calling &lt;tt class="docutils literal"&gt;draw_lines&lt;/tt&gt;
with the identity transform (and where needed using &lt;tt class="docutils literal"&gt;draw_lines&lt;/tt&gt; to draw
a single line):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from matplotlib.transforms import identity_transform
identity_trans = identity_transform()
theIm.draw_lines (theGc, (50 , 100), (150 , 200), identity_trans)
&lt;/pre&gt;
&lt;p&gt;This has been &lt;a class="reference external" href="http://sourceforge.net/tracker/index.php?func=detail&amp;amp;aid=1353312&amp;amp;group_id=80706&amp;amp;atid=560720"&gt;lodged as a
bug&lt;/a&gt;.
A followup to my report acknowledges the problem, saying it's the result
of transition between old and new drawing APIs. In this light, my above
solution seems reasonable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-installation-woes"&gt;
&lt;h2&gt;More installation woes&lt;/h2&gt;
&lt;p&gt;In mid-2006, after getting a new MacBook, I spent three days trying to
install matplotlib. It wasn't just one problem but a series of different
issues that disguised each other. Thanks to the members of the
matplotlib mailing list for helping me sort it out. (The technical
parameters were, at the beginning: OSX 10.4, MPL 0.87.4, with &lt;tt class="docutils literal"&gt;numeric&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;numarray&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; installed.)&lt;/p&gt;
&lt;p&gt;The problems all surrounded the use of &lt;tt class="docutils literal"&gt;pylab&lt;/tt&gt;. Matplotlib would install
and import fine:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import matplotlib
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;but when pylab was invoked, implicitly or explicitly, it would fail with
a delightful variety of error messages. The first was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import pylab
[...] matrix undefined
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem occured on line 74 of &lt;tt class="docutils literal"&gt;matplotlib/numerix/__init__.py&lt;/tt&gt;
where &lt;tt class="docutils literal"&gt;Matrix = matrix&lt;/tt&gt;. matrix should have been defined when numpy was
imported as the numerical library for MPL in the same file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import numpy.oldnumeric as numpy
from numpy.oldnumeric import *
&lt;/pre&gt;
&lt;p&gt;However, oldnumeric doesn't define a term matrix. Setting MPL to use
Numeric instead of Numpy, this step is passed but I run into the next
error, also at the import pylab stage:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Debug: ../src/common/object.cpp(224): assert
&amp;quot;sm_classTable-&amp;gt;Get(m_className) == NULL&amp;quot; failed: class already in
RTTI table - have you used IMPLEMENT_DYNAMIC_CLASS() twice (may be
by linking some object module(s) twice)?
../src/common/object.cpp(224): assert
&amp;quot;sm_classTable-&amp;gt;Get(m_className) == NULL&amp;quot; failed: class already in
RTTI table - have you used IMPLEMENT_DYNAMIC_CLASS() twice (may be
by linking some object module(s) twice)?
&lt;/pre&gt;
&lt;p&gt;The first error is the result of an incompatibility between matplotlib
0.87.4 and numpy 1.0b and higher. The solution is to install matplotlib
0.87.5.&lt;/p&gt;
&lt;p&gt;The second problem is caused by something entirely different. If you
grep for sm_classTable in the MPL source, you'll find it in the wxagg
sources. In fact, the problem turned out be with wxPython. MPL either
couldn't find my wxPython installation or was finding the wrong. The
environmental variable WX_CONFIG has to be set to the path of the
wx-config executable for the correct installation. Once that is is done,
MPL installs with fewer error messages (see below) and pylab imports and
runs perfectly.&lt;/p&gt;
&lt;p&gt;Another problem that occurred during this: MPL also requires &lt;tt class="docutils literal"&gt;freetype2&lt;/tt&gt;,
not &lt;tt class="docutils literal"&gt;freetype&lt;/tt&gt; (1). Freetype seems to get installed by every second
program and so there were multiple installations on my disk. In
addition, freetype2 compilation is easy to screw up in the Mac / ppc /
intel universe. If matplotlib / pylab finds the wrong or a bad freetype2
installation, you may get a lot of warnings or errors about legacy calls
to &lt;tt class="docutils literal"&gt;_FontFamilyIterator&lt;/tt&gt; etc. While it is probably possible to get the
source compiled correctly using the right arguments to ./configure, in
the end it proved easiest to get the library from
&lt;a class="reference external" href="http://darwinports.opendarwin.org/"&gt;Darwinports&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(As an aside, if you install Darwinports and then upgrade your home
system Tcl/Tk, this may hose some Tcl packages required by port. See
what a fun week I've had?)&lt;/p&gt;
&lt;p&gt;As a further aside when matplotlib is built, a bunch of ominous but
non-fatal warnings are generated like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/usr/bin/ld: for architecture ppc /usr/bin/ld: warning fat file:
/usr/local/lib/libgcc_s.10.4.dylib does not contain an architecture
that matches the specified -arch flag: ppc (file ignored)
&lt;/pre&gt;
&lt;p&gt;when linking various agg and _nc_transforms pieces, as well as:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src/_ns_backend_agg.cpp:41:1: warning: &amp;quot;M_PI&amp;quot; redefined
In file included from /usr/include/math.h:26, from
/Developer/SDKs/MacOSX10.4u.sdk/usr/include/c++/4.0.0/cmath
&lt;/pre&gt;
&lt;p&gt;These appear to be spurious or at least don't interfere with the
function of MPL.&lt;/p&gt;
&lt;p&gt;Finally, it would do well to check what version of Xcode and DevTools
you have. Despite having a brand new Mac, the version of XCode that came
with it was significantly out of date, and may of had issues recognising
the Intel architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://telliott99.blogspot.com/2011/07/matplotlib-on-os-x-lion-revised.html"&gt;telliot99's more recent experiences in installing
MPL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="programming"></category><category term="matplotlib"></category><category term="visuslisation"></category></entry><entry><title>Arx cheatsheet</title><link href="http://www.agapow.net/programming/tools/arx-cheatsheet/" rel="alternate"></link><published>2008-05-14T12:00:00+01:00</published><updated>2008-05-14T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2008-05-14:/programming/tools/arx-cheatsheet/</id><summary type="html">&lt;div class="section" id="setting-up-arx"&gt;
&lt;h2&gt;Setting up Arx&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
arx my-id 'A Cryptic Moniker &amp;lt;moniker&amp;#64;mysite.com&amp;gt;'
    Set up your identity.
arx my-editor vi
    Set your default editor for changing logs etc.
arx make-archive moniker&amp;#64;mysite.com--archive ~/Documents/Arx/Commits
    Set up an archive.
arx my-default-archive moniker&amp;#64;mysite.com--archive
    Make an archive your default.
arx my-revision-library …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="setting-up-arx"&gt;
&lt;h2&gt;Setting up Arx&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
arx my-id 'A Cryptic Moniker &amp;lt;moniker&amp;#64;mysite.com&amp;gt;'
    Set up your identity.
arx my-editor vi
    Set your default editor for changing logs etc.
arx make-archive moniker&amp;#64;mysite.com--archive ~/Documents/Arx/Commits
    Set up an archive.
arx my-default-archive moniker&amp;#64;mysite.com--archive
    Make an archive your default.
arx my-revision-library moniker&amp;#64;mysite.com--archive
    Set up the revision library (optional).
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-an-archive"&gt;
&lt;h2&gt;Creating an archive&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
arx create-version myproj--main--1.0
    Create an archive for this version of the main branch of myproj.
    Note that this must be done on the smae level or above the files to
    be archived and that the folder must be called myproj. (MacOS allows
    case ambiguity.)
arx add makefile.am configure.in Docs Src
    Add the listed files to the list of sources (i.e. those to be
    archived).
arx commit
    Commit the source files to the archive. Takes a while to run.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-an-archive"&gt;
&lt;h2&gt;Updating an archive&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
arx make-log
    Create the log for the commit that is about to happen (required).
arx commit
    Commit the updated source files to the archive and increment patch
    revision number.
arx delete myoldfile.txt
    Remove file from list of sources.
arx create-version myproj--main--1.1
    Increment minor revision number and create archive for it as above.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="querying-arx"&gt;
&lt;h2&gt;Querying Arx&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
arx categories
    Return the project names.
arx versions myproj--main
    Ask what versions have been archived for myproj--main. If no project
    or branch is provided, show all.
arx revisions myproj--main
    Ask what revisions have been committed for the project myproj--main.
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="imported"></category><category term="version-control"></category><category term="programming"></category><category term="tools"></category><category term="arx"></category><category term="possibly-obselete"></category></entry><entry><title>Installing git on RHEL3</title><link href="http://www.agapow.net/programming/tools/installing-git-on-rhel3/" rel="alternate"></link><published>2008-05-14T12:00:00+01:00</published><updated>2008-05-14T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2008-05-14:/programming/tools/installing-git-on-rhel3/</id><summary type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I had to install git on a Redhat server, without the benefit of a package managers, local repository or anything like a sensible configuration. Because &amp;quot;security&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-a-recent-version-of-lib-curl"&gt;
&lt;h2&gt;Install a recent version of lib curl&lt;/h2&gt;
&lt;p&gt;Why? because git calls &lt;tt class="docutils literal"&gt;cur_easy_strerror&lt;/tt&gt; which was only introduced in libcurl 7.12.0. RHEL3 has …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I had to install git on a Redhat server, without the benefit of a package managers, local repository or anything like a sensible configuration. Because &amp;quot;security&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-a-recent-version-of-lib-curl"&gt;
&lt;h2&gt;Install a recent version of lib curl&lt;/h2&gt;
&lt;p&gt;Why? because git calls &lt;tt class="docutils literal"&gt;cur_easy_strerror&lt;/tt&gt; which was only introduced in libcurl 7.12.0. RHEL3 has only 7.10.6. If you get errors that say things like &amp;quot;undefined&amp;quot; or &amp;quot;unrecognised&amp;quot;, especially in connection with &lt;tt class="docutils literal"&gt;curl_easy_strerror&lt;/tt&gt;, that's the ticket.)&lt;/p&gt;
&lt;p&gt;Used version 7.25.0&lt;/p&gt;
&lt;p&gt;download
untar
./configure
make
sudo make test
curl-config --version&lt;/p&gt;
&lt;p&gt;Note this installs the new curl into /usr/local/include/curl and /usr/local/lib&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-git"&gt;
&lt;h2&gt;Install git&lt;/h2&gt;
&lt;p&gt;On redhat kerberos etc is installed funny so prefix uinstall with&lt;/p&gt;
&lt;p&gt;export CPPFLAGS=-I/usr/kerberos/include
make configure
./configure --prefix=/usr
make all
sudo make install&lt;/p&gt;
&lt;p&gt;However, some editting of the makefile is required.&lt;/p&gt;
&lt;blockquote&gt;
CURLDIR=/usr/local
NO_PERL_MAKEMAKER=0
NO_PERL=0
NO_TCLTK=0&lt;/blockquote&gt;
&lt;p&gt;As there seems to be some issue when the perl script compilation starts&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-bash"&gt;
&lt;h2&gt;Install bash&lt;/h2&gt;
&lt;p&gt;(Why? RVM installer relies upon a recent version of it.)&lt;/p&gt;
&lt;p&gt;Download
configure
make
sudo make install&lt;/p&gt;
&lt;p&gt;Install findutils&lt;/p&gt;
&lt;p&gt;(Why? RVM scripts relies upon a recent version of it.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;IAH has changed it's proxy (or is no longer using one) so the environmental variable http_proxy can cause issues with some programs. This can be neutralised thus:&lt;/p&gt;
&lt;blockquote&gt;
% unset http_proxy&lt;/blockquote&gt;
&lt;p&gt;If you get an odd CA certificate problem when cloning a git repo:&lt;/p&gt;
&lt;blockquote&gt;
% git clone &lt;a class="reference external" href="https://github.com/agapow/hobo-protest.git"&gt;https://github.com/agapow/hobo-protest.git&lt;/a&gt;
Cloning into 'hobo-protest'...
error: SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed while accessing https://github.com/agapow/hobo-protest.git/info/refs
fatal: HTTP request failed&lt;/blockquote&gt;
&lt;p&gt;try this:&lt;/p&gt;
&lt;blockquote&gt;
% env GIT_SSL_NO_VERIFY=true git clone &lt;a class="reference external" href="https://github.com/agapow/hobo-protest.git"&gt;https://github.com/agapow/hobo-protest.git&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote&gt;
% export GIT_SSL_NO_VERIFY=true&lt;/blockquote&gt;
&lt;p&gt;Longer winded solution here: &lt;a class="reference external" href="http://dev.haiku-os.org/ticket/7707"&gt;http://dev.haiku-os.org/ticket/7707&lt;/a&gt; and &lt;a class="reference external" href="http://stackoverflow.com/questions/3777075/https-github-access/4454754#4454754"&gt;http://stackoverflow.com/questions/3777075/https-github-access/4454754#4454754&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="imported"></category><category term="version-control"></category><category term="programming"></category><category term="tools"></category><category term="git"></category><category term="possibly-obselete"></category></entry><entry><title>Installing PloneRSS</title><link href="http://www.agapow.net/programming/web-development/plone/installing-plonerss/" rel="alternate"></link><published>2007-12-01T12:00:00+00:00</published><updated>2007-12-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-12-01:/programming/web-development/plone/installing-plonerss/</id><summary type="html">&lt;p&gt;One of Plone's marked faults has been the lack of an out-of-the-box RSS
aggregation product. Although there have been a number of attempts
(CMFSin, CMFNewsFeed, CMFFeed), these are unfinished, quirky or only
semi-functional. Fortunately, PloneRSS is a robust solution for
gathering and publishing newsfeeds on your site. Unfortunately,
installation is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of Plone's marked faults has been the lack of an out-of-the-box RSS
aggregation product. Although there have been a number of attempts
(CMFSin, CMFNewsFeed, CMFFeed), these are unfinished, quirky or only
semi-functional. Fortunately, PloneRSS is a robust solution for
gathering and publishing newsfeeds on your site. Unfortunately,
installation is not straightforward. These are some notes I gathered
from the last time I added PloneRSS to a site, to serve as an addenda to
the official instructions.&lt;/p&gt;
&lt;div class="section" id="step-1-obtain-plonerss"&gt;
&lt;h2&gt;Step 1: Obtain PloneRSS&lt;/h2&gt;
&lt;p&gt;Unfortunately there are a number of stale links to this Product. The
previous location (together with some documentation) was at
&lt;a class="reference external" href="http://encryptec.net/software/plonerss/"&gt;http://encryptec.net/software/plonerss/&lt;/a&gt; but is no longer accessible. The
current link is at &lt;a class="reference external" href="http://plone.org/products/plonerss"&gt;http://plone.org/products/plonerss&lt;/a&gt;. There are
pointers back to documentation at the original site that no longer work.
&lt;a class="reference external" href="http://encryptec.net/Members/gareth/product-update-plonerss"&gt;This&lt;/a&gt; appears to be the limits of the current documentation, although
it points at an inaccessible project page. The product comes as a
bzipped archive. Strangely, several unarchiving programs (on both
Windows and Unix) failed to unpack the software correctly. This probably
a software or bzip fault, but keep trying until you get a folder
containing the PloneRSS product. Drop it into your sites 'Products'
directory. The latest version (0.9.3) does not seem to be compatible
with Plone 2.5, while the older 0.1build123 is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-obtain-zmysqlda"&gt;
&lt;h2&gt;Step 2: Obtain ZMySQLDA&lt;/h2&gt;
&lt;p&gt;Again, there are several rusty links and sites to this around the web.
The best appears to be at SourceForge. Don't worry that the adaptor was
last updated in 2001, it's quite functional. Download it and unpack it.
It comes as a hierachy of folders designed to unpack onto your Zope
installation (i.e. '/lib/python/Products/ZMySQLDA'). Find your Zope
installation (the binaries, not the site) and copy ZMySQLDA into the
'Products' folder in the Zope python library.&lt;/p&gt;
&lt;p&gt;Restart your site to pick up the new software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-create-the-database"&gt;
&lt;h2&gt;Step 3: Create the database&lt;/h2&gt;
&lt;p&gt;Although PloneRSS comes with a SQL file that will create the database
for you if fed to MySQL, I've never managed to get this to work. (Note
that the file also has a different name to that in the instructions.)
It's simplest to open the folder and copy the SQL statements straight to
MySQL. You should end up with a database called 'plonerss' containg a
table 'feeds'.&lt;/p&gt;
&lt;p&gt;Unmentioned in the PloneRSS instructons (perhaps because it's obvious),
you have to create a user with the appropriate privileges on the new
database:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GRANT ALL ON plonerss.* TO plonerss_usr&amp;#64;localhost
   IDENTIFIED BY 'pr_pass';
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-create-and-test-the-database-connection"&gt;
&lt;h2&gt;Step 4: Create and test the database connection&lt;/h2&gt;
&lt;p&gt;Go into the ZMI of your site and in the 'custom' skins folder, create a
a ZMySQL Database Adaptor. Follow the instructions for giving a
configuration string but &lt;em&gt;database user password&lt;/em&gt; (e.g. &lt;em&gt;plonerss
plonerss_user pr_pass&lt;/em&gt;) should do. I had some difficulty getting it to
pick up my installation (probably a local error) and had to add the
socket location to get it to work:&lt;/p&gt;
&lt;blockquote&gt;
plonerss plonerss_user plonerss_password /tmp/mysql.sock&lt;/blockquote&gt;
&lt;p&gt;Note that is must be named as per the instructions
(PloneRSS_SQL_connection). Test the connection out from the ZMI, say
with the string SHOW DATABASES;. Install PloneRSS from the &amp;quot;Install
products&amp;quot; control panle of Plone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-5-add-the-portlet"&gt;
&lt;h2&gt;Step 5: Add the portlet&lt;/h2&gt;
&lt;p&gt;In the ZMI, go to the properties of your site and add the PloneRSS
portlet to the right or left panel. If you have not installed PloneRSS,
you'll get a site error when next you visit the front page. The portlet
won't display until it has feeds available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-6-add-feeds"&gt;
&lt;h2&gt;Step 6: Add feeds&lt;/h2&gt;
&lt;p&gt;PloneRSS adds three objects, and it can be unclear as to what they do.
The RSS Manager is essentially a control panel for your feeds, that
displays the health and status of your feeds. It may be content, but you
only need one per site and it serves as &amp;quot;virtual folder&amp;quot; where rss items
are displayed. Make one. RSS Feeds are the basic content that represents
(yes) a feed. Create a bunch of those. They won't start displaying until
they have been published. RSS Instance is basically an aggregator, that
gathers a group of selected feeds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="assorted-issues"&gt;
&lt;h2&gt;Assorted issues&lt;/h2&gt;
&lt;p&gt;After adding a certain feed, my RSS Manager refused to display due to a
character encoding problem. (Something in the new feeds url or
conetxet.) However it appears that the rest of the PloneRSS
infrastructure works without any problems, so this wasn't regarded as a
problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Updated early 2008 with new information and links.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PloneRSS is largely superseded in Plone 3.x.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="plone"></category><category term="web-development"></category><category term="possibly-obselete"></category></entry><entry><title>One great big bag of Plone problems</title><link href="http://www.agapow.net/programming/web-development/plone/one-great-big-bag-of-plone-problems/" rel="alternate"></link><published>2007-11-01T12:00:00+00:00</published><updated>2007-11-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-11-01:/programming/web-development/plone/one-great-big-bag-of-plone-problems/</id><summary type="html">&lt;p&gt;Whenever I get a cryptic error from Plone (which is all too frequently),
I google to see if anyone else has it. This is me paying back into the
system.&lt;/p&gt;
&lt;div class="section" id="can-t-add-type-nonetype-has-no-attribute-get"&gt;
&lt;h2&gt;Can't add type: 'NoneType has no attribute get'&lt;/h2&gt;
&lt;p&gt;After fiddling with the schema on a type, adding it then failed …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Whenever I get a cryptic error from Plone (which is all too frequently),
I google to see if anyone else has it. This is me paying back into the
system.&lt;/p&gt;
&lt;div class="section" id="can-t-add-type-nonetype-has-no-attribute-get"&gt;
&lt;h2&gt;Can't add type: 'NoneType has no attribute get'&lt;/h2&gt;
&lt;p&gt;After fiddling with the schema on a type, adding it then failed, with
the informative traceback:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Traceback (innermost last): ... Module
Products.Amergin.content.phylogeny, line 6, in addPhylogeny Module
Products.BTreeFolder2.BTreeFolder2, line 446, in _setObject ... Module
Products.Archetypes.BaseContent, line 42, in manage_afterAdd ... Module
Products.ZCatalog.Catalog, line 277, in updateMetadata Module
Products.ZCatalog.Catalog, line 417, in recordify Module
Products.Archetypes.ExtensibleMetadata, line 314, in CreationDate
AttributeError: 'NoneType' object has no attribute 'get'
&lt;/pre&gt;
&lt;p&gt;There's a lot more of it, but you get the idea. Looking at the source
for the final error, you can see that the problem is that the new object
has no field 'creationdate' and crashes out at that point. It took quite
a while to find the answer but in my schema definition for the class I
had mistakenly cut out the required base schema for an archetypes
object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
_phylogeny_schema = Schema (( ...
&lt;/pre&gt;
&lt;p&gt;instead of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
_phylogeny_schema = BaseSchema.copy() + Schema (( ...
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Moral:&lt;/strong&gt; as forbidding as it is, looking at the source can be a great
help.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rant:&lt;/strong&gt; there's two problem with errors in Plone (1) they're far too
easy to make and (2) they're far too cryptic. Ideally, Archetypes
shouldn't even provide the option of creating an schema that's illegal,
and the errors from such should have been caught earlier in the creation
machinery rather than later. ExtensibleMetadata is 700 lines long,
doesn't contain a single assert and only raises one exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-t-delete-object-because-it-is-locked"&gt;
&lt;h2&gt;Can't delete object because it is locked&lt;/h2&gt;
&lt;p&gt;One of my Products creates a lot of content programatically (i.e.
without the user directly adding it). In the upgrade between 2.5 and
3.0, a strange thing started happening. Content created this way could
not be deleted, giving a message like the title. It was as if the object
hadn't properly left the portal factory, although it was being created
in the same way as many other bits of code. &lt;em&gt;But&lt;/em&gt; if you edited and
saved the content, it was then &amp;quot;deletable&amp;quot;.&lt;/p&gt;
&lt;p&gt;The solution was simple: commit a transaction. This saves and unlocks
the object:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import transaction transaction.commit()
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; There's some nice urls for reference &lt;a class="reference external" href="http://plone.org/documentation/how-to/add-content-programmatically"&gt;Add content
programmatically&lt;/a&gt;,
&lt;a class="reference external" href="http://plone.org/documentation/tutorial/manipulating-plone-objects-programmatically"&gt;Manipulating Plone objects
programmatically&lt;/a&gt;,
&lt;a class="reference external" href="http://www.len.ro/work/cms/create-links-with-a-script"&gt;Create links with a
script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rant:&lt;/strong&gt; &amp;quot;Professional Plone development&amp;quot; has a single reference to
transactions in its index, which points to a single page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="abruptly-truncating-text"&gt;
&lt;h2&gt;Abruptly truncating text&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symptom:&lt;/strong&gt; When making an addition to one of the
&lt;a class="reference external" href="http://wordpress.agapow.net/fdgfddfgfd/personal/infoglut-2"&gt;Infoglut&lt;/a&gt;
pages, a scrap of text was cut and pasted out of another application
(specifically an album title from iTunes). When the page was saved, the
text appeared to be truncated around the point of insertion. Although
this initially seemed to be a restructured text error, when the page was
opened up for editing again, it was shown that the text was actually
terminated at that point. All data beyond had been lost.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; The behaviour is surprising, but the cause not. When the
text was cut-and-pasted into a text editor, a stray invisible control
character could be see at the point of truncation. Fortunately, by going
back in the browser, I could fetch the original text from the cache,
excise the problem character and repeat the edit to the correct form. It
would seem likely that this wasn't iTunes fault, but due to whoever
originally edited the album name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="form-misbehaviour"&gt;
&lt;h2&gt;Form misbehaviour&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symptom:&lt;/strong&gt; Several products malfunctioned when their forms were
submitted. For example, when a user created a guestbook entry in
&lt;em&gt;EasyGuestBook&lt;/em&gt;, at the stage where it should show a preview of the
submitted text, Plone threw an error saying:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
validateShowPreview contained an error
&lt;/pre&gt;
&lt;p&gt;The control panel configlet for &lt;em&gt;qPloneComments&lt;/em&gt; did a similar thing
whenever a setting was changed. The only conmmon factor between these
two seemed to be that they both used &lt;em&gt;CMFFormController&lt;/em&gt;. No traceback
was produced and both Products had previously been working fine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; it seems that the problem is to do with linefeeds. Both
crashing scripts had DOS (CRLF) line-endings. How they got converted in
unclear but presumably something in &lt;em&gt;CMFFormController&lt;/em&gt; requires either
native or Unix linefeeds. This is easily fixed by going to the skin
directory and converting everything to Unix with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dos2unix -d -o *
&lt;/pre&gt;
&lt;p&gt;or similar. &lt;strong&gt;Caveat:&lt;/strong&gt; this assumes you are using a Unix system, of
course. If you're not, that's your problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pytz"&gt;
&lt;h2&gt;pytz&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symptom:&lt;/strong&gt; You know how it is. You want to try out some new Products
or some cool stuff in a new version of Zope or Plone. So you install the
latest Zope binaries, instatiate a site, start it up just to test it and
get a freaky error message deep inside the timezone information that it
doesn't understand the way you are calling timezones. Sure, happens all
the time ...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; I got around this mysterious bug by just hacking the call
to the timezone module pytz. But belatedly there is &lt;a class="reference external" href="http://www.mechanicalcat.net/richard/log/Python/Interesting_egg_related_problem"&gt;an
explanation&lt;/a&gt;
and it doesn't involve Zope. Briefly, when matplotlib is installed, it
also installs an old version of pytz. This can be cured by manually
updating pytz in your distribution or in MPL. Let the user beware.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-valid-images-that-aren-t"&gt;
&lt;h2&gt;The valid images that aren't&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symptom:&lt;/strong&gt; I was passed some artwork (in the form of JPEGs exported
from Photoshop) to put up on a site. But if they were uploaded as an
image, they didn't appear within the content type. They still appeared
as the attached image under the edit tab, but couldn't be seen. They
didn't even appear as a broken image icon. They could be uploaded
straight to the ZMI, but again the content was present but the image
wasn't visble. Loading as a skin element of a product produced similar
results. The images appeared normal in Window's Image Viewer and OSX's
Prefix and Graphics Converter. Resaving the images, or renaming,
produced no chnage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Comparing images that worked with those that didn't
produced a clue. The problematic images had a CMYK color profile as well
as some additional embedded fields. Saving the images wihtout this
profile imnformation fixed the problem. Presumably the Python Imaging
Library or Zope's internal image-handling code isn't savvy to part of
this additional profile data.&lt;/p&gt;
&lt;/div&gt;
</content><category term="plone"></category><category term="web-development"></category></entry><entry><title>Implicit typename error</title><link href="http://www.agapow.net/programming/cplusplus/implicit-typename-error/" rel="alternate"></link><published>2007-06-01T12:00:00+01:00</published><updated>2007-06-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-06-01:/programming/cplusplus/implicit-typename-error/</id><summary type="html">&lt;p&gt;While compiling some code with gcc (that had previously compiled and run
without complaint under CodeWarrior), the following warning was
reported:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SblNumerics.h:334: warning: 'typename
std::iterator_traits&amp;lt;_Iterator&amp;gt;::value_type' is implicitly a typename
SblNumerics.h:334: warning: implicit typename is deprecated, please see
the documentation for details
&lt;/pre&gt;
&lt;p&gt;The offending …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While compiling some code with gcc (that had previously compiled and run
without complaint under CodeWarrior), the following warning was
reported:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SblNumerics.h:334: warning: 'typename
std::iterator_traits&amp;lt;_Iterator&amp;gt;::value_type' is implicitly a typename
SblNumerics.h:334: warning: implicit typename is deprecated, please see
the documentation for details
&lt;/pre&gt;
&lt;p&gt;The offending code looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
template &amp;lt;class Iter&amp;gt;
inline iterator_traits&amp;lt;InputIter&amp;gt;::value_type
sum (Iter first, Iter last,
   iterator_traits&amp;lt;Iter&amp;gt;::value_type init) {
   ...
}
&lt;/pre&gt;
&lt;p&gt;or this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
template &amp;lt;typename X&amp;gt; class SimpleMatrix :
   public std::vector&amp;lt;std::vector&amp;lt;X&amp;gt; &amp;gt;
{
   public: // PUBLIC TYPE INTERFACE
   typedef std::vector&amp;lt;X&amp;gt; row_type;
   typedef std::vector&amp;lt;row_type&amp;gt; base_type;
   typedef row_type::size_type size_type; // error here ...
   typedef row_type::reference reference; // ... and here ....
   typedef row_type::const_reference const_reference; // ... and here ...
}
&lt;/pre&gt;
&lt;p&gt;The problem here is that when a compiler encounters something like
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;classname::something&lt;/span&gt;&lt;/tt&gt;, it has to decide whether this is a member
variable, member function, or name of a type declared inside the class
(e.g. a &lt;tt class="docutils literal"&gt;typedef&lt;/tt&gt; or nested class). In the case of dependent names (ones
that depend on a template parameter) this is easy. Often, compilers
assume it is a type name - which would be correct in this case. However
more recent compilers demand that you resolve this ambiguity. To get
this warning to go away the type names must be explicitly identified as
such:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
template &amp;lt;class Iter&amp;gt; inline typename
iterator_traits&amp;lt;Iter&amp;gt;::value_type sum (Iter first, Iter last, typename
iterator_traits&amp;lt;Iter&amp;gt;::value_type init) { ... }
&lt;/pre&gt;
&lt;p&gt;and as such:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
template &amp;lt;typename X&amp;gt; class SimpleMatrix :
   public std::vector&amp;lt;std::vector&amp;lt;X&amp;gt; &amp;gt;
{
   public: // PUBLIC TYPE INTERFACE
   typedef std::vector&amp;lt;X&amp;gt; row_type;
   typedef std::vector&amp;lt;row_type&amp;gt; base_type;
   typedef typename row_type::size_type size_type; // error here ...
   typedef typename row_type::reference reference; // ... and here ....
   typedef typename row_type::const_reference const_reference; // ... and here ...
}
&lt;/pre&gt;
&lt;p&gt;Why is it that every fix to a C++ program involves increasing the verbosity of
the code?&lt;/p&gt;
</content><category term="programming"></category><category term="c++"></category></entry><entry><title>On the debugging of page templates</title><link href="http://www.agapow.net/programming/web-development/plone/on-the-debugging-of-page-templates/" rel="alternate"></link><published>2007-05-01T12:00:00+01:00</published><updated>2007-05-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-05-01:/programming/web-development/plone/on-the-debugging-of-page-templates/</id><summary type="html">&lt;p&gt;Try embedding something like this in your code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;dl class=&amp;quot;collapsible inline collapsedOnLoad&amp;quot;&amp;gt;
&amp;lt;dt class=&amp;quot;collapsibleHeader&amp;quot;&amp;gt;Title&amp;lt;/dt&amp;gt;
&amp;lt;dd class=&amp;quot;collapsibleContent&amp;quot;&amp;gt;
&amp;lt;span tal:replace=&amp;quot;structure python: here.printRequest(request,
errors)&amp;quot;/&amp;gt; &amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/pre&gt;
&lt;p&gt;and supply the necessary printRequest somewhere in your code or as a
script:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def printRequest (self, request, errors …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Try embedding something like this in your code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;dl class=&amp;quot;collapsible inline collapsedOnLoad&amp;quot;&amp;gt;
&amp;lt;dt class=&amp;quot;collapsibleHeader&amp;quot;&amp;gt;Title&amp;lt;/dt&amp;gt;
&amp;lt;dd class=&amp;quot;collapsibleContent&amp;quot;&amp;gt;
&amp;lt;span tal:replace=&amp;quot;structure python: here.printRequest(request,
errors)&amp;quot;/&amp;gt; &amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/pre&gt;
&lt;p&gt;and supply the necessary printRequest somewhere in your code or as a
script:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def printRequest (self, request, errors):
   req = dict(request)
   buf = StringIO()
   buf.write (&amp;quot;&amp;lt;div&amp;gt;&amp;quot;)
   buf.write (&amp;quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;request:&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;)
   buf.write (&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;)
   for k, v in req.iteritems():
      buf.write (&amp;quot;&amp;lt;li&amp;gt;%s: %s&amp;lt;/li&amp;gt;&amp;quot; % (k, v))
      buf.write (&amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;)
      buf.write (&amp;quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;errors:&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;)
      buf.write (&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;)
      for k, v in errors.iteritems():
         buf.write (&amp;quot;&amp;lt;li&amp;gt;%s: %s&amp;lt;/li&amp;gt;&amp;quot; % (k, v))
         buf.write (&amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;)
         buf.write (&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;)
         return buf.getvalue()
&lt;/pre&gt;
</content><category term="plone"></category><category term="web-development"></category></entry><entry><title>Encoding types in etree</title><link href="http://www.agapow.net/programming/python/encoding-types-in-etree/" rel="alternate"></link><published>2007-04-14T12:00:00+01:00</published><updated>2007-04-14T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-04-14:/programming/python/encoding-types-in-etree/</id><summary type="html">&lt;p&gt;Not that I'm picking on ElementTree or anything but ...&lt;/p&gt;
&lt;p&gt;Normally XML documents will declare their character encoding in their
opening tag. And, normally, this will be utf8. (This may be a standard.)
So this is a common sight:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
xml version='1.0' encoding='utf8'?&amp;gt;
&lt;/pre&gt;
&lt;p&gt;An oddity in ElementTree is that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Not that I'm picking on ElementTree or anything but ...&lt;/p&gt;
&lt;p&gt;Normally XML documents will declare their character encoding in their
opening tag. And, normally, this will be utf8. (This may be a standard.)
So this is a common sight:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
xml version='1.0' encoding='utf8'?&amp;gt;
&lt;/pre&gt;
&lt;p&gt;An oddity in ElementTree is that it assumes 'us-ascii' as the default
encoding. The obvious answer is to explicitly provide an alternative
encoding if this doesn't suit. This brings up another oddity:
ElementTree actually prevents you from explicitly providing the encoding
in the output if it is 'utf8' or 'us-ascii':&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def write(self, file, encoding=&amp;quot;us-ascii&amp;quot;):
    # the file is opened and then ...
    if not encoding:
       encoding = &amp;quot;us-ascii&amp;quot;
    elif encoding != &amp;quot;utf-8&amp;quot; and encoding != &amp;quot;us-ascii&amp;quot;:
       file.write(&amp;quot;xml version='1.0' encoding='%s'?&amp;gt; &amp;quot; % encoding)

self._write(file, self._root, encoding, {})
&lt;/pre&gt;
&lt;p&gt;There's probably a good reason for this, but in the meanwhile, it's easy
to fix. Write your own simple XML tree printing function that manually
handles the header:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def write_etree (etree, file, encoding=&amp;quot;us-ascii&amp;quot;):
        # etree is an ElemenTree
        # the file is opened and then ...
        self.hndl.write (&amp;quot; &amp;quot; % self.encoding)
        etree._write (file, etree._root, encoding, {})
&lt;/pre&gt;
</content><category term="python"></category><category term="xml"></category><category term="elementtree"></category><category term="possibly-obselete"></category><category term="imported"></category></entry><entry><title>Installing MySQLdb</title><link href="http://www.agapow.net/programming/python/installing-mysqldb/" rel="alternate"></link><published>2007-01-01T12:00:00+00:00</published><updated>2007-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-01-01:/programming/python/installing-mysqldb/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Good news:&lt;/strong&gt; you can get reliable and easy access to a proper,
fully-featured database from within Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bad news:&lt;/strong&gt; you may have to tinker to get it to (a) install properly.
And if not done properly, this may cause it to (b) not work properly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good news:&lt;/strong&gt; Download a .dmg …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Good news:&lt;/strong&gt; you can get reliable and easy access to a proper,
fully-featured database from within Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bad news:&lt;/strong&gt; you may have to tinker to get it to (a) install properly.
And if not done properly, this may cause it to (b) not work properly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good news:&lt;/strong&gt; Download a .dmg of MySQL for MacOSX from
&lt;a class="reference external" href="http://MySQL.org"&gt;MySQL.org&lt;/a&gt;. Double-click and install the MySQL
package, the MySQL tools package and the preference pane. This works
seemlessly and is much better and quicker than compiling from source or
using fink / darwinports etc. Also, the pref pane lets you quickly start
up the MySQL server or have it startup automatically when the system
boots.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Addendum: Matt Baker reports that he ended up with a malfunctioning
MySQLdb egg that was apparently installed by the MySQL .dmg, which would
explain other weird behaviour. The solution is to delete and install it
another way.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bad news:&lt;/strong&gt; MySQL is installed off the main executable path in
/usr/local/mysql. This isn't a problem in itself, as the prompt can be
easily raised:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
localhost$ /usr/local/mysql/bin/mysql mysql&amp;gt;
&lt;/pre&gt;
&lt;p&gt;However it can cause problems in the later installation of MySQLdb, the
Python package required for interaction, as it can't find the
mysql_config executable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good news:&lt;/strong&gt; There are several feasible ways of fixing this. First,
you could edit your .bash_profile file in your home directory and add
aliases to point at the useful binaries:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
alias mysql='/usr/local/mysql/bin/mysql' alias
mysql_config='/usr/local/mysql/bin/mysql_config'
&lt;/pre&gt;
&lt;p&gt;The MySQLdb instructions suggest an alternative way of telling the build
process where the necessary files are, by editing the site.cfg file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bad news:&lt;/strong&gt; MySQLdb may still not install. (Depends. I've had variable luck on different OSX systems that should had fairly similar configurations. What I give above is what worked for me.)  The symptoms are that it complains
about not being able to find mysql_config and then generates a bunch of
linker errors. Or, it apparently installs but when you go into Python
and type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import MySQLdb
&lt;/pre&gt;
&lt;p&gt;you get a bunch of errors then as the library has been built and
installed but is non-functional.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good news:&lt;/strong&gt; Instead of adding the aliases. adding the MySQL binaries
directory to your $PATH, the build stage will work. In your
.bash_profile file, add something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PATH=&amp;quot;${PATH}:/usr/local/mysql/bin&amp;quot;
&lt;/pre&gt;
&lt;p&gt;so that the build can find all the MySQL binaries. If compiling on a
PPC, you may still get an error message about an &amp;quot;unrecognised
architecture&amp;quot; but this can be ignored safely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Great news:&lt;/strong&gt; This works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Later news:&lt;/strong&gt; Each round of installing Plone shows me new ways that
installation can go awry. This latest time was no different. A source
install of MySQLdb as above failed, installing into Python without
apparent problems but dropping at the import stage, with errors like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import MySQLdb Traceback (most recent call last): File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;,
line 1, in ? File
&amp;quot;/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages
/PIL/__init__.py&amp;quot;, line 19, in ? File
&amp;quot;build/bdist.macosx-10.3-fat/egg/_mysql.py&amp;quot;, line 7, in ? File
&amp;quot;build/bdist.macosx-10.3-fat/egg/_mysql.py&amp;quot;, line 6, in
__bootstrap__ ImportError: Failure linking new module:
/Users/johnB/.python-eggs
/MySQL_python-1.2.2-py2.4-macosx-10.3-fat.egg-tmp/_mysql.so: Library
not loaded: /usr/local/mysql/lib/mysql/libmysqlclient_r.15.dylib
Referenced from:
/Users/johnB/.python-eggs/MySQL_python-1.2.2-py2.4-macosx-10.3-fat.egg-tmp/
_mysql.so Reason: image not found
&lt;/pre&gt;
&lt;p&gt;Installing a &lt;a class="reference external" href="http://pythonmac.org/packages"&gt;pre-compiled fat Mac
binary&lt;/a&gt; as suggested by &lt;a class="reference external" href="http://www.physics.usyd.edu.au/astrop/ausvoss/index.php/Main/InstallMacOSX"&gt;these
guys&lt;/a&gt;
did the trick in the end. Note that for this to work, the dysfunctional
library had to be removed by hand. Go to you site-packages directory,
delete the mySQLdb egg and delete the line referring to it in the
easy-install.pth file.&lt;/p&gt;
</content><category term="mysqldb"></category><category term="mysqwl"></category><category term="python"></category></entry><entry><title>Installing Pydee on OSX</title><link href="http://www.agapow.net/programming/python/installing-pydee-on-osx/" rel="alternate"></link><published>2007-01-01T12:00:00+00:00</published><updated>2007-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-01-01:/programming/python/installing-pydee-on-osx/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/pydee/"&gt;Pydee&lt;/a&gt; is new and nifty graphical
frontend for using &lt;a class="reference external" href="http://ipython.scipy.org/"&gt;Ipython&lt;/a&gt;.
Unfortunately, there's no monolithic binary package available for
installing (at least not on the Mac), and so users have to install and
compile all the prerequisites. Given the the number of steps and small
but important details, it's easy to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/pydee/"&gt;Pydee&lt;/a&gt; is new and nifty graphical
frontend for using &lt;a class="reference external" href="http://ipython.scipy.org/"&gt;Ipython&lt;/a&gt;.
Unfortunately, there's no monolithic binary package available for
installing (at least not on the Mac), and so users have to install and
compile all the prerequisites. Given the the number of steps and small
but important details, it's easy to get it wrong. Here's a step-by-step
process for installing Pydee under OSX, which will also installs a full
PyQt installation along the way. I assume that you are looking to
install the Qt4 version of everything, as that is the one used by Pydee.&lt;/p&gt;
&lt;p&gt;Download the latest binary installer for Qt from the &lt;a class="reference external" href="http://www.qtsoftware.com/downloads"&gt;Trolltech
site&lt;/a&gt;. Open and run it. Qt is
now installed.&lt;/p&gt;
&lt;p&gt;Download and install SIP (a python wrapper for C code) from
&lt;a class="reference external" href="http://www.riverbankcomputing.co.uk/software/sip/download"&gt;Riverbank&lt;/a&gt;.
Either the stables or the overnight snapshots will work. Change
directory into the package and run the configure.py file. Do the usual
make / make install:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% cd sip python configure.py make sudo make install
&lt;/pre&gt;
&lt;p&gt;Download and install
QScintilla from  &lt;a class="reference external" href="hhttp://www.riverbankcomputing.co.uk/software/qscintilla/download"&gt;Riverbank&lt;/a&gt;.
(Note: QScintilla2, not 1.) Again either the stables or the overnight
snapshots will work. Installation instructions are within the package.
Change into the packages Qt4 directory and run qmake (the Qt make
utility) on qscintilla.pro. Then do the usual make / make install:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% cd Qt4 qmake -spec macx-g++ qscintilla.pro make sudo make install
&lt;/pre&gt;
&lt;p&gt;It's important that you pass -spec macx-g++ to qmake or it wil generate
an Xcode project file instead of a makefile.&lt;/p&gt;
&lt;p&gt;There are binding for QScintilla for PyQt. Don't run them yet.&lt;/p&gt;
&lt;p&gt;Download and install PyQt from
&lt;a class="reference external" href="http://www.riverbankcomputing.co.uk/software/pyqt/download"&gt;Riverbank&lt;/a&gt;,
with the procedure as SIP:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% cd PyQt python configure.py make sudo make install
&lt;/pre&gt;
&lt;p&gt;Now return to QScintilla, change into the Python directory and follow
the same procedure:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% cd ../Python python configure.py make sudo make install
&lt;/pre&gt;
&lt;p&gt;Now download and install Pydee with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% easy_install pydee
&lt;/pre&gt;
&lt;p&gt;and it can be called on the commandline with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% pydee
&lt;/pre&gt;
&lt;p&gt;That's it.&lt;/p&gt;
</content><category term="python"></category><category term="tools"></category><category term="pydee"></category><category term="possibly-obselete"></category></entry><entry><title>Parsing dates in Python</title><link href="http://www.agapow.net/programming/python/parsing-dates-in-python/" rel="alternate"></link><published>2007-01-01T12:00:00+00:00</published><updated>2007-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-01-01:/programming/python/parsing-dates-in-python/</id><summary type="html">&lt;p&gt;One of those weird things that always slips my mind and always seems
less obvious than it should be.&lt;/p&gt;
&lt;p&gt;Parsing a date (object) from a string representation in Python seems
oddly neglected or cumbersome as compared to the rest of the standard
library that surrounds it. (Witness the number of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of those weird things that always slips my mind and always seems
less obvious than it should be.&lt;/p&gt;
&lt;p&gt;Parsing a date (object) from a string representation in Python seems
oddly neglected or cumbersome as compared to the rest of the standard
library that surrounds it. (Witness the number of date utility libraries
available.) Anyway, here's a brief recap for those of you googling
&amp;quot;python parsing date&amp;quot;, like I do so very often:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def str2date (str, fmt):
        &amp;quot;&amp;quot;&amp;quot;
        Return a date from a string in a given format.
        Params:
                - str: a string representing a date (e.g. &amp;quot;2009-12-25&amp;quot;)
                - fmt: a strptime/strftime style format (e.g. &amp;quot;%Y/%m/%d&amp;quot;)

        Example::

                str2date (&amp;quot;2009-12-25&amp;quot;, &amp;quot;%Y-%m-%d&amp;quot;)
        &amp;quot;&amp;quot;&amp;quot;
        from datetime import datetime
        return datetime.strptime (st), fmt).date()
&lt;/pre&gt;
&lt;p&gt;Tricks:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You can't produce a date (object) from a date (string), but you can produce a &lt;tt class="docutils literal"&gt;datetime&lt;/tt&gt; object and use it to make a date string.&lt;/li&gt;
&lt;li&gt;It's the &lt;tt class="docutils literal"&gt;datetime&lt;/tt&gt; class not the &lt;tt class="docutils literal"&gt;datetime&lt;/tt&gt; module&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;strptime&lt;/tt&gt;, really?&lt;/li&gt;
&lt;/ol&gt;
</content><category term="python"></category><category term="programming"></category></entry><entry><title>Restoring viewlets</title><link href="http://www.agapow.net/programming/web-development/plone/restoring-viewlets/" rel="alternate"></link><published>2007-01-01T12:00:00+00:00</published><updated>2007-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-01-01:/programming/web-development/plone/restoring-viewlets/</id><summary type="html">&lt;p&gt;How do you get a Plone theme to uninstall and restore viewlets to the
usual way. That is the mystery ...&lt;/p&gt;
&lt;div class="section" id="the-symptoms"&gt;
&lt;h2&gt;The symptoms&lt;/h2&gt;
&lt;p&gt;In a theme I recently built, I moved or hid several viewlets around
for artistic effect. The problem didn't show itself until I uninstalled
the theme. The viewlets …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;How do you get a Plone theme to uninstall and restore viewlets to the
usual way. That is the mystery ...&lt;/p&gt;
&lt;div class="section" id="the-symptoms"&gt;
&lt;h2&gt;The symptoms&lt;/h2&gt;
&lt;p&gt;In a theme I recently built, I moved or hid several viewlets around
for artistic effect. The problem didn't show itself until I uninstalled
the theme. The viewlets stayed where they were. I fiddled with the code
and (on the basis of a posting about a similar problem) used 'remove'
and 'purge' attributes in the install profile. Great - now I had
viewlets in two locations.&lt;/p&gt;
&lt;p&gt;To be specific: my theme took the site-actions and global-section (tabs)
out of the header and tucked them into the footer of the site. After
deinstalling, they appeared in both locations.&lt;/p&gt;
&lt;p&gt;Reinstalling showed the expected appearance for my theme.
Re-deinstalling showed the messed up behaviour. Clearing caches,
refreshing etc. etc. didn't fix it. Examining a theme that also moves
viewlets (plonetheme.labs) didn't show any magic code that fixed the
issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;There is an ultimate and immediate cause involved. The ultimate cause is
that despite the promise of Generic Setup, if you are moving viewlets,
you have to provide an uninstallation profile and installation and
uninstallation functions. The immediate cause is that paster generated
Plone themes (&lt;tt class="docutils literal"&gt;paster create plone3theme&lt;/tt&gt;) don't include these. If you
create a theme via paster doing anything more than providing a style
sheet and images, you'll probably have to provide these yourself for
proper deinstallation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;The Weblion pages below provide detailed examples. If you look at the
version of &lt;tt class="docutils literal"&gt;plonetheme.labs&lt;/tt&gt; in SVN (as of this date), it also provides
these. The released version of &lt;tt class="docutils literal"&gt;plonetheme.p2&lt;/tt&gt; can serve as an example as
well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;This is another example of a Plone 'dorky pants' solution, where the
cure ends up just complicating things. My theme already has 10 XML
configuration files within it (and a single line ZMCL slug for
installation), yet this is not enough to get it to install a stylesheet
and move around a few page components - it needs installer methods as
well. Which makes you wonder what advantage this offers over an
old-style Plone Product. It's also not obvious why an uninstallation
profile needs to be provided. Surely by default it could reverse
everything the install profile does.&lt;/p&gt;
&lt;p&gt;Thanks to Thomas Massman and Tobias Schmidt for pointing out the
shortcomings of paster-generated themes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Plone.org &lt;a class="reference external" href="http://plone.org/documentation/tutorial/customizing-main-template-viewlets/reordering-and-hiding-viewlets"&gt;Reordering and hiding viewlets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Weblion.psu.edu &lt;a class="reference external" href="https://weblion.psu.edu/trac/weblion/wiki/PloneThreeThemeUninstallProfile"&gt;Plone 3 theme uninstall profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Weblion.psu.edu &lt;a class="reference external" href="http://weblion.psu.edu/documentation/presentations/ui-and-theming/introduction-to-viewlets-in-plone-3-part-2-of-2/"&gt;Introduction to viewlets in Plone 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="plone"></category><category term="web-development"></category><category term="possibly-obselete"></category></entry><entry><title>The incident of the missing form script</title><link href="http://www.agapow.net/programming/web-development/plone/the-incident-of-the-missing-form-script/" rel="alternate"></link><published>2007-01-01T12:00:00+00:00</published><updated>2007-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-01-01:/programming/web-development/plone/the-incident-of-the-missing-form-script/</id><summary type="html">&lt;div class="section" id="symptoms"&gt;
&lt;h2&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;While developing a series of forms using CMFFormController,
suddenly one of the components couldn't be found.&lt;/p&gt;
&lt;p&gt;To recap (and serve as an example to those neophytes), CMFFormController
structures your forms as a series of form templates or scripts with
metadata files determining how execution moves between them. In this …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="symptoms"&gt;
&lt;h2&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;While developing a series of forms using CMFFormController,
suddenly one of the components couldn't be found.&lt;/p&gt;
&lt;p&gt;To recap (and serve as an example to those neophytes), CMFFormController
structures your forms as a series of form templates or scripts with
metadata files determining how execution moves between them. In this
case enterdata.cpt presents the page template for the form to be filled
in and enterdata.cpt.metadata determines how it is processed on
submission:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[default]
title = Risks Survey Data Entry
[validators]
validators = enterdata_validate
[actions]
action.success = traverse_to: string: enterdata_doit
action.failure = traverse_to: string: enterdata
&lt;/pre&gt;
&lt;p&gt;That is, if validated by the enterdata_validate script, pass execution
to enterdata_doit, otherwise return to the original template. But
enterdata_doit couldn't be found:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
This site encountered an error trying to fulfill your request.
The errors were:
Error Type ValueError Error Value Unable to find enterdata
Request made at 2007/01/23 13:26:22.167 GMT
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;I checked the spelling.&lt;/p&gt;
&lt;p&gt;I checked that the templates and scripts were all appearing in the skin.&lt;/p&gt;
&lt;p&gt;I returned to other templates that had previously been working and
checked them. They weren't working now.&lt;/p&gt;
&lt;p&gt;What was going on? I hadn't changed anything. Except I had. Something so
small that I hadn't thought that it would make a difference. In the form
metadata file, I'd tidied up the actions by inserting a few spaces. And
the string directive - in this context at least - doesn't like a space
between it and its argument. To wit, this works:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
action.success = traverse_to: string:enterdata
&lt;/pre&gt;
&lt;p&gt;This doesn’t:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
action.success = traverse_to: string: enterdata
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="plone"></category><category term="web-development"></category></entry><entry><title>The strange case of uneditable files and odd formats</title><link href="http://www.agapow.net/programming/web-development/plone/the-strange-case-of-uneditable-files-and-odd-formats/" rel="alternate"></link><published>2007-01-01T12:00:00+00:00</published><updated>2007-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-01-01:/programming/web-development/plone/the-strange-case-of-uneditable-files-and-odd-formats/</id><summary type="html">&lt;div class="section" id="symptom"&gt;
&lt;h2&gt;Symptom&lt;/h2&gt;
&lt;p&gt;Some uploaded files (i.e. the Plone File content type) aren't
editable after creation. The edit tab is visible, but clicking on it
takes you to the &lt;tt class="docutils literal"&gt;That content does not exist&lt;/tt&gt; error page. The file
objects are well behaved in all other cases. Uploading new files
showed that …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="symptom"&gt;
&lt;h2&gt;Symptom&lt;/h2&gt;
&lt;p&gt;Some uploaded files (i.e. the Plone File content type) aren't
editable after creation. The edit tab is visible, but clicking on it
takes you to the &lt;tt class="docutils literal"&gt;That content does not exist&lt;/tt&gt; error page. The file
objects are well behaved in all other cases. Uploading new files
showed that this behaviour was ongoing but didn't happen for every
uploaded file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diagnosis"&gt;
&lt;h2&gt;Diagnosis&lt;/h2&gt;
&lt;p&gt;There was no clear pattern in the name, title, id or date of files.
Going into the ZMI showed a puzzling pattern. Every file for which
editing worked was displayed with the normal file (page) icon. Every
file for which it didn't work had a custom icon, the ATFile or PDF
one. Examining the file metadata itself showed the important
difference. Working files had the format &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;application/octet-stream&lt;/span&gt;&lt;/tt&gt;.
Problematic files had something else: &lt;tt class="docutils literal"&gt;application/msword&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;application/pdf&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;For each of the problem files, change their format to
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;application/octet-stream.&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cause"&gt;
&lt;h2&gt;Cause&lt;/h2&gt;
&lt;p&gt;Unknown. This Plone system has been through the wars (some crude
hacking, malformed products and the occasional corrupted object) but
nothing leaps out as obviously broken. As a guess, maybe
&lt;tt class="docutils literal"&gt;portal_transforms&lt;/tt&gt; is implicated somehow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technical-details"&gt;
&lt;h2&gt;Technical details&lt;/h2&gt;
&lt;p&gt;OS: SuSE linux SLES 9; Python: 2.3.5; Zope: 2.7.8; Plone: 2.1.4.&lt;/p&gt;
&lt;/div&gt;
</content><category term="plone"></category><category term="possibly obselete"></category></entry><entry><title>Using percent in a string</title><link href="http://www.agapow.net/programming/python/using-percent-in-a-string/" rel="alternate"></link><published>2007-01-01T12:00:00+00:00</published><updated>2007-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2007-01-01:/programming/python/using-percent-in-a-string/</id><summary type="html">&lt;p&gt;Add this to list of list of things I'm surprised I didn't know about
Python. How &lt;em&gt;do&lt;/em&gt; you use a percent / modulo ''%'' symbol in a string?&lt;/p&gt;
&lt;p&gt;I had to do this the other day and it stumped me. How could it be that
in &amp;lt;insert large number of years&amp;gt; I've …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Add this to list of list of things I'm surprised I didn't know about
Python. How &lt;em&gt;do&lt;/em&gt; you use a percent / modulo ''%'' symbol in a string?&lt;/p&gt;
&lt;p&gt;I had to do this the other day and it stumped me. How could it be that
in &amp;lt;insert large number of years&amp;gt; I've never had to do this? Because the
percent symbol is used for string formatting in Python, it was tricky.
And - for the same reason - there had to be a way. But it was missing
from the documentation, several text books, and googling didn't show
anything. What makes it more confusing is that Python is sensible about
when it tries to interpolate the symbol, so that a lot of the time you
don't have to do anything clever:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# these work
&amp;gt;&amp;gt;&amp;gt; '%'
'%'
&amp;gt;&amp;gt;&amp;gt; '%%'
'%%'
&amp;gt;&amp;gt;&amp;gt; '%s' % 'foo'
'foo'
&amp;gt;&amp;gt;&amp;gt; 's%ss' % 'foo'
'sfoos'

# this doesn't
&amp;gt;&amp;gt;&amp;gt; '%%s' % 'foo'
Traceback (most recent call last):
File &amp;quot;&amp;lt;interactive input&amp;gt;&amp;quot;, line 1, in ?
TypeError: not all arguments converted during string formatting
&lt;/pre&gt;
&lt;p&gt;The trick is to double the percent symbol anytime the string is being
formated and you don't want it to be interpolated:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; '%%%s' % 'foo'
'%foo'
&lt;/pre&gt;
&lt;p&gt;Of course, you can also solve this problem by just adding string
segments together, putting the plain percent in strings that aren't
interpolated:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; '%' + '%s' % 'foo'
'%foo'
&lt;/pre&gt;
&lt;p&gt;Alternatively, in Python 3, you could just use &lt;em&gt;format&lt;/em&gt; and avoid this whole
percent shenanigans.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus tip:&lt;/strong&gt; Another obvious and useful thing: in Python 2.4, the
&lt;a class="reference external" href="http://www.python.org/doc/2.4.3/whatsnew/node12.html"&gt;function 'sorted' was
added&lt;/a&gt;. As
opposed to the usual ''sort'' - which rearranges a list inplace - this
creates a new list, a previously obvious and odd gap in Python. Not so
obviously, it's not a method but a function, that works on any iterable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# no value is returned from 'sort' so x is None
&amp;gt;&amp;gt;&amp;gt; a = [5, 2, 3, 7]
&amp;gt;&amp;gt;&amp;gt; a.sort()
&amp;gt;&amp;gt;&amp;gt; a [2, 3, 5, 7]
&amp;gt;&amp;gt;&amp;gt; x = a.sort()
&amp;gt;&amp;gt;&amp;gt; x

&amp;gt;&amp;gt;&amp;gt; b = [5, 2, 3, 7]
&amp;gt;&amp;gt;&amp;gt; y = sorted (b)
&amp;gt;&amp;gt;&amp;gt; y
[2, 3, 5, 7]
&amp;gt;&amp;gt;&amp;gt; b
[5, 2, 3, 7]
&lt;/pre&gt;
&lt;p&gt;This makes it suitable for pritning out the keys of a dictionary in
order: &lt;em&gt;sorted (d.keys())&lt;/em&gt;. See what happens if you don't read your
changelogs?&lt;/p&gt;
</content><category term="python"></category><category term="string"></category><category term="text"></category><category term="formatting"></category><category term="possibly-obselete"></category></entry><entry><title>Non-class type</title><link href="http://www.agapow.net/programming/cplusplus/non-class-type/" rel="alternate"></link><published>2006-09-01T12:00:00+01:00</published><updated>2006-09-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2006-09-01:/programming/cplusplus/non-class-type/</id><summary type="html">&lt;p&gt;After a long hiatus, we return with a traditionally opaque C++ error
message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
error: request for member 'close' in 'out', which is of non-class
type 'std::ofstream*'
&lt;/pre&gt;
&lt;p&gt;which like all the best C++ error messages is long, detailed and
completely unhelpful. It could be triggered by a number of things …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a long hiatus, we return with a traditionally opaque C++ error
message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
error: request for member 'close' in 'out', which is of non-class
type 'std::ofstream*'
&lt;/pre&gt;
&lt;p&gt;which like all the best C++ error messages is long, detailed and
completely unhelpful. It could be triggered by a number of things but it
my case it was this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
out ofstream (outfile.c_str(), ios:app);
foo (*out, event[iter]);
&lt;/pre&gt;
&lt;p&gt;The problem was that I'd changed my ofstream &lt;tt class="docutils literal"&gt;out&lt;/tt&gt; from a pointer to a
direct representation. So instead of a dereferenced pointer being passed
to &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt;, I'm dereferencing an actual object. Sorted.&lt;/p&gt;
</content><category term="c++"></category><category term="programming"></category></entry><entry><title>Upgrading to 2.1.x</title><link href="http://www.agapow.net/programming/web-development/plone/upgrading-to-2-1-x/" rel="alternate"></link><published>2006-09-01T12:00:00+01:00</published><updated>2006-09-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2006-09-01:/programming/web-development/plone/upgrading-to-2-1-x/</id><summary type="html">&lt;p&gt;The process of upgrading a Plone site can be intricate. The 2.0.x to
2.1.x jump is no different. (Anyone who has followed the series of
quirks and
&lt;a class="reference external" href="http://www.agapow.net/programming/python/plone-zope/yes-i-know"&gt;bugs&lt;/a&gt;
in Agapow.net over the early part of 2006 will have seen the evidence.)
While you could just …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The process of upgrading a Plone site can be intricate. The 2.0.x to
2.1.x jump is no different. (Anyone who has followed the series of
quirks and
&lt;a class="reference external" href="http://www.agapow.net/programming/python/plone-zope/yes-i-know"&gt;bugs&lt;/a&gt;
in Agapow.net over the early part of 2006 will have seen the evidence.)
While you could just avoid the move, there are compelling new features
in the 2.1 release of Plone and several useful Products that work only
in 2.1.&lt;/p&gt;
&lt;p&gt;Note: For reference, I was upgrading from Plone 2.0.5 and Zope 2.7.6,
and hoping to get to Plone 2.1.2 (the latest stable).&lt;/p&gt;
&lt;div class="section" id="general-notes"&gt;
&lt;h2&gt;General notes&lt;/h2&gt;
&lt;p&gt;The first general principle is that Zope/Plone and their associated
Products can be very version-sensitive. So you can't just leap from say)
Zope 2.7 to 2.9. You may have to upgrade in several steps. Check the
requirements.&lt;/p&gt;
&lt;p&gt;The second principle is that you upgrade from the top down. Update all
your products, then upgrade Plone, then Zope, then Python (if
necessary). Of course, updated versions of Products may lose
compatibility with older versions of Plone and so on (c.v.
RichDocument). Again, you may have to upgrade in several steps.&lt;/p&gt;
&lt;p&gt;Third principle, backup all along the way. The simplest way is just to
copy the whole Products and var directories. This way, if you make a
mistake or are forced to rollback the upgrade, you can just drop the old
directories back and you're in business.&lt;/p&gt;
&lt;p&gt;See the &lt;a class="reference external" href="http://plone.org/documentation/migration/2.1/"&gt;Plone migration
how-to&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="specifics"&gt;
&lt;h2&gt;Specifics&lt;/h2&gt;
&lt;p&gt;Specifics: First I upgraded Zope from 2.7.6 to 2.7.8. (Previous
experiments showed this was necessary.) Assuming you have several Zope
installations on your host machine, this is done by simply by changing
the paths listed in the the zope/bin/runzope and zope/bin/zopectl
scripts. Test your installation by running it with runzope -X
&amp;quot;debug-mode=on and then shut it down.&lt;/p&gt;
&lt;p&gt;Then I downloaded the latest version of Plone (2.1.2), unpacked and
copied - not moved! - all the resulting Products into your instance
Products directory. This makes it easier if you have to reattempt the
upgrade later. I tested the site with runzope again and it looked like a
mess but this is to be expected. There's a migration script to bring
content up to date, found in the ZMI in the site as the
portal_migration tool. It showed that the site instance was an older
version than that on disk, again what was expected. So I clicked Dry run
and attempted a migration.&lt;/p&gt;
&lt;p&gt;Errors were reported and fixed before the migration was done for real.
Then I checked the Add/Remove products panel of the actual site to see
if anything needed to be updated or reinstalled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="assorted-issues"&gt;
&lt;h2&gt;Assorted issues&lt;/h2&gt;
&lt;p&gt;Plone 2.1 makes all your top level folders tabs, one of the (IMHO)
uglier aspects of the Plone UI. The migration doc suggests a few ways to
get rid of, but I found it was easiest to just use a bit of css:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#portal-globalnav { display: none; }
&lt;/pre&gt;
&lt;p&gt;Migration can get stymied by what appears to be incorrect or incomplete
folders, particularly the Members folder or those within it. If you
examine the traceback given at migration failure, you should see which
one is giving trouble. &lt;a class="reference external" href="http://permalink.gmane.org/gmane.comp.web.zope.plone.setup/255"&gt;Several scripts have been suggested to fix
this&lt;/a&gt;
but I favoured a simpler solution: cutting all the content out of the
troublesome folder and then deleting it.&lt;/p&gt;
&lt;p&gt;Another problem occurred with a top-level object I had with the id news.
The Plone migrator attempted to create a folder with the same id, and
fell over when it couldn't. Solution: rename the old folder, migrate,
and rename the new folder.&lt;/p&gt;
&lt;p&gt;Making the jump to Zope2.9 will require more editting of the zope run
scripts, as the Python Zope module has been renamed to Zope2.&lt;/p&gt;
&lt;p&gt;After the migration, PloneSoftwareCenter was broken, with any file
downloads from it silently failing. This can be fixed by installing the
most recent plone-2.1-integration branch of PSC from the Plone
collective SVN area, as well as the ExternalStorage product. This seems
to fix things.&lt;/p&gt;
&lt;p&gt;CMFPhoto appears to be broken as well.&lt;/p&gt;
&lt;/div&gt;
</content><category term="plone"></category><category term="web-development"></category></entry><entry><title>Doxygen cheatsheet</title><link href="http://www.agapow.net/programming/tools/doxygen-cheatsheet/" rel="alternate"></link><published>2006-01-10T12:00:00+00:00</published><updated>2006-01-10T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2006-01-10:/programming/tools/doxygen-cheatsheet/</id><summary type="html">&lt;p&gt;Doxygen is a free tool for documenting code. With a single command it
can generate cross-referenced HTML documentation from any C++ or Java
code. Furthermore, if the code is commented in a particualr styled,
Doxygen can leverage that to enhance the documentation. The below is a
selection of the most …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Doxygen is a free tool for documenting code. With a single command it
can generate cross-referenced HTML documentation from any C++ or Java
code. Furthermore, if the code is commented in a particualr styled,
Doxygen can leverage that to enhance the documentation. The below is a
selection of the most useful markup for Doxygen, to serve as quick
introducton and reminder.&lt;/p&gt;
&lt;div class="section" id="basic-markup"&gt;
&lt;h2&gt;Basic markup&lt;/h2&gt;
&lt;p&gt;Documentation blocks usually precede the element they refer to. Code may
be documented in a number of styles, including the &amp;quot;JavaDoc&amp;quot; style:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/**
A brief description on a single line, ended by a period or blank line.

A longer comment, which may stretch over several lines and may include other things like:
- a list like this
- special markup like below
&amp;#64;param myParam1 Description of 1st parameter.
&amp;#64;param myParam2 Description of 2nd parameter.
&amp;#64;returns Description of returned value.
*/
double myfunc (int&amp;amp; myParam1, char myParam2) {
   long theLocalVar1; ///&amp;lt; a comment after a declaration
   long theLocalVar2; /*!&amp;lt; or like this */
   long theLocalVar3; /**&amp;lt; or like this */
   // ...
}

/*! Commenting in the QT style.
* Note that the intermediate asterisks are optional in the QT and
* JavaDoc styles. Also, the brief description always starts the
* block, and the the detailed description need not be separated
* from it.
*/
#define ABS(x) (((x)&amp;gt;0)?(x):-(x)) /// finally, you can comment via the tripleslash style
bool myfunc2 (string&amp;amp; myParam1, char* myParam2) {
   return anotherFunc (myParam1, myParam2);
}
&lt;/pre&gt;
&lt;p&gt;To document global entities (functions, typedefs, enum, macros etc.),
you &lt;strong&gt;must&lt;/strong&gt; document the file in which they are defined using
&lt;tt class="docutils literal"&gt;/*! file */&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;/** &amp;#64;file */&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-markup"&gt;
&lt;h2&gt;Advanced Markup&lt;/h2&gt;
&lt;p&gt;Text within comments can be marked up, which may effect how Doxygen
parses the text in question, and/or how its appears in any output.
Markup terms are preceded by ampersands &amp;#64; (or backslashs ). Generally,
tags can be used multiple times for the same entity (e.g. multiple
authors, multiple warnings) and will be combined into a single
paragraph.&lt;/p&gt;
&lt;p&gt;Markup for global information:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&amp;#64;file &amp;lt;file-name&amp;gt;&lt;/dt&gt;
&lt;dd&gt;Make comments for a source or header file called . The file name may
include part of the path if the name alone is not unique. If no file
name is given it is assumed this documentation belongs to the
current file. Remember that global functions, variables, typedefs
etc. will only be included in the output if the file they are in is
documented as well.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;mainpage&lt;/dt&gt;
&lt;dd&gt;Include this information on the main page of the output, perhaps for
important classes etc.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;page [name] &amp;lt;title&amp;gt;&lt;/dt&gt;
&lt;dd&gt;Indicates that this comment block is not specific to a class, file
or member. but should appear as a new page.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Markup for general information:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&amp;#64;bug [description]&lt;/dt&gt;
&lt;dd&gt;Has the obvious meaning.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;todo [description]&lt;/dt&gt;
&lt;dd&gt;Describe an item or issue that must be resolved. A seperate &amp;quot;To Do&amp;quot;
list will be generated and will cross-reference this entity.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;deprecated [description]&lt;/dt&gt;
&lt;dd&gt;Indicates this entity is deprecated and gives reasons, describes
alternatives etc.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;invariant [description]&lt;/dt&gt;
&lt;dd&gt;Describes an invariant property of an entity. Multiple invariants
can be mentioned in a single or separate paragraphs.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;warning [description]&lt;/dt&gt;
&lt;dd&gt;Describe a situation or detail that needs attention. As a suggested
rule, this should be information the reader must heed, such as
gotchas, limitations etc.. Similar to &amp;#64;attention.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;note [text]&lt;/dt&gt;
&lt;dd&gt;Make a comment. As a suggested rule, this should only be information
the reader can safely ignore, and of marginal interest like credits,
inspirations and reasoning behind code. Similar to &amp;#64;remarks.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;author [author-list]&lt;/dt&gt;
&lt;dd&gt;Has the obvious meaning. Multiple authors can be listed together or
in separate statements.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;see [name-list]&lt;/dt&gt;
&lt;dd&gt;Make references to other entities or URLs. Names joined by either ::
are intrepreted as a member of a class. Overloaded methods can be
selected by incuding a list of argument types.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Some markup for functions:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&amp;#64;param &amp;lt;name&amp;gt; &amp;lt;description&amp;gt;&lt;/dt&gt;
&lt;dd&gt;For documenting function parameters.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;return &amp;lt;description&amp;gt;&lt;/dt&gt;
&lt;dd&gt;For documenting function return values.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;overload [function-declaration]&lt;/dt&gt;
&lt;dd&gt;Generates boilerplate documentation that refers to the earlier
function.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;pre { description of the precondition }&lt;/dt&gt;
&lt;dd&gt;Describe the precondition (requirements) of a function. Multiple
preconditions can be listed together or in separate statements.&lt;/dd&gt;
&lt;dt&gt;&amp;#64;post [description]&lt;/dt&gt;
&lt;dd&gt;Describe the postcondition (required results) of a function.
Multiple postcondition can be listed together or in seperate
statements.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Some markup for appearance:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&amp;#64;code ... &amp;#64;endcode&lt;/dt&gt;
&lt;dd&gt;For enclosing a literal block of code&lt;/dd&gt;
&lt;dt&gt;&amp;#64;internal&lt;/dt&gt;
&lt;dd&gt;Marks paragraph out as internal information that will not appear in
the output.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="groups"&gt;
&lt;h2&gt;Groups&lt;/h2&gt;
&lt;p&gt;Entities may be grouped into global modules, which appear together on a
new page. Modules can include files, namespaces, classes etc. The group
is created by using &amp;#64;defgroup in a special comment block. An entity can
be made part of the group by using &lt;tt class="docutils literal"&gt;&amp;#64;ingroup&lt;/tt&gt; inside its documentation
block. Entities can also be grouped by enclosing them with &lt;tt class="docutils literal"&gt;&amp;#64;{&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;#64;}&lt;/tt&gt;.
&lt;tt class="docutils literal"&gt;&amp;#64;addtogroup&lt;/tt&gt; can be used instead of &amp;#64;defgroup to avoid accidentally
defining groups multiple times.&lt;/p&gt;
&lt;p&gt;Members of a file or class are automatically grouped on type and
protection level, but can be made into member groups by use of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;//&amp;#64;{&lt;/span&gt;&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;//&amp;#64;}&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/*&amp;#64;{*/&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/*&amp;#64;}*/&lt;/span&gt;&lt;/tt&gt;. Note these are different to the module
grouping tags. Before the opening marker, a separate comment block may
be placed that contains &amp;#64;name and other information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Doxygen homepage
&amp;lt;&lt;a class="reference external" href="http://www.stack.nl/~dimitri/doxygen/"&gt;http://www.stack.nl/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="imported"></category><category term="programming"></category><category term="tools"></category></entry><entry><title>Version control systems for Mac OS X</title><link href="http://www.agapow.net/programming/tools/version-control-systems-for-mac-os-x/" rel="alternate"></link><published>2006-01-01T12:00:00+00:00</published><updated>2006-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2006-01-01:/programming/tools/version-control-systems-for-mac-os-x/</id><summary type="html">&lt;p&gt;This document was originally written in late 2003 / early 2004. The
scene has changed some in the meanwhile, with various offshoots of Arch
and Subversion gaining a lot of mindshare, and some of the URLs are
probably now invalid. However, the broad conclusions still hold, and
this is left here …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This document was originally written in late 2003 / early 2004. The
scene has changed some in the meanwhile, with various offshoots of Arch
and Subversion gaining a lot of mindshare, and some of the URLs are
probably now invalid. However, the broad conclusions still hold, and
this is left here for informative value.&lt;/p&gt;
&lt;p&gt;In the world of the amateur programmer (and often that of the scientific
programmer), version control systems / revision control / source code
management are usually neglected or left in the &amp;quot;we'll do that sometime&amp;quot;
basket. The arguments for using some form of code control have been
expounded upon at length by wiser heads than my own. So I'll just say
this:&lt;/p&gt;
&lt;blockquote&gt;
Use some form of source code management. Even if it's just saving a
copy of your development folder weekly. Eventually, there &lt;em&gt;will&lt;/em&gt; be
a disaster and you &lt;em&gt;will&lt;/em&gt; need that backup.&lt;/blockquote&gt;
&lt;p&gt;With the advent of OS X, a whole bunch of VCS tools have made their way
to the Macintosh. Below are a few very brief notes on the systems that
I've tried, put here for the general use. Some other resources on this
topic are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.electricfish.com/hawkfish/macvcs/"&gt;Macintosh Version Control&lt;/a&gt;: a survey of available systems by someone who should know (a VCS developer), that is far more detailed than these notes. My only complaint is that it tends to concentrate on the graphical systems and doesn't mention some of the newer commandline tools (Bitkeeper, Arx etc.)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.mactech.com/articles/mactech/Vol.14/14.06/VersionControlAndTheDeveloper/"&gt;Version Control and the Single Developer&lt;/a&gt;: an older article by the same author as above, but chattier about the whole subject of version control.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.advogato.org/article/145.html"&gt;Version Control Systems: the next generation&lt;/a&gt;: a lengthy and spirited discussion on many of the Unix VCS tools.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.wikipedia.org/wiki/Revision_control"&gt;Revision Control&lt;/a&gt;: a Wiki encyclopedia entry on the VCS in general.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://developers.slashdot.org/developers/02/07/15/219203.shtml?tid=156"&gt;Designing a New Version Control System&lt;/a&gt;: ... and in the process critiquing every system that already exists.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.macslash.org/articles/03/04/11/1754250.shtml"&gt;Source Control: Not Just for the Big Boys&lt;/a&gt;: MacSlash weighs in with its two cents worth, why you need VCS and what the pros and cons of the various systems are.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="cvs-concurrent-versions-system"&gt;
&lt;h2&gt;CVS (Concurrent Versions System)&lt;/h2&gt;
&lt;p&gt;The defacto standard for version control, CVS has near-universal use in
the Unix world. It's been ported to just about everywhere, and exists in
commandline and graphical versions, with many associated tools. It's
free and has been used for massive projects. Project Builder interfaces
directly with CVS.&lt;/p&gt;
&lt;p&gt;Having said that, I can't recommend using it. The whole system badly
needs overhauling, it doesn't do atomic transactions or cope well with
binary files. [unadorned opinion] I find CVS archaic, restrictive and
frustratingly opaque. [/unadorned opinion]&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://developer.apple.com/internet/macosx/cvsoverview.html"&gt;Mac OS X: Version Control with CVS&lt;/a&gt;: some notes from Apple.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="perforce"&gt;
&lt;h2&gt;Perforce&lt;/h2&gt;
&lt;p&gt;Perforce is a commercial product but there is a free two-user demo for
non-commercial developers. That last restriction has prevented me from a
more than cursory examination of the product, but Perforce has lots of
fans, is cross platform, has commandline and web interfaces, is fast and
safe.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.perforce.com/"&gt;Perforce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bitkeeper"&gt;
&lt;h2&gt;Bitkeeper&lt;/h2&gt;
&lt;p&gt;This has won a lot of fans but if you google for opinions on Bitkeeper,
you'll end up with a lot of pages ranting on about how the Linux kernel
development team shouldn't be using it, due to some admittedly strange
licensing terms. [deep sigh] Still, if it's good enough for the Linux
people, it's probably worth checking out. It's available for free with
some minor restrictions and has a lot of nice features.&lt;/p&gt;
&lt;p&gt;The Mac OS X download for Bitkeeper comes as a .bin file that no
dearchiving software wants to know about. Go to the commandline, change
the name of the file and make it executable before running it. You also
have to explicitly say where you want the executable installed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
downloads&amp;gt; mv bk-301-macosx-ppc.bin bk
downloads&amp;gt; chmod +x bk
downloads&amp;gt; ./bk [... installation ensues ...]
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.bitkeeper.com/"&gt;Bitkeeper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="voodoo"&gt;
&lt;h2&gt;VOODOO&lt;/h2&gt;
&lt;p&gt;VOODOO is a well crafted, award-winning, commercial, GUI tool available
in standalone and server versions, but only on the Macintosh. I ponied
up the price for this a few years ago and used it for 6 months before
moving on. It is a very good and robust product and undoubtably a lot of
people will find it's just what they need. But ...&lt;/p&gt;
&lt;p&gt;... but I found it a bit too powerful and overwhelming for my own needs.
The Mac-only aspect was a bit of a problem and I tangled repeatedly with
the CodeWarrior plugin. You can set up CodeWarrior so that when you open
a project, it checks all the necessary files out from VOODOO. However,
you have to explicitly check them back in. Which means that if you close
the project without checking the files back in or have a crash [you can
see this coming, right?] ... when you next open the project, VOODOO
overwrites all the files you changed. Whimper.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.unisoftwareplus.com//"&gt;VOODOO at Uni Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="subversion"&gt;
&lt;h2&gt;Subversion&lt;/h2&gt;
&lt;p&gt;Subversion is an ambitious project aimed at correcting all the perceived
problems with CVS and building a fully. Despite it's seemingly
perpetually low version number, it is quite functional and has a lot of
fans. It has a converter for CVS repositories, is designed to work over
the Internet&lt;/p&gt;
&lt;p&gt;Unfortunately, to set up or host a Subversion repository, you have to
setup your Apache webserver. As far as I'm concerned, setting up
webservers is one of those TTIPOPTD (Things I Pay Other People To Do).
Tom Lord (who designed Arch) has also expressed severe reservations
about the direction of the Subversion project. This was therefore a
no-go.&lt;/p&gt;
&lt;p&gt;(A posting on Slashdot asserted that you didn't need Apache to run
Subversion. My reading of the FAQ said otherwise and if I was wrong, so
much the better.)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="arch-arx-etc"&gt;
&lt;h2&gt;Arch , ArX etc.&lt;/h2&gt;
&lt;p&gt;Arch is a simple, light-weight VCS that's easy to learn and features
distributed repositories and easy branching. It's what I've settled on
for the moment as it seemed to be just powerful enough for my needs and
no more. It's got a lot of complimentry press. At some point Arch forked
and spawned another version, ArX, although there's little to pick
between the two versions to my eye. There are also a number of more
offbeat implementations.&lt;/p&gt;
&lt;p&gt;Written in some bizarre concoction of languages, against all
expectations Arch works. One must pay close attention to the
installation instructions however, for they must be followed to the
letter otherwise strange errors messages are eventually produced.
(Eventually - otherwise it would be easy to know what's gone wrong.)
Even then, the test suite generates some errors. Despite these, it will
install and run nicely. Just for reference, the steps I used for
ArX-1.0pre7 are below. However, the accompanying documentation should
always take precedence:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% cd ArX-1.0pre7
% cd src
% mkdir =build
% cd =build
% ../configure --prefix ~/bin/ [...]
% make CFLAGS=-no-cpp-precomp CXX=c++ % make [...]
% make test [...]
% make install [...]
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.agapow.net/programming/all-the-rest/arx-cheatsheet.html"&gt;A cheatsheet&lt;/a&gt; I wrote for Arx.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://arx.fifthvision.net/bin/view/Main/WebHome"&gt;http://arx.fifthvision.net/bin/view/Main/WebHome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="possibly-obselete"></category><category term="version-control"></category><category term="mac"></category><category term="osx"></category><category term="imported"></category></entry><entry><title>VisualWidget, don't do It</title><link href="http://www.agapow.net/programming/web-development/plone/visual-widget-dont-do-it/" rel="alternate"></link><published>2006-01-01T12:00:00+00:00</published><updated>2006-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2006-01-01:/programming/web-development/plone/visual-widget-dont-do-it/</id><summary type="html">&lt;p&gt;Archetypes Visual widget - the WYSIWYG HTML editor that shows up on
Pages in Plone 2.5 - is pretty damn nice. I've had problems with Epoz
and this is the first embedded web editor that makes me think about
giving up on restructured text.&lt;/p&gt;
&lt;p&gt;Getting it to work in your own …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Archetypes Visual widget - the WYSIWYG HTML editor that shows up on
Pages in Plone 2.5 - is pretty damn nice. I've had problems with Epoz
and this is the first embedded web editor that makes me think about
giving up on restructured text.&lt;/p&gt;
&lt;p&gt;Getting it to work in your own classes is another issue.&lt;/p&gt;
&lt;p&gt;I had an Archetypes defined class (part of the ReLaIS project) that I
thought would look nice with one of those rich HTML fields in it. Try as
I might, I couldn't get it work. The widget would appear in editting
mode, but spew out plain text at viewing. I'd fiddle with the schema and
then the widget would appear as a plain text area in editing but produce
valid HTML. There were almost no examples on the web of successful use.
Finally, I systematically deleted and added fields to the schema until I
found what worked:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
TextField ('body',
        default_output_type='text/x-html',
        allowable_content_types=(
                'text/plain',
                'text/structured',
                'text/html',
        ),
        widget=VisualWidget (
                label=&amp;quot;Body&amp;quot;,
                rows=30,
                description=&amp;quot;Some text or explanation before the form&amp;quot;,
        ),
),
&lt;/pre&gt;
&lt;p&gt;The magic lines would appear to be &lt;em&gt;default_output_type&lt;/em&gt; and
&lt;em&gt;allowable_content_types&lt;/em&gt;. Don't use &lt;em&gt;default_content_type&lt;/em&gt;, it won't
make you happy.&lt;/p&gt;
&lt;p&gt;Other points: the parent Field has to be a &lt;em&gt;TextField&lt;/em&gt;. &lt;em&gt;StringFields&lt;/em&gt; won't
do. The &lt;em&gt;default_output_type&lt;/em&gt; can also be &lt;em&gt;text/x-html-safe&lt;/em&gt; (for filtered
HTML). I also have a suspicion - from some odd bugs - that only one
VisualWidget can exist on any one page. &lt;em&gt;Caveat programmer.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="technical-details"&gt;
&lt;h2&gt;Technical details&lt;/h2&gt;
&lt;p&gt;Zope 2.94, Plone 2.1.4, Archetypes 1.4.1. Brownie
points if you caught the &amp;quot;Heathers&amp;quot; reference.&lt;/p&gt;
&lt;/div&gt;
</content><category term="plone"></category><category term="possibly-obselete"></category></entry><entry><title>Installing and using PIL</title><link href="http://www.agapow.net/programming/python/installing-and-using-pil/" rel="alternate"></link><published>2005-09-15T12:00:00+01:00</published><updated>2005-09-15T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2005-09-15:/programming/python/installing-and-using-pil/</id><summary type="html">&lt;p&gt;While some people have reporting installing
&lt;a class="reference external" href="http://www.pythonware.com/products/pil/"&gt;PIL&lt;/a&gt; on MacOSX without
problems, there are legion reports that say otherwise. Frequently this
revolve around PIL installing without JPEG support. There are a myriad
of solutions (involving editing make files, configure flags, using fink
to install dependencies, using package managers, casting goat entrails …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While some people have reporting installing
&lt;a class="reference external" href="http://www.pythonware.com/products/pil/"&gt;PIL&lt;/a&gt; on MacOSX without
problems, there are legion reports that say otherwise. Frequently this
revolve around PIL installing without JPEG support. There are a myriad
of solutions (involving editing make files, configure flags, using fink
to install dependencies, using package managers, casting goat entrails,
etcetera, etcetera ...), all of which I tried and had no joy with. The
solution that finally worked was to grab the libjpeg package from
&lt;a class="reference external" href="http://macosx.forked.net/showcat.php?cat=Libraries&amp;amp;sortmethod=reverse"&gt;here&lt;/a&gt;
and install that. Afterwards the PIL install proceded without problems
and tested fine.&lt;/p&gt;
&lt;p&gt;While the image manipulations within the library are impressive, in some
case the resultant image quality isn't quite good enough. To see one
problem, create an image with a series of lines radiating out at various
angles. Some of the lines will come out quite jagged and &amp;quot;pixelly&amp;quot;. Text
also shows some of these defects. One solution is to draw your picture
at a much larger size, and then shrink it down using the anti-alias
filter.&lt;/p&gt;
&lt;p&gt;Another - and better - way is to use the
&lt;a class="reference external" href="http://effbot.org/zone/pythondoc-aggdraw.htm"&gt;aggdraw&lt;/a&gt; library for
drawing PIL images. It uses internally the &lt;em&gt;antigrain geometry&lt;/em&gt; library
for high quality anti-aliased images. (In plain langauge - it produces
slight fuzzy but smoother images.) One catch is that for drawing text,
&lt;em&gt;aggdraw&lt;/em&gt; uses the &lt;em&gt;freetype&lt;/em&gt; text library. If you're on Windows, you're
in luck - &lt;em&gt;aggdraw&lt;/em&gt; installer includes &lt;em&gt;freetype&lt;/em&gt;. If you're on a Unix
system, you have to download and install freetype yourself. Follow the
instructions, make sure you're installing freetype v2 not v1 and you
shouldn't have anyproblems. What may trip you up is getting &lt;em&gt;aggdraw&lt;/em&gt; to
recognise that freetype is installed and where. In the setup.py file of
your aggdraw distribution, you'll find a line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FREETYPE_ROOT = &amp;quot;../../kits/freetype2011preblahblah&amp;quot;
&lt;/pre&gt;
&lt;p&gt;The instructions say to edit this as necessary, but it's not clear to
what. In fact, &lt;em&gt;FREETYPE_ROOT&lt;/em&gt; should point at the folder that holds
the include directory that holds the freetype2 folder. On most system
this will be:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FREETYPE_ROOT = &amp;quot;/usr/local&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Unfortunately, if you try and install &lt;em&gt;aggdraw&lt;/em&gt; before installing
&lt;em&gt;freetype&lt;/em&gt;, it seems to have trouble later recognising if the freetype
library has appeared. (At least I did.) Presumably the setup caches some
results or code from the first time it is is run, that never get
updated. The easiest solution is just to unpack and use a fresh copy of
&lt;em&gt;aggdraw&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So you should install &lt;em&gt;freetype&lt;/em&gt; to use &lt;em&gt;aggdraw&lt;/em&gt; to use &lt;em&gt;PIL&lt;/em&gt;. Simple.&lt;/p&gt;
&lt;div class="section" id="addendum-july-2007"&gt;
&lt;h2&gt;Addendum July 2007&lt;/h2&gt;
&lt;p&gt;More installs of PIL, more surprises. This time my extensive install
notes failed me in new and curious ways. While the &lt;a class="reference external" href="http://darwinports.com/"&gt;Darwin
ports&lt;/a&gt; installer has been useful in the
past, this time it created a seemingly correct but non-functional copy
of freetype. PIL would then bomb out during the compile. trying to
install PIL via port ended up installing a whole new copy of Python.&lt;/p&gt;
&lt;p&gt;Eventually, the instructions on the &lt;a class="reference external" href="http://wiki.python.org/moin/MacPython/UniversalLibrariesAndExtensions"&gt;Python
wiki&lt;/a&gt;
on how to compile and PIL (via compiling and installing freetype and
libjpeg) proved to work. Some notes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You may need to delete to remove any dysfunctional freetype, libjpeg etc before following the wiki install, or else PIL might keep finding the bad libraries.&lt;/li&gt;
&lt;li&gt;Some of the lines they have you delete in various make files don't appear exactly like they do in the notes, but it works anyway.&lt;/li&gt;
&lt;li&gt;Finally, the install set of PIL may complain about a missing directory for man files - you can either ignore this or create the directories yourself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As regards aggdraw, &lt;a class="reference external" href="http://pythonmac.org/packages/"&gt;PythonMac&lt;/a&gt; now
has pre-compiled packages for it, which is a huge time saver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="addendum-december-2010"&gt;
&lt;h2&gt;Addendum December 2010&lt;/h2&gt;
&lt;p&gt;Y'know, maybe you should just use &lt;a class="reference external" href="https://pillow.readthedocs.org/"&gt;Pillow&lt;/a&gt; instead, a 'friendly' re-implementation of PIL.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="pil"></category><category term="imported"></category><category term="possibly-obselete"></category></entry><entry><title>Creating attributes on classes</title><link href="http://www.agapow.net/programming/python/creating-attributes-on-classes/" rel="alternate"></link><published>2005-09-01T12:00:00+01:00</published><updated>2005-09-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2005-09-01:/programming/python/creating-attributes-on-classes/</id><summary type="html">&lt;p&gt;I've gotten used to manipulating members of Python objects with &lt;tt class="docutils literal"&gt;getattr&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;setattr&lt;/tt&gt; etc. But a recent similar problem had me stumped. I had a class
that I wanted to create a large number of similar behaving properties on
(they would all manipulate an internal dictionary):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; f = Foo()
&amp;gt;&amp;gt;&amp;gt; f.contributor = 'xyz' …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;I've gotten used to manipulating members of Python objects with &lt;tt class="docutils literal"&gt;getattr&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;setattr&lt;/tt&gt; etc. But a recent similar problem had me stumped. I had a class
that I wanted to create a large number of similar behaving properties on
(they would all manipulate an internal dictionary):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; f = Foo()
&amp;gt;&amp;gt;&amp;gt; f.contributor = 'xyz'
&amp;gt;&amp;gt;&amp;gt; f.contributor
'xyz'
&amp;gt;&amp;gt;&amp;gt; del f.contributor
&lt;/pre&gt;
&lt;p&gt;Repeat for fourteen other properties. Rather than write more than 30
near-identical methods, there should be some way to define the class by
looping over the field names. The temptation is to do it inside the
class, but this runs into several problems:&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;fields = [ 'contributor', 'coverage', 'creator', 'data',&lt;/dt&gt;
&lt;dd&gt;'description', 'format', 'identifier', 'language',
'publisher', 'relation', 'rights', 'source', 'subject',
'title', 'type' ]&lt;/dd&gt;
&lt;dt&gt;class Foo(object):&lt;/dt&gt;
&lt;dd&gt;for f in fields:
# how do I name the property
f = property (...)
# what do I setattr on? the class isn't defined yet ...
setattr (Foo, f, property (...))&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;p&gt;The proper and obvious solution is to add properties to the class
&lt;em&gt;after&lt;/em&gt; it has been created:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Foo (object):
    pass

for f in fields:
    setattr (Foo, f, property (...))
&lt;/pre&gt;
</content><category term="programming"></category><category term="python"></category><category term="classes"></category></entry><entry><title>How to get a multiply-defined symbol</title><link href="http://www.agapow.net/programming/cplusplus/how-to-get-a-multiply-defined-symbol/" rel="alternate"></link><published>2005-09-01T12:00:00+01:00</published><updated>2005-09-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2005-09-01:/programming/cplusplus/how-to-get-a-multiply-defined-symbol/</id><summary type="html">&lt;p&gt;There are many reasons why the &amp;quot;multiply-defined&amp;quot; error can occur at
link-time, most of them annoying but mundane: failure to include
compilation guards on header files, the compiler finding more than one
version of a file (perhaps a backup?) on the file-search path, lack of
the extern qualifier and so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are many reasons why the &amp;quot;multiply-defined&amp;quot; error can occur at
link-time, most of them annoying but mundane: failure to include
compilation guards on header files, the compiler finding more than one
version of a file (perhaps a backup?) on the file-search path, lack of
the extern qualifier and so on. (See below.) But what if it's none of
these things? All the headers have the right compilation guards on them,
you've searched for duplicate files and grepped for namespace
collisions. Here's a possible cause that kept me guessing for three
days, until I identified it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// file manipaction.h
#pragma once
#ifndef MANIPACTION_H
#define MANIPACTION_H

// *** INCLUDES
#include &amp;quot;Action.h&amp;quot;
#include &amp;quot;ActionUtils.h&amp;quot;
#include &amp;quot;SblDebug.h&amp;quot;
#include &amp;quot;EvolRule.cpp&amp;quot;
#include &amp;quot;MesaTree.h&amp;quot;
#include &amp;quot;CharComparator.h&amp;quot;
#include &amp;quot;MesaGlobals.h&amp;quot; ...
&lt;/pre&gt;
&lt;p&gt;See the problem? A typo has resulted in the source of a class being
included instead of the header. This happens quietly and the problem
only start when other files include the header containing the mangled
#include statement. Also, the linker will probably not identify the
correct header as where the problem is. However, these errors can be
tracked down by grepping for &lt;tt class="docutils literal"&gt;.cpp&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;#include &lt;span class="pre"&gt;&amp;quot;[^.]*.cpp&lt;/span&gt;&lt;/tt&gt; in headers:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// *** INCLUDES
#include &amp;quot;Action.h&amp;quot;
#include &amp;quot;ActionUtils.h&amp;quot;
#include &amp;quot;SblDebug.h&amp;quot;
#include &amp;quot;EvolRule.h&amp;quot;
#include &amp;quot;MesaTree.h&amp;quot;
#include &amp;quot;CharComparator.h&amp;quot;
#include &amp;quot;MesaGlobals.h&amp;quot; ...
&lt;/pre&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thanks to Kirk Swenson whose &lt;a class="reference external" href="http://groups.google.com/groups?q=%22kirk+Swenson%22+multiple+definition&amp;amp;hl=en&amp;amp;lr=&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;safe=off&amp;amp;selm=kswenson-2309981127100001%40jellybean2.keypress.com&amp;amp;rnum=1"&gt;posting&lt;/a&gt; put me on the right track to sorting this out.&lt;/li&gt;
&lt;li&gt;Google for many other &lt;a class="reference external" href="http://www.google.com/search?q=%22multiply-defined%22+C%2B%2B&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8"&gt;examples of how to get this error&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="c++"></category></entry><entry><title>No arguments that depend on a template parameter</title><link href="http://www.agapow.net/programming/cplusplus/no-arguments-that-depend-on-a-template-parameter/" rel="alternate"></link><published>2005-07-01T12:00:00+01:00</published><updated>2005-07-01T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2005-07-01:/programming/cplusplus/no-arguments-that-depend-on-a-template-parameter/</id><summary type="html">&lt;pre class="literal-block"&gt;
There are no arguments to 'X' that depend on a template
parameter, so a declaration of 'X' must be available
&lt;/pre&gt;
&lt;div class="section" id="aside"&gt;
&lt;h2&gt;Aside&lt;/h2&gt;
&lt;p&gt;I have a C++ program of moderate complexity that I have to return
to every 12-18 months to fix an obscure bug or add a modest festure. And
every …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;pre class="literal-block"&gt;
There are no arguments to 'X' that depend on a template
parameter, so a declaration of 'X' must be available
&lt;/pre&gt;
&lt;div class="section" id="aside"&gt;
&lt;h2&gt;Aside&lt;/h2&gt;
&lt;p&gt;I have a C++ program of moderate complexity that I have to return
to every 12-18 months to fix an obscure bug or add a modest festure. And
every time, I spent one or two days just trying to get the thing build
with the latest compiler, which picks up previously legal code and
decides to whine about it, generating dozens of errors.&lt;/p&gt;
&lt;p&gt;This is not the fault of the compiler. This is the fault of C++ for
being so sloppy and complex. This is why C++ should just die and give
way to Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-error"&gt;
&lt;h2&gt;The Error&lt;/h2&gt;
&lt;p&gt;Compiling a templated class that &amp;quot;worked previously&amp;quot; (under gcc3.3. as
opposed to 4.x), an error was thrown on a previously acceptable and
non-templated member:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/Users/agapow/Desktop/mloc/ComboMill.h:188: error:
there are no arguments to 'SetMemberShip' that depend on
a template parameter, so a declaration of 'SetMemberShip'
must be available
&lt;/pre&gt;
&lt;p&gt;Huh. A simplfied version of the class looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
template class ComboMill {
   // ...
   void SetMembership (bool iIsMember) {
      for (int i = 0; i &amp;lt; mMembership.size(); i++) {
         mMembership[i] = iIsMember;
      }
   }

   void First () {
      // error on next line
      SetMembership (false);
   }
   // ...
};
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;SetMembership&lt;/em&gt; is called by a number of other methods to toggle the
state of set members. But that isn't the problem - the problem occurs
where other methods go to call &lt;em&gt;SetMembership&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;It's a tough error to google for, but basically C++ is being stricter
about how it identifies what you are calling. Where previously a symbol
&amp;quot;X&amp;quot; would be implicitly taken to refer to a member or method &amp;quot;X&amp;quot; on the
parent class, here C++ is insisting that you make it explicit. Thus it
can easily be fixed by writing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
void First () {
   // error on next line
   this-&amp;gt;SetMembership (false);
}
&lt;/pre&gt;
&lt;p&gt;One of the criticisms made about Python is that you have to explicitly
member access qualify with &amp;quot;self&amp;quot;. It seems C++ is also not longer
immune form this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Secction 11.9.2 in &lt;a class="reference external" href="http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/gcc/c---misunderstandings.html"&gt;C++
misunderstandings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="c++"></category><category term="programminmg"></category></entry><entry><title>Looser throw specifier error in C++</title><link href="http://www.agapow.net/programming/cplusplus/looser-throw-specifier-error-in-c/" rel="alternate"></link><published>2005-02-01T12:00:00+00:00</published><updated>2005-02-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2005-02-01:/programming/cplusplus/looser-throw-specifier-error-in-c/</id><summary type="html">&lt;pre class="literal-block"&gt;
looser throw specifier for 'virtual Error::~Error()'
... overriding 'virtual std::exception::~exception() throw ()'
&lt;/pre&gt;
&lt;p&gt;While compiling some code with gcc (that had previously compiled and run
without complaint under CodeWarrior), the following fatal error was
reported:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Error.h:83: looser throw specifier for `virtual Error::~Error()'
/usr/include/gcc/darwin/3 …&lt;/pre&gt;</summary><content type="html">&lt;pre class="literal-block"&gt;
looser throw specifier for 'virtual Error::~Error()'
... overriding 'virtual std::exception::~exception() throw ()'
&lt;/pre&gt;
&lt;p&gt;While compiling some code with gcc (that had previously compiled and run
without complaint under CodeWarrior), the following fatal error was
reported:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Error.h:83: looser throw specifier for `virtual Error::~Error()'
/usr/include/gcc/darwin/3.1/g++-v3/exception:54: overriding
`virtual std::exception::~exception() throw ()'
&lt;/pre&gt;
&lt;p&gt;The error message is completely correct, but deserves some explanation.
It occurs when a method in a derived class has a different throw
specifier (the set of allowed objects that can be thrown from within the
method) to the base class. In the above example, the base class
'std::exception' is defined:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class exception {
   ...
   virtual ~exception() throw();
   ...
};
&lt;/pre&gt;
&lt;p&gt;while the derived class 'Error' is defined:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Error: public std::exception {
   ...
   ~Error ();
   ...
};
&lt;/pre&gt;
&lt;p&gt;Note that if no destructor is defined in the derived class, the problem
still occurs as the automatically generated destructor is like that
above, i.e. has no throw specifier. The appearance of this problem can
be unpredictable as not all compilers will worry about this problem.
(The above example was detected by gcc 3, but passed by gcc 2.9 and
CodeWarrior 8.) Also, in the case of 'std::exception', not all
implementions of the STL use throw specifiers. In any event, the derived
class must be corrected:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Error: public std::exception {
   ...
   ~Error ()
      throw ();
   ...
};
&lt;/pre&gt;
</content><category term="c++"></category><category term="programming"></category></entry><entry><title>Useful products</title><link href="http://www.agapow.net/programming/web-development/plone/useful-products/" rel="alternate"></link><published>2005-01-01T12:00:00+00:00</published><updated>2005-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2005-01-01:/programming/web-development/plone/useful-products/</id><summary type="html">&lt;p&gt;Recommended extensions and add-ons for your Plone installation,
including some advice and hacks.&lt;/p&gt;
&lt;div class="section" id="listingpages"&gt;
&lt;h2&gt;ListingPages&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://plone.org/products/listingpages"&gt;ListingPages at PloneProducts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In theory Topics can do just about everything you would ever need to do
as regards dynamically aggregating content. In practice, they seem to be
rarely used. (Neither of the three Plone books …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Recommended extensions and add-ons for your Plone installation,
including some advice and hacks.&lt;/p&gt;
&lt;div class="section" id="listingpages"&gt;
&lt;h2&gt;ListingPages&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://plone.org/products/listingpages"&gt;ListingPages at PloneProducts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In theory Topics can do just about everything you would ever need to do
as regards dynamically aggregating content. In practice, they seem to be
rarely used. (Neither of the three Plone books spends more than a page
on Topics, with one simply listing it as an available content type.
Instructions on using them are scant, save for the outdated doc files
within the CMFTopic Product. For simple cases, configuration is fiddly.
Finally, the physical presentation of Topics is ugly.)&lt;/p&gt;
&lt;p&gt;Fortunately, ListingPages cover the simpler cases where you just need to
produce a page that is a list of defined content. Selection criteria can
be based on type, state and location (the current folder down or the
whole site).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;GOTCHA:&lt;/em&gt; Although the &amp;quot;Page size&amp;quot; option (controlling pagination)
says it can be left blank or set to 0 to turn pagination off, in fact a
blank entry gives rise to an error in view mode.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;GOTCHA:&lt;/em&gt; To batch a large list of items (i.e. have it grouped
automatically into several pages) set &amp;quot;Page size&amp;quot; must be set to
something non-zero and &amp;quot;Number of items&amp;quot; to 0 or something larger than
&amp;quot;Page size&amp;quot;. (This is in the Product instructions, but I was able to
miss it and get confused.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;POSSIBLE BUG:&lt;/em&gt; I've had variable results using the keywords in list
setup. Caveat user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ploneloginhistory"&gt;
&lt;h2&gt;PloneLoginHistory&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.contentmanagementsoftware.info/plone/PloneLoginHistory"&gt;PloneLoginHistory at ContentManagementSoftware.Info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Need to know when (or if) your users are logging in? Suspicious that
someone has been logging into your account? Look no further.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="richdocument"&gt;
&lt;h2&gt;RichDocument&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.contentmanagementsoftware.info/plone/RichDocument"&gt;RichDocument at ContentManagementSoftware.Info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RichDocument is a few grades better than the default document type in
Plone because it allows the more flexible restructured text format. (2.1
Plone documents now allo&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Diagnostic printf</title><link href="http://www.agapow.net/programming/python/diagnostic-printf/" rel="alternate"></link><published>2004-10-14T12:00:00+01:00</published><updated>2004-10-14T12:00:00+01:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2004-10-14:/programming/python/diagnostic-printf/</id><summary type="html">&lt;p&gt;The crude &amp;quot;lets drop a print statement in&amp;quot; approach keeps being useful
even with advanced dynamic languages. Here's a (slightly) improved
version for ruby that pretty prints any number of passed objects and
(importantly) where the print call was made from:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def dbg (*args)
   print(&amp;quot;dbg: #{caller()[0]}: &amp;quot;)
   args.each …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;The crude &amp;quot;lets drop a print statement in&amp;quot; approach keeps being useful
even with advanced dynamic languages. Here's a (slightly) improved
version for ruby that pretty prints any number of passed objects and
(importantly) where the print call was made from:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def dbg (*args)
   print(&amp;quot;dbg: #{caller()[0]}: &amp;quot;)
   args.each { |a|
      print &amp;quot;* #{a.inspect} &amp;quot;
   }
end

# Examples:
dbg(1, 2, 3, 4)
# Returns:
# DEBUG: /home/f0/paul/dbg.rb:11:
# * 1
# * 2
# * 3
# * 4

dbg(1, 2, 3, :abc =&amp;gt; 4)
# DEBUG: /home/f0/paul/dbg.rb:13:
# * 1
# * 2
# * 3
# * {:abc=&amp;gt;4}
&lt;/pre&gt;
</content><category term="programming"></category><category term="ruby"></category><category term="debugging"></category><category term="imported"></category></entry><entry><title>Slots</title><link href="http://www.agapow.net/programming/python/slots/" rel="alternate"></link><published>2004-01-01T12:00:00+00:00</published><updated>2004-01-01T12:00:00+00:00</updated><author><name>Paul Agapow</name></author><id>tag:www.agapow.net,2004-01-01:/programming/python/slots/</id><summary type="html">&lt;p&gt;Around version 2.2, Python rejigged its classes with some useful
extensions. Unfortunately these enhancements have been explained so
poorly that they appear in little published code.&lt;/p&gt;
&lt;p&gt;One such enhancement is &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt;. An attribute of this name
in a class restricts what attributes can be created in objects of that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Around version 2.2, Python rejigged its classes with some useful
extensions. Unfortunately these enhancements have been explained so
poorly that they appear in little published code.&lt;/p&gt;
&lt;p&gt;One such enhancement is &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt;. An attribute of this name
in a class restricts what attributes can be created in objects of that
class. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; class myclass (object):
      __slots__ = ['default']

&amp;gt;&amp;gt;&amp;gt; a = myclass ()
&amp;gt;&amp;gt;&amp;gt; a.default = 1 # allowed
&amp;gt;&amp;gt;&amp;gt; a.key = 3 # not allowed
exceptions.AttributeError
Traceback (most recent call last)
AttributeError: 'myclass' object has no attribute 'key'
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; class attribute earmarks places for the member
variables of the given names. It otherwise prevents the implicit
creation of object attributes. In plain language: if you mispell a
variable name in an assignment, you don't accicdentally create and
assign to a new variable. And this is very handy.&lt;/p&gt;
&lt;p&gt;There is a caveat. The class in question must be derived from the
primordial Python &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; (or some descendant of it) for this to
work. Otherwise &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; has no effect. So these would
work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class myclass (list):

class myclass (dict):
&lt;/pre&gt;
&lt;p&gt;while this won't:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class myclass:
&lt;/pre&gt;
</content><category term="python"></category><category term="programming"></category><category term="slots"></category><category term="imported"></category><category term="possibly-obselete"></category></entry></feed>